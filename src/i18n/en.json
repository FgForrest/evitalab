{
  "explorer": {
    "title": "Connections Explorer",
    "connection": {
      "actions": {
        "openGraphQLSystemApiConsole":  "Open GraphQL System API console",
        "add": "Add connection",
        "edit": "Edit connection",
        "remove": "Remove connection"
      },
      "editor": {
        "addTitle": "Add connection",
        "editTitle": "Edit connection",
        "form": {
          "connectionName": {
            "label": "Connection name",
            "validations": {
              "required": "Name of connection is required.",
              "duplicate": "Connection with this name already exists."
            }
          },
          "labApiUrl": {
            "label": "evitaLab API URL",
            "validations": {
              "required": "evitaLab API URL is required.",
              "invalidUrl": "evitaLab API URL is not a valid URL.",
              "unreachable": "evitaLab API URL is not reachable."
            }
          },
          "graphQLApiUrl": {
            "label": "GraphQL API URL",
            "validations": {
              "required": "GraphQL API URL is required.",
              "invalidUrl": "GraphQL API URL is not a valid URL.",
              "unreachable": "GraphQL API URL is not reachable."
            }
          }
        },
        "button": {
          "testConnection": "Test connection"
        },
        "notification": {
          "connectionSuccess": "Successfully connected.",
          "connectionError": "Connection test failed."
        }
      },
      "remove": {
        "title":"Remove connection",
        "question": "Are you sure you want to remove the connection {connectionName}?"
      }
    },
    "catalog": {
      "actions": {
        "openEvitaQLConsole": "Open evitaQL console",
        "openGraphQLDataApiConsole": "Open GraphQL Data API console",
        "openGraphQLSchemaApiConsole": "Open GraphQL Schema API console",
        "viewSchema": "View schema"
      },
      "errors": {
        "couldNotLoad": "This catalog couldn't be loaded because it's corrupted."
      }
    },
    "collection": {
      "actions": {
        "viewEntities": "View entities",
        "viewSchema": "View schema"
      }
    }
  },
  "entityGrid": {
    "loadedDataWarning": "Loaded query data must be manually executed.",
    "dataLocaleSelector": {
      "item": {
        "none": "None"
      }
    },
    "priceTypeSelector": {
      "WITH_TAX": "With tax",
      "WITHOUT_TAX": "Without tax"
    },
    "queryInput": {
      "notification": {
        "failedToSaveQueryToHistory": "Failed to save query to history."
      }
    },
    "propertySelector": {
      "title": "Displayed properties",
      "label": {
        "filterProperties": "Filter properties"
      },
      "button": {
        "selectDisplayedProperties": "Select displayed properties"
      },
      "notification": {
        "invalidPropertySectionSelection": "Cannot select `Some` properties in a section."
      },
      "section": {
        "type": {
          "entity":  "Entity",
          "attributes": "Attributes",
          "associatedData":  "Associated data",
          "references": "References",
          "referenceAttributes":  "Reference attributes",
          "prices": "Prices"
        },
        "button": {
          "openSchema": "Open schema"
        },
        "placeholder": {
          "noItemsForSearchedTerm": "No items found for searched term."
        }
      }
    },
    "grid": {
      "notification": {
        "failedToFindProperty": "Failed to find property descriptor for key: '{key}'",
        "failedToFindRequestedProperties": "These properties were requested but not found in current data: {keys}"
      },
      "cell": {
        "placeholder": {
          "noLocaleSelected": "<no locale selected>"
        },
        "detail": {
          "placeholder": {
            "invalidValue": "Invalid value.",
            "unknownProperty": "Unknown property"
          }

        }
      },
      "renderer": {
        "button": {
          "displayRawValue": "Display raw value",
          "prettyPrintValue": "Pretty print value",
          "selectOutputFormat": "Select output format"
        },
        "format": {
          "autoPrettyPrint": "Auto pretty print",
          "rawValue": "Raw value",
          "markdown": "Markdown",
          "json": "JSON",
          "xml": "XML",
          "html": "HTML"
        }
      },
      "codeRenderer": {
        "placeholder": {
          "failedToFormatValue": "Error: Failed to format value as {codeLanguage}. \\r\\n\\r\\n{message}"
        },
        "notification": {
          "unsupportedCodeLanguage": "Unsupported code language."
        }
      },
      "htmlRenderer": {
        "placeholder": {
          "failedToRenderHtml": "Error: Failed to render HTML. Value is not a string."
        }
      },
      "priceRenderer": {
        "title": "Price for sale",
        "label": {
          "priceInnerRecordHandling": "Price inner record handling"
        },
        "notification": {
          "invalidPricesObject": "Invalid prices object!"
        },
        "filter": {
          "label": {
            "priceId": "Price ID",
            "priceList": "Price list",
            "currency": "Currency",
            "innerRecordIds": "Inner record IDs"
          },
          "help": {
            "computePriceForSale": "No price for sale found. To compute price for sale, following constraints need to be present in the filter: `priceInPriceLists`, `priceInCurrency`.",
            "missingPriceListsAndCurrencyForPriceForSale": "To compute a price for sale for the filtered prices, select at least one price list and one currency.",
            "noPriceForSale": {
              "text": "No price for sale was computed for the filtered prices because {reason}.",
              "reason": {
                "noPrices": "there are no prices left for this filter",
                "noPriceLists": "no price lists are selected",
                "noCurrency": "no currency is selected",
                "tooManyCurrencies": "more than one currency is selected"
              }
            },
            "priceListOrder": "The order of selected price lists <em>defines the price listing ordering</em>.<br/>It also <em>defines priority</em> of price lists for price for sale computation."
          }
        },
        "price": {
          "label": {
            "priceId": "Price ID",
            "priceList": "Price list",
            "currency": "Currency",
            "innerRecordId": "Inner record ID",
            "sellable": "Sellable",
            "validity": "Validity",
            "priceWithoutTax": "Price without tax",
            "priceWithTax": "Price with tax",
            "taxRate": "Tax rate",
            "virtual": "Virtual"
          },
          "tooltip": {
            "sellablePrice": "This price is sellable.",
            "notSellablePrice": "This price is not sellable."
          },
          "help": {
            "priceForSale": "This price would be used as a price for sale if this filter were used in the main query.",
            "virtualPriceForSale": "This is a virtual price for sale computed based on this filter. The price is virtual because the entity has price inner record handling set to `SUM`, therefore, the price for sale is a sum of internally selected prices."
          }
        }
      },
      "referenceAttributeRenderer": {
        "button": {
          "openReference": "Open reference in new tab"
        }
      }
    }
  },
  "errorViewer": {
    "placeholder": {
      "noDetailsAvailable": "No details available."
    },
    "button": {
      "submitIssue": "Submit an issue"
    }
  },
  "evitaQLConsole": {
    "placeholder": {
      "writeQuery": "// Write your EvitaQL query for catalog {catalogName} here.\n",
      "results": "Results will be displayed here...",
      "emptyHistory": "Empty history"
    },
    "button": {
      "clearHistory": "Clear history"
    },
    "notification": {
      "failedToSaveQueryToHistory": "Failed to save query to history."
    }
  },
  "graphQLConsole": {
    "instanceType": {
      "system": "System",
      "data": "Data",
      "schema": "Schema"
    },
    "placeholder": {
      "writeQuery": "# Write your GraphQL query for catalog {catalogName} here.\n",
      "results": "Results will be displayed here...",
      "emptyHistory": "Empty history"
    },
    "button": {
      "instanceDetails": "GraphQL API instance details",
      "clearHistory": "Clear history"
    },
    "notification": {
      "failedToSaveQueryToHistory": "Failed to save query to history."
    }
  },
  "resultVisualizer": {
    "selector": {
      "label": {
        "query": "From",
        "data": "Visualise"
      }
    },
    "visualiser": {
      "placeholder": {
        "noQueries": "No queries to visualise",
        "noSelectedQuery": "Select query to visualise",
        "noSelectedData": "Select what to visualise"
      }
    },
    "facetStatisticsVisualiser": {
      "placeholder": {
        "noGroups": "No facet summary groups found."
      },
      "label": {
        "externalGroup": "External",
        "externalReference": "External"
      },
      "notification": {
        "primaryKeyCopiedToClipboard": "Primary key copied to clipboard.",
        "noPrimaryKeyProperty": "No primary key property was fetched."
      },
      "help": {
        "noPrimaryKeyProperty": "No `primaryKey` property or representative attributes were fetched.",
        "noGroupCountProperty": "No `count` property was fetched.",
        "groupCountProperty": "The total number of entities matching any facet from this group without user filter.",
        "externalGroup": "This is only a reference to an external entity that is managed by external system.",
        "noRequestedProperty": "The `requested` property was not fetched.",
        "noRepresentativeProperty": "No `primaryKey` property or representative attributes were fetched.",
        "zeroImpactMatchCount": "No entities would be returned if this facet was requested because no entity has combination of already requested facets plus this one.",
        "noTotalRecordCountProperty": "The `totalRecordCount` property was not found in neither `recordPage` nor `recordStrip`.",
        "totalRecordCountProperty": "The total number of entities matching the user filter.",
        "noImpactDifferenceProperty": "The `impact.difference` property was not found.",
        "impactDifferenceProperty": "The difference from the current number of entities matching the user filter if this facet was requested.",
        "noImpactMatchProperty": "The `impact.matchCount` property was not found.",
        "impactMatchProperty": "The total number of entities matching the user filter if this facet was requested.",
        "noCountProperty": "The `count` property was not found.",
        "countProperty": "The total number of entities matching this facet without the user filter.",
        "externalReference": "This is only a reference to an external entity that is managed by external system."
      }
    },
    "hierarchyVisualiser": {
      "placeholder": {
        "noHierarchies": "No hierarchies found."
      },
      "label": {
        "requested": "Requested",
        "unknown": "Unknown"
      },
      "notification": {
        "primaryKeyCopiedToClipboard": "Primary key copied to clipboard.",
        "noPrimaryKeyProperty": "No primary key property was fetched.",
        "parentPrimaryKeyCopiedToClipboard": "Parent primary key copied to clipboard.",
        "noParentPrimaryKeyProperty": "No parent primary key property was fetched."
      },
      "help": {
        "noRepresentativeProperty": "No `primaryKey` property or representative attributes were fetched.",
        "requestedEntity": "The entity representing this hierarchy node was filtered by `hierarchyWithin`.",
        "noChildrenCountProperty": "The `childrenCount` property was not found.",
        "childrenCountProperty": "The count of child hierarchy nodes that exist in the hierarchy tree below the given node; the count is correct regardless of whether the children themselves are requested/traversed by the constraint definition, and respects hierarchyOfReference settings for automatic removal of hierarchy nodes that would contain empty result set of queried entities (REMOVE_EMPTY).",
        "noQueriedEntityCountProperty": "The `queriedEntityCount` property was not found.",
        "queriedEntityCountProperty": "The total number of queried entities that will be returned if the current query is focused on this particular hierarchy node using the hierarchyWithin filter constraint (the possible refining constraint in the form of directRelation and excludingRoot is not taken into account).",
        "nodeCountProperty": "The number of actually fetched nodes.",
        "requestedNode": "An entity representing a hierarchy node in this tree that was filtered by `hierarchyWithin`."
      }
    },
    "histogram": {
      "placeholder": {
        "unknown": "unknown",
        "missingPropertiesForChart": "Missing properties: {properties}. Cannot render the chart.",
        "missingProperties": "Missing properties: {properties}.",
        "missingPropertiesForSimulatedRange": "Missing properties: {properties}. Cannot simulate the range.",
        "missingPropertiesForActualRange": "Missing properties {properties} for actual values. The range is only simulated from indexes."
      },
      "label": {
        "allBuckets": "All buckets",
        "requestedBuckets": "Requested buckets",
        "overallCount": "Overall count",
        "bucketIndex": "Bucket index",
        "occurrences": "Occurrences",
        "threshold": "Threshold",
        "wasRequested": "Was requested"
      },
      "help": {
        "noMinProperty": "No `min` property of the histogram was fetched.",
        "noOverallCountProperty": "No `overallCount` property of the histogram was fetched.",
        "noMaxProperty": "No `max` property of the histogram was fetched."
      }
    },
    "attributeHistogram": {
      "placeholder": {
        "noAttributeHistograms": "No attribute histograms found."
      }
    },
    "priceHistogram": {
      "placeholder": {
        "noPriceHistograms": "No price histogram found."
      }
    }
  },
  "schemaViewer": {
    "section": {
      "placeholder": {
        "noItemsForSearchedTerm": "No items found for searched term."
      },
      "label": {
        "filter": "Filter"
      },
      "flag": {
        "entitySchema": {
          "hierarchical": "hierarchical"
        },
        "attributeSchema": {
          "representative": "representative",
          "globallyUnique": "globally unique",
          "globallyUniquePerLocale": "globally unique per locale",
          "unique": "unique",
          "uniquePerLocale":  "unique per locale",
          "filterable": "filterable",
          "sortable":  "sortable",
          "localized": "localized",
          "nullable":  "nullable"
        },
        "associatedDataSchema": {
          "localized": "localized",
          "nullable":  "nullable"
        },
        "referenceSchema": {
          "external": "external",
          "indexed": "indexed",
          "faceted": "faceted"
        }
      }
    },
    "catalog": {
      "label": {
        "version": "Version",
        "description": "Description"
      }
    },
    "entities": {
      "title": "Entities"
    },
    "entity": {
      "label": {
        "version": "Version",
        "description": "Description",
        "deprecationNotice": "Deprecation notice",
        "locales": "Locales",
        "currencies": "Currencies",
        "generatedPrimaryKey": "Generated primary key",
        "hierarchical": "Hierarchical",
        "prices": "Prices",
        "indexedDecimalPlaces": "Indexed decimal places",
        "evolutionModes": "Evolution modes"
      }
    },
    "nameVariants": {
      "title": "Name variants",
      "prefixedTitle": "{prefix} name variants",
      "label": {
        "camelCase": "camelCase",
        "kebabCase": "kebab-case",
        "pascalCase": "PascalCase",
        "snakeCase": "snake_case",
        "upperSnakeCase": "UPPER_SNAKE_CASE"
      }
    },
    "attributes": {
      "title": "Attributes"
    },
    "attribute": {
      "placeholder": {
        "uniqueWithinCollection": "Within collection",
        "uniqueWithinLocaleOfCollection": "Within locale of collection",
        "globallyUniqueWithinCatalog": "Within catalog",
        "globallyUniqueWithinLocaleOfCatalog": "Within locale of catalog"
      },
      "label": {
        "type": "Type",
        "description": "Description",
        "deprecationNotice":  "Deprecation notice",
        "representative": "Representative",
        "unique": "Unique",
        "globallyUnique": "Globally unique",
        "filterable": "Filterable",
        "sortable": "Sortable",
        "localized": "Localized",
        "nullable": "Nullable",
        "defaultValue": "Default value",
        "indexedDecimalPlaces": "Indexed decimal places"
      },
      "help": {
        "uniqueWithinCollection": "The attribute value must be unique among all the entities of the same collection.",
        "uniqueWithinLocaleOfCollection": "The localized attribute value must be unique among all values of the same locale among all the entities.",
        "globallyUniqueWithinCatalog": "The attribute value (either localized or non-localized) must be unique among all values among all the entities using this global attribute schema in the entire catalog.",
        "globallyUniqueWithinLocaleOfCatalog": "The localized attribute value must be unique among all values of the same locale among all the entities using this global attribute schema in the entire catalog.",
        "implicitlyFilterable": "The attribute is implicitly filterable because it is unique."
      }
    },
    "associatedData": {
      "title": "Associated data"
    },
    "associatedDatum": {
      "label": {
        "type": "Type",
        "description": "Description",
        "deprecationNotice":  "Deprecation notice",
        "localized": "Localized",
        "nullable": "Nullable"
      }
    },
    "references": {
      "title": "References"
    },
    "reference": {
      "label": {
        "description": "Description",
        "deprecationNotice":  "Deprecation notice",
        "cardinality": "Cardinality",
        "referencedEntity": "Referenced entity",
        "referencedEntityManaged": "Referenced entity managed",
        "referencedGroup": "Referenced group",
        "referencedGroupManaged": "Referenced group managed",
        "indexed": "Indexed",
        "faceted": "Faceted",
        "referencedEntityNameVariants": "Referenced entity",
        "referencedGroupNameVariants": "Referenced group"
      }
    }
  }
}