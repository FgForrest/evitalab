// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file GrpcTrafficRecording.proto (package io.evitadb.externalApi.grpc.generated, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Int32Value, Int64Value, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { GrpcOffsetDateTime, GrpcUuid } from "./GrpcEvitaDataTypes_pb.js";
import { GrpcEntityMutation } from "./GrpcEntityMutation_pb.js";
import { GrpcEntitySchemaMutation } from "./GrpcEntitySchemaMutation_pb.js";

/**
 * Enum to specify the depth of details sent in the traffic recording event.
 *
 * @generated from enum io.evitadb.externalApi.grpc.generated.GrpcTrafficRecordingContent
 */
export enum GrpcTrafficRecordingContent {
  /**
   * Only the header of the event is sent.
   *
   * @generated from enum value: TRAFFIC_RECORDING_HEADER = 0;
   */
  TRAFFIC_RECORDING_HEADER = 0,

  /**
   * Entire traffic recording content is sent.
   *
   * @generated from enum value: TRAFFIC_RECORDING_BODY = 1;
   */
  TRAFFIC_RECORDING_BODY = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(GrpcTrafficRecordingContent)
proto3.util.setEnumType(GrpcTrafficRecordingContent, "io.evitadb.externalApi.grpc.generated.GrpcTrafficRecordingContent", [
  { no: 0, name: "TRAFFIC_RECORDING_HEADER" },
  { no: 1, name: "TRAFFIC_RECORDING_BODY" },
]);

/**
 * List of all possible traffic recording types.
 *
 * @generated from enum io.evitadb.externalApi.grpc.generated.GrpcTrafficRecordingType
 */
export enum GrpcTrafficRecordingType {
  /**
   * evitaDB session opened.
   *
   * @generated from enum value: TRAFFIC_RECORDING_SESSION_START = 0;
   */
  TRAFFIC_RECORDING_SESSION_START = 0,

  /**
   * * evitaDB session closed.
   *
   * @generated from enum value: TRAFFIC_RECORDING_SESSION_FINISH = 1;
   */
  TRAFFIC_RECORDING_SESSION_FINISH = 1,

  /**
   * Query received via. API from the client - container contains original string of the client query.
   * API might call multiple queries related to the same source query.
   *
   * @generated from enum value: TRAFFIC_RECORDING_SOURCE_QUERY = 2;
   */
  TRAFFIC_RECORDING_SOURCE_QUERY = 2,

  /**
   * Query received via. API from the client is finalized and sent to the client. Container contains the final
   * statistics aggregated over all operations related to the source query.
   *
   * @generated from enum value: TRAFFIC_RECORDING_SOURCE_QUERY_STATISTICS = 3;
   */
  TRAFFIC_RECORDING_SOURCE_QUERY_STATISTICS = 3,

  /**
   * Internal evitaDB query (evitaQL) was executed.
   *
   * @generated from enum value: TRAFFIC_RECORDING_QUERY = 4;
   */
  TRAFFIC_RECORDING_QUERY = 4,

  /**
   * Internal call to retrieve single evitaDB entity. Record is not created for entities fetched as a part of
   * a query.
   *
   * @generated from enum value: TRAFFIC_RECORDING_FETCH = 5;
   */
  TRAFFIC_RECORDING_FETCH = 5,

  /**
   * Internal call to enrich contents of the evitaDB entity.
   *
   * @generated from enum value: TRAFFIC_RECORDING_ENRICHMENT = 6;
   */
  TRAFFIC_RECORDING_ENRICHMENT = 6,

  /**
   * Internal call to mutate the evitaDB entity or catalog schema.
   *
   * @generated from enum value: TRAFFIC_RECORDING_MUTATION = 7;
   */
  TRAFFIC_RECORDING_MUTATION = 7,
}
// Retrieve enum metadata with: proto3.getEnumType(GrpcTrafficRecordingType)
proto3.util.setEnumType(GrpcTrafficRecordingType, "io.evitadb.externalApi.grpc.generated.GrpcTrafficRecordingType", [
  { no: 0, name: "TRAFFIC_RECORDING_SESSION_START" },
  { no: 1, name: "TRAFFIC_RECORDING_SESSION_FINISH" },
  { no: 2, name: "TRAFFIC_RECORDING_SOURCE_QUERY" },
  { no: 3, name: "TRAFFIC_RECORDING_SOURCE_QUERY_STATISTICS" },
  { no: 4, name: "TRAFFIC_RECORDING_QUERY" },
  { no: 5, name: "TRAFFIC_RECORDING_FETCH" },
  { no: 6, name: "TRAFFIC_RECORDING_ENRICHMENT" },
  { no: 7, name: "TRAFFIC_RECORDING_MUTATION" },
]);

/**
 * Record for the criteria of the capture request allowing to limit mutations to specific area of interest an its
 * properties.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcTrafficRecordingCaptureCriteria
 */
export class GrpcTrafficRecordingCaptureCriteria extends Message<GrpcTrafficRecordingCaptureCriteria> {
  /**
   * content determines whether only basic information about the traffic recording is returned or the actual content
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcTrafficRecordingContent content = 1;
   */
  content = GrpcTrafficRecordingContent.TRAFFIC_RECORDING_HEADER;

  /**
   * since specifies the time from which the traffic recording should be returned
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcOffsetDateTime since = 2;
   */
  since?: GrpcOffsetDateTime;

  /**
   * sinceSessionSequenceId specifies the session sequence ID from which the traffic recording should be returned
   *
   * @generated from field: google.protobuf.Int64Value sinceSessionSequenceId = 3;
   */
  sinceSessionSequenceId?: bigint;

  /**
   * sinceRecordSessionOffset specifies the record session offset from which the traffic recording should be returned
   *                          (the offset is relative to the session sequence ID and starts from 0), offset allows
   *                          to continue fetching the traffic recording from the last fetched record when session
   *                          was not fully fetched
   *
   * @generated from field: google.protobuf.Int32Value sinceRecordSessionOffset = 4;
   */
  sinceRecordSessionOffset?: number;

  /**
   * type specifies the types of traffic recording to be returned
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcTrafficRecordingType type = 5;
   */
  type: GrpcTrafficRecordingType[] = [];

  /**
   * sessionId specifies the session ID from which the traffic recording should be returned
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcUuid sessionId = 6;
   */
  sessionId?: GrpcUuid;

  /**
   * longerThan specifies the minimum duration in milliseconds of the traffic recording to be returned
   *
   * @generated from field: google.protobuf.Int32Value longerThanMilliseconds = 7;
   */
  longerThanMilliseconds?: number;

  /**
   * fetchingMoreBytesThan specifies the minimum number of bytes that record should have fetched from the disk
   *
   * @generated from field: google.protobuf.Int32Value fetchingMoreBytesThan = 8;
   */
  fetchingMoreBytesThan?: number;

  /**
   * labels specifies the client labels that the traffic recording must have (both name and value must match)
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcQueryLabel labels = 9;
   */
  labels: GrpcQueryLabel[] = [];

  constructor(data?: PartialMessage<GrpcTrafficRecordingCaptureCriteria>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcTrafficRecordingCaptureCriteria";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "content", kind: "enum", T: proto3.getEnumType(GrpcTrafficRecordingContent) },
    { no: 2, name: "since", kind: "message", T: GrpcOffsetDateTime },
    { no: 3, name: "sinceSessionSequenceId", kind: "message", T: Int64Value },
    { no: 4, name: "sinceRecordSessionOffset", kind: "message", T: Int32Value },
    { no: 5, name: "type", kind: "enum", T: proto3.getEnumType(GrpcTrafficRecordingType), repeated: true },
    { no: 6, name: "sessionId", kind: "message", T: GrpcUuid },
    { no: 7, name: "longerThanMilliseconds", kind: "message", T: Int32Value },
    { no: 8, name: "fetchingMoreBytesThan", kind: "message", T: Int32Value },
    { no: 9, name: "labels", kind: "message", T: GrpcQueryLabel, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcTrafficRecordingCaptureCriteria {
    return new GrpcTrafficRecordingCaptureCriteria().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcTrafficRecordingCaptureCriteria {
    return new GrpcTrafficRecordingCaptureCriteria().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcTrafficRecordingCaptureCriteria {
    return new GrpcTrafficRecordingCaptureCriteria().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcTrafficRecordingCaptureCriteria | PlainMessage<GrpcTrafficRecordingCaptureCriteria> | undefined, b: GrpcTrafficRecordingCaptureCriteria | PlainMessage<GrpcTrafficRecordingCaptureCriteria> | undefined): boolean {
    return proto3.util.equals(GrpcTrafficRecordingCaptureCriteria, a, b);
  }
}

/**
 * Record represents a CDC event that is sent to the subscriber if it matches to the request he made.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcTrafficRecord
 */
export class GrpcTrafficRecord extends Message<GrpcTrafficRecord> {
  /**
   * The sequence order of the session (analogous to sessionId, but monotonic sequence based on location in the log).
   *
   * @generated from field: int64 sessionSequenceOrder = 1;
   */
  sessionSequenceOrder = protoInt64.zero;

  /**
   * The session id which the recording belongs to.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcUuid sessionId = 2;
   */
  sessionId?: GrpcUuid;

  /**
   * The order (sequence) of the traffic recording in the session. First record in the session has sequence ID 0 and
   * represents the session start, additional records are numbered sequentially.
   *
   * @generated from field: int32 recordSessionOffset = 3;
   */
  recordSessionOffset = 0;

  /**
   * The type of the recording.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcTrafficRecordingType type = 4;
   */
  type = GrpcTrafficRecordingType.TRAFFIC_RECORDING_SESSION_START;

  /**
   * The time when the recording was created.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcOffsetDateTime created = 5;
   */
  created?: GrpcOffsetDateTime;

  /**
   * The duration of the operation in milliseconds.
   *
   * @generated from field: int32 durationInMilliseconds = 6;
   */
  durationInMilliseconds = 0;

  /**
   * The size of the data fetched from the permanent storage in bytes.
   *
   * @generated from field: int32 ioFetchedSizeBytes = 7;
   */
  ioFetchedSizeBytes = 0;

  /**
   * The number of objects fetched from the permanent storage.
   *
   * @generated from field: int32 ioFetchCount = 8;
   */
  ioFetchCount = 0;

  /**
   * optional body of the traffic recording when it is requested by the GrpcTrafficCaptureContent
   *
   * @generated from oneof io.evitadb.externalApi.grpc.generated.GrpcTrafficRecord.body
   */
  body: {
    /**
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcTrafficMutationContainer mutation = 9;
     */
    value: GrpcTrafficMutationContainer;
    case: "mutation";
  } | {
    /**
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcTrafficQueryContainer query = 10;
     */
    value: GrpcTrafficQueryContainer;
    case: "query";
  } | {
    /**
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcTrafficEntityEnrichmentContainer enrichment = 11;
     */
    value: GrpcTrafficEntityEnrichmentContainer;
    case: "enrichment";
  } | {
    /**
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcTrafficEntityFetchContainer fetch = 12;
     */
    value: GrpcTrafficEntityFetchContainer;
    case: "fetch";
  } | {
    /**
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcTrafficSessionCloseContainer sessionClose = 13;
     */
    value: GrpcTrafficSessionCloseContainer;
    case: "sessionClose";
  } | {
    /**
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcTrafficSessionStartContainer sessionStart = 14;
     */
    value: GrpcTrafficSessionStartContainer;
    case: "sessionStart";
  } | {
    /**
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcTrafficSourceQueryContainer sourceQuery = 15;
     */
    value: GrpcTrafficSourceQueryContainer;
    case: "sourceQuery";
  } | {
    /**
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcTrafficSourceQueryStatisticsContainer sourceQueryStatistics = 16;
     */
    value: GrpcTrafficSourceQueryStatisticsContainer;
    case: "sourceQueryStatistics";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GrpcTrafficRecord>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcTrafficRecord";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sessionSequenceOrder", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "sessionId", kind: "message", T: GrpcUuid },
    { no: 3, name: "recordSessionOffset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "type", kind: "enum", T: proto3.getEnumType(GrpcTrafficRecordingType) },
    { no: 5, name: "created", kind: "message", T: GrpcOffsetDateTime },
    { no: 6, name: "durationInMilliseconds", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "ioFetchedSizeBytes", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 8, name: "ioFetchCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 9, name: "mutation", kind: "message", T: GrpcTrafficMutationContainer, oneof: "body" },
    { no: 10, name: "query", kind: "message", T: GrpcTrafficQueryContainer, oneof: "body" },
    { no: 11, name: "enrichment", kind: "message", T: GrpcTrafficEntityEnrichmentContainer, oneof: "body" },
    { no: 12, name: "fetch", kind: "message", T: GrpcTrafficEntityFetchContainer, oneof: "body" },
    { no: 13, name: "sessionClose", kind: "message", T: GrpcTrafficSessionCloseContainer, oneof: "body" },
    { no: 14, name: "sessionStart", kind: "message", T: GrpcTrafficSessionStartContainer, oneof: "body" },
    { no: 15, name: "sourceQuery", kind: "message", T: GrpcTrafficSourceQueryContainer, oneof: "body" },
    { no: 16, name: "sourceQueryStatistics", kind: "message", T: GrpcTrafficSourceQueryStatisticsContainer, oneof: "body" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcTrafficRecord {
    return new GrpcTrafficRecord().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcTrafficRecord {
    return new GrpcTrafficRecord().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcTrafficRecord {
    return new GrpcTrafficRecord().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcTrafficRecord | PlainMessage<GrpcTrafficRecord> | undefined, b: GrpcTrafficRecord | PlainMessage<GrpcTrafficRecord> | undefined): boolean {
    return proto3.util.equals(GrpcTrafficRecord, a, b);
  }
}

/**
 * This container holds a mutation and its metadata.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcTrafficMutationContainer
 */
export class GrpcTrafficMutationContainer extends Message<GrpcTrafficMutationContainer> {
  /**
   * The mutation operation.
   *
   * @generated from oneof io.evitadb.externalApi.grpc.generated.GrpcTrafficMutationContainer.mutation
   */
  mutation: {
    /**
     * The entity mutation operation.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntityMutation entityMutation = 1;
     */
    value: GrpcEntityMutation;
    case: "entityMutation";
  } | {
    /**
     * The schema mutation operation.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntitySchemaMutation schemaMutation = 2;
     */
    value: GrpcEntitySchemaMutation;
    case: "schemaMutation";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GrpcTrafficMutationContainer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcTrafficMutationContainer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entityMutation", kind: "message", T: GrpcEntityMutation, oneof: "mutation" },
    { no: 2, name: "schemaMutation", kind: "message", T: GrpcEntitySchemaMutation, oneof: "mutation" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcTrafficMutationContainer {
    return new GrpcTrafficMutationContainer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcTrafficMutationContainer {
    return new GrpcTrafficMutationContainer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcTrafficMutationContainer {
    return new GrpcTrafficMutationContainer().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcTrafficMutationContainer | PlainMessage<GrpcTrafficMutationContainer> | undefined, b: GrpcTrafficMutationContainer | PlainMessage<GrpcTrafficMutationContainer> | undefined): boolean {
    return proto3.util.equals(GrpcTrafficMutationContainer, a, b);
  }
}

/**
 * Container for a query and its metadata.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcTrafficQueryContainer
 */
export class GrpcTrafficQueryContainer extends Message<GrpcTrafficQueryContainer> {
  /**
   * The query operation.
   *
   * @generated from field: string query = 1;
   */
  query = "";

  /**
   * The total number of records calculated by the query.
   *
   * @generated from field: int32 totalRecordCount = 2;
   */
  totalRecordCount = 0;

  /**
   * The primary keys of the records returned by the query (in returned data chunk). I.e. number of records actually
   * returned by the pagination requirement of the query.
   *
   * @generated from field: repeated int32 primaryKeys = 3;
   */
  primaryKeys: number[] = [];

  /**
   * The client labels associated with the query.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcQueryLabel labels = 4;
   */
  labels: GrpcQueryLabel[] = [];

  constructor(data?: PartialMessage<GrpcTrafficQueryContainer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcTrafficQueryContainer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "totalRecordCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "primaryKeys", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
    { no: 4, name: "labels", kind: "message", T: GrpcQueryLabel, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcTrafficQueryContainer {
    return new GrpcTrafficQueryContainer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcTrafficQueryContainer {
    return new GrpcTrafficQueryContainer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcTrafficQueryContainer {
    return new GrpcTrafficQueryContainer().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcTrafficQueryContainer | PlainMessage<GrpcTrafficQueryContainer> | undefined, b: GrpcTrafficQueryContainer | PlainMessage<GrpcTrafficQueryContainer> | undefined): boolean {
    return proto3.util.equals(GrpcTrafficQueryContainer, a, b);
  }
}

/**
 * This container holds information about single entity enrichment.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcTrafficEntityEnrichmentContainer
 */
export class GrpcTrafficEntityEnrichmentContainer extends Message<GrpcTrafficEntityEnrichmentContainer> {
  /**
   * The query operation associated with enrichment.
   *
   * @generated from field: string query = 1;
   */
  query = "";

  /**
   * The primary key of the enriched record
   *
   * @generated from field: int32 primaryKey = 2;
   */
  primaryKey = 0;

  constructor(data?: PartialMessage<GrpcTrafficEntityEnrichmentContainer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcTrafficEntityEnrichmentContainer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "primaryKey", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcTrafficEntityEnrichmentContainer {
    return new GrpcTrafficEntityEnrichmentContainer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcTrafficEntityEnrichmentContainer {
    return new GrpcTrafficEntityEnrichmentContainer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcTrafficEntityEnrichmentContainer {
    return new GrpcTrafficEntityEnrichmentContainer().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcTrafficEntityEnrichmentContainer | PlainMessage<GrpcTrafficEntityEnrichmentContainer> | undefined, b: GrpcTrafficEntityEnrichmentContainer | PlainMessage<GrpcTrafficEntityEnrichmentContainer> | undefined): boolean {
    return proto3.util.equals(GrpcTrafficEntityEnrichmentContainer, a, b);
  }
}

/**
 * This container holds information about single entity fetch.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcTrafficEntityFetchContainer
 */
export class GrpcTrafficEntityFetchContainer extends Message<GrpcTrafficEntityFetchContainer> {
  /**
   * The query operation associated with entity fetch.
   *
   * @generated from field: string query = 1;
   */
  query = "";

  /**
   * The primary key of the fetched record
   *
   * @generated from field: int32 primaryKey = 2;
   */
  primaryKey = 0;

  constructor(data?: PartialMessage<GrpcTrafficEntityFetchContainer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcTrafficEntityFetchContainer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "primaryKey", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcTrafficEntityFetchContainer {
    return new GrpcTrafficEntityFetchContainer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcTrafficEntityFetchContainer {
    return new GrpcTrafficEntityFetchContainer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcTrafficEntityFetchContainer {
    return new GrpcTrafficEntityFetchContainer().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcTrafficEntityFetchContainer | PlainMessage<GrpcTrafficEntityFetchContainer> | undefined, b: GrpcTrafficEntityFetchContainer | PlainMessage<GrpcTrafficEntityFetchContainer> | undefined): boolean {
    return proto3.util.equals(GrpcTrafficEntityFetchContainer, a, b);
  }
}

/**
 * This container holds information about the session start.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcTrafficSessionStartContainer
 */
export class GrpcTrafficSessionStartContainer extends Message<GrpcTrafficSessionStartContainer> {
  /**
   * The version of the catalog that will be used for the entire session.
   *
   * @generated from field: int64 catalogVersion = 1;
   */
  catalogVersion = protoInt64.zero;

  constructor(data?: PartialMessage<GrpcTrafficSessionStartContainer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcTrafficSessionStartContainer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalogVersion", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcTrafficSessionStartContainer {
    return new GrpcTrafficSessionStartContainer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcTrafficSessionStartContainer {
    return new GrpcTrafficSessionStartContainer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcTrafficSessionStartContainer {
    return new GrpcTrafficSessionStartContainer().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcTrafficSessionStartContainer | PlainMessage<GrpcTrafficSessionStartContainer> | undefined, b: GrpcTrafficSessionStartContainer | PlainMessage<GrpcTrafficSessionStartContainer> | undefined): boolean {
    return proto3.util.equals(GrpcTrafficSessionStartContainer, a, b);
  }
}

/**
 * This container holds information about the session close.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcTrafficSessionCloseContainer
 */
export class GrpcTrafficSessionCloseContainer extends Message<GrpcTrafficSessionCloseContainer> {
  /**
   * The version of the catalog
   *
   * @generated from field: int64 catalogVersion = 1;
   */
  catalogVersion = protoInt64.zero;

  /**
   * The overall number of traffic records recorded for this session.
   *
   * @generated from field: int32 trafficRecordCount = 2;
   */
  trafficRecordCount = 0;

  /**
   * The number of records missed out in this session due to memory shortage (not sampling, sampling affects entire sessions).
   *
   * @generated from field: int32 trafficRecordsMissedOut = 3;
   */
  trafficRecordsMissedOut = 0;

  /**
   * The overall number of queries executed in this session.
   *
   * @generated from field: int32 queryCount = 4;
   */
  queryCount = 0;

  /**
   * The overall number of entities fetched in this session (excluding the entities fetched by queries).
   *
   * @generated from field: int32 entityFetchCount = 5;
   */
  entityFetchCount = 0;

  /**
   * The overall number of mutations executed in this session.
   *
   * @generated from field: int32 mutationCount = 6;
   */
  mutationCount = 0;

  constructor(data?: PartialMessage<GrpcTrafficSessionCloseContainer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcTrafficSessionCloseContainer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalogVersion", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "trafficRecordCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "trafficRecordsMissedOut", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "queryCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "entityFetchCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "mutationCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcTrafficSessionCloseContainer {
    return new GrpcTrafficSessionCloseContainer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcTrafficSessionCloseContainer {
    return new GrpcTrafficSessionCloseContainer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcTrafficSessionCloseContainer {
    return new GrpcTrafficSessionCloseContainer().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcTrafficSessionCloseContainer | PlainMessage<GrpcTrafficSessionCloseContainer> | undefined, b: GrpcTrafficSessionCloseContainer | PlainMessage<GrpcTrafficSessionCloseContainer> | undefined): boolean {
    return proto3.util.equals(GrpcTrafficSessionCloseContainer, a, b);
  }
}

/**
 * This container holds information about the source query.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcTrafficSourceQueryContainer
 */
export class GrpcTrafficSourceQueryContainer extends Message<GrpcTrafficSourceQueryContainer> {
  /**
   * The unique identifier of the source query
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcUuid sourceQueryId = 1;
   */
  sourceQueryId?: GrpcUuid;

  /**
   * unparsed, raw source query in particular format
   *
   * @generated from field: string sourceQuery = 2;
   */
  sourceQuery = "";

  /**
   * type of the query (e.g. GraphQL, REST, etc.)
   *
   * @generated from field: string queryType = 3;
   */
  queryType = "";

  constructor(data?: PartialMessage<GrpcTrafficSourceQueryContainer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcTrafficSourceQueryContainer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sourceQueryId", kind: "message", T: GrpcUuid },
    { no: 2, name: "sourceQuery", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "queryType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcTrafficSourceQueryContainer {
    return new GrpcTrafficSourceQueryContainer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcTrafficSourceQueryContainer {
    return new GrpcTrafficSourceQueryContainer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcTrafficSourceQueryContainer {
    return new GrpcTrafficSourceQueryContainer().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcTrafficSourceQueryContainer | PlainMessage<GrpcTrafficSourceQueryContainer> | undefined, b: GrpcTrafficSourceQueryContainer | PlainMessage<GrpcTrafficSourceQueryContainer> | undefined): boolean {
    return proto3.util.equals(GrpcTrafficSourceQueryContainer, a, b);
  }
}

/**
 * This container holds information about the source query statistics.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcTrafficSourceQueryStatisticsContainer
 */
export class GrpcTrafficSourceQueryStatisticsContainer extends Message<GrpcTrafficSourceQueryStatisticsContainer> {
  /**
   * The source query id
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcUuid sourceQueryId = 1;
   */
  sourceQueryId?: GrpcUuid;

  /**
   * The total number of records returned by the query ({@link EvitaResponse#getRecordData()} size)
   *
   * @generated from field: int32 returnedRecordCount = 2;
   */
  returnedRecordCount = 0;

  /**
   * The total number of records calculated by the query ({@link EvitaResponse#getTotalRecordCount()})
   *
   * @generated from field: int32 totalRecordCount = 3;
   */
  totalRecordCount = 0;

  constructor(data?: PartialMessage<GrpcTrafficSourceQueryStatisticsContainer>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcTrafficSourceQueryStatisticsContainer";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sourceQueryId", kind: "message", T: GrpcUuid },
    { no: 2, name: "returnedRecordCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "totalRecordCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcTrafficSourceQueryStatisticsContainer {
    return new GrpcTrafficSourceQueryStatisticsContainer().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcTrafficSourceQueryStatisticsContainer {
    return new GrpcTrafficSourceQueryStatisticsContainer().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcTrafficSourceQueryStatisticsContainer {
    return new GrpcTrafficSourceQueryStatisticsContainer().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcTrafficSourceQueryStatisticsContainer | PlainMessage<GrpcTrafficSourceQueryStatisticsContainer> | undefined, b: GrpcTrafficSourceQueryStatisticsContainer | PlainMessage<GrpcTrafficSourceQueryStatisticsContainer> | undefined): boolean {
    return proto3.util.equals(GrpcTrafficSourceQueryStatisticsContainer, a, b);
  }
}

/**
 * Client label attached to the query
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcQueryLabel
 */
export class GrpcQueryLabel extends Message<GrpcQueryLabel> {
  /**
   * The label name
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * The label value
   *
   * @generated from field: string value = 2;
   */
  value = "";

  constructor(data?: PartialMessage<GrpcQueryLabel>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcQueryLabel";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcQueryLabel {
    return new GrpcQueryLabel().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcQueryLabel {
    return new GrpcQueryLabel().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcQueryLabel {
    return new GrpcQueryLabel().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcQueryLabel | PlainMessage<GrpcQueryLabel> | undefined, b: GrpcQueryLabel | PlainMessage<GrpcQueryLabel> | undefined): boolean {
    return proto3.util.equals(GrpcQueryLabel, a, b);
  }
}

