// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file GrpcEvitaAPI.proto (package io.evitadb.externalApi.grpc.generated, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3 } from "@bufbuild/protobuf";
import { GrpcCatalogState, GrpcCommitBehavior, GrpcSessionType } from "./GrpcEnums_pb.js";
import { GrpcTopLevelCatalogSchemaMutation } from "./GrpcCatalogSchemaMutation_pb.js";

/**
 * Response to a server status request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcReadyResponse
 */
export class GrpcReadyResponse extends Message<GrpcReadyResponse> {
  /**
   * Always true when returned
   *
   * @generated from field: bool ready = 1;
   */
  ready = false;

  constructor(data?: PartialMessage<GrpcReadyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcReadyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "ready", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcReadyResponse {
    return new GrpcReadyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcReadyResponse {
    return new GrpcReadyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcReadyResponse {
    return new GrpcReadyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcReadyResponse | PlainMessage<GrpcReadyResponse> | undefined, b: GrpcReadyResponse | PlainMessage<GrpcReadyResponse> | undefined): boolean {
    return proto3.util.equals(GrpcReadyResponse, a, b);
  }
}

/**
 * Request to create a session inside of a catalog.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEvitaSessionRequest
 */
export class GrpcEvitaSessionRequest extends Message<GrpcEvitaSessionRequest> {
  /**
   * The name of the catalog for which the session is to be created.
   *
   * @generated from field: string catalogName = 1;
   */
  catalogName = "";

  /**
   * Commit behaviour
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcCommitBehavior commitBehavior = 2;
   */
  commitBehavior = GrpcCommitBehavior.WAIT_FOR_CONFLICT_RESOLUTION;

  /**
   * For testing purposes. Flag indicating that all changes by the session should be rollbacked after the session is closed.
   *
   * @generated from field: bool dryRun = 3;
   */
  dryRun = false;

  constructor(data?: PartialMessage<GrpcEvitaSessionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcEvitaSessionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalogName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "commitBehavior", kind: "enum", T: proto3.getEnumType(GrpcCommitBehavior) },
    { no: 3, name: "dryRun", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcEvitaSessionRequest {
    return new GrpcEvitaSessionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcEvitaSessionRequest {
    return new GrpcEvitaSessionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcEvitaSessionRequest {
    return new GrpcEvitaSessionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcEvitaSessionRequest | PlainMessage<GrpcEvitaSessionRequest> | undefined, b: GrpcEvitaSessionRequest | PlainMessage<GrpcEvitaSessionRequest> | undefined): boolean {
    return proto3.util.equals(GrpcEvitaSessionRequest, a, b);
  }
}

/**
 * Response to a session creation request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEvitaSessionResponse
 */
export class GrpcEvitaSessionResponse extends Message<GrpcEvitaSessionResponse> {
  /**
   * UUID of the created session.
   *
   * @generated from field: string sessionId = 1;
   */
  sessionId = "";

  /**
   * Type of the created session.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcSessionType sessionType = 2;
   */
  sessionType = GrpcSessionType.READ_ONLY;

  /**
   * Commit behaviour
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcCommitBehavior commitBehaviour = 3;
   */
  commitBehaviour = GrpcCommitBehavior.WAIT_FOR_CONFLICT_RESOLUTION;

  /**
   * State of the catalog after the session was created.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcCatalogState catalogState = 4;
   */
  catalogState = GrpcCatalogState.UNKNOWN_CATALOG_STATE;

  /**
   * UUID of the catalog the session is bound to.
   *
   * @generated from field: string catalogId = 5;
   */
  catalogId = "";

  constructor(data?: PartialMessage<GrpcEvitaSessionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcEvitaSessionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sessionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "sessionType", kind: "enum", T: proto3.getEnumType(GrpcSessionType) },
    { no: 3, name: "commitBehaviour", kind: "enum", T: proto3.getEnumType(GrpcCommitBehavior) },
    { no: 4, name: "catalogState", kind: "enum", T: proto3.getEnumType(GrpcCatalogState) },
    { no: 5, name: "catalogId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcEvitaSessionResponse {
    return new GrpcEvitaSessionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcEvitaSessionResponse {
    return new GrpcEvitaSessionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcEvitaSessionResponse {
    return new GrpcEvitaSessionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcEvitaSessionResponse | PlainMessage<GrpcEvitaSessionResponse> | undefined, b: GrpcEvitaSessionResponse | PlainMessage<GrpcEvitaSessionResponse> | undefined): boolean {
    return proto3.util.equals(GrpcEvitaSessionResponse, a, b);
  }
}

/**
 * Request to terminate a session.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEvitaSessionTerminationRequest
 */
export class GrpcEvitaSessionTerminationRequest extends Message<GrpcEvitaSessionTerminationRequest> {
  /**
   * UUID of the session to be terminated.
   *
   * @generated from field: string sessionId = 2;
   */
  sessionId = "";

  constructor(data?: PartialMessage<GrpcEvitaSessionTerminationRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcEvitaSessionTerminationRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "sessionId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcEvitaSessionTerminationRequest {
    return new GrpcEvitaSessionTerminationRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcEvitaSessionTerminationRequest {
    return new GrpcEvitaSessionTerminationRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcEvitaSessionTerminationRequest {
    return new GrpcEvitaSessionTerminationRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcEvitaSessionTerminationRequest | PlainMessage<GrpcEvitaSessionTerminationRequest> | undefined, b: GrpcEvitaSessionTerminationRequest | PlainMessage<GrpcEvitaSessionTerminationRequest> | undefined): boolean {
    return proto3.util.equals(GrpcEvitaSessionTerminationRequest, a, b);
  }
}

/**
 * Response to a session termination request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEvitaSessionTerminationResponse
 */
export class GrpcEvitaSessionTerminationResponse extends Message<GrpcEvitaSessionTerminationResponse> {
  /**
   * Indicator whether the session was terminated successfully.
   *
   * @generated from field: bool terminated = 1;
   */
  terminated = false;

  constructor(data?: PartialMessage<GrpcEvitaSessionTerminationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcEvitaSessionTerminationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "terminated", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcEvitaSessionTerminationResponse {
    return new GrpcEvitaSessionTerminationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcEvitaSessionTerminationResponse {
    return new GrpcEvitaSessionTerminationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcEvitaSessionTerminationResponse {
    return new GrpcEvitaSessionTerminationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcEvitaSessionTerminationResponse | PlainMessage<GrpcEvitaSessionTerminationResponse> | undefined, b: GrpcEvitaSessionTerminationResponse | PlainMessage<GrpcEvitaSessionTerminationResponse> | undefined): boolean {
    return proto3.util.equals(GrpcEvitaSessionTerminationResponse, a, b);
  }
}

/**
 * Response to a catalog names request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcCatalogNamesResponse
 */
export class GrpcCatalogNamesResponse extends Message<GrpcCatalogNamesResponse> {
  /**
   * Names of all existing catalogs.
   *
   * @generated from field: repeated string catalogNames = 1;
   */
  catalogNames: string[] = [];

  constructor(data?: PartialMessage<GrpcCatalogNamesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcCatalogNamesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalogNames", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcCatalogNamesResponse {
    return new GrpcCatalogNamesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcCatalogNamesResponse {
    return new GrpcCatalogNamesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcCatalogNamesResponse {
    return new GrpcCatalogNamesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcCatalogNamesResponse | PlainMessage<GrpcCatalogNamesResponse> | undefined, b: GrpcCatalogNamesResponse | PlainMessage<GrpcCatalogNamesResponse> | undefined): boolean {
    return proto3.util.equals(GrpcCatalogNamesResponse, a, b);
  }
}

/**
 * Request to define a new catalog.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDefineCatalogRequest
 */
export class GrpcDefineCatalogRequest extends Message<GrpcDefineCatalogRequest> {
  /**
   * Name of the catalog to be defined.
   *
   * @generated from field: string catalogName = 1;
   */
  catalogName = "";

  constructor(data?: PartialMessage<GrpcDefineCatalogRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcDefineCatalogRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalogName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcDefineCatalogRequest {
    return new GrpcDefineCatalogRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcDefineCatalogRequest {
    return new GrpcDefineCatalogRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcDefineCatalogRequest {
    return new GrpcDefineCatalogRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcDefineCatalogRequest | PlainMessage<GrpcDefineCatalogRequest> | undefined, b: GrpcDefineCatalogRequest | PlainMessage<GrpcDefineCatalogRequest> | undefined): boolean {
    return proto3.util.equals(GrpcDefineCatalogRequest, a, b);
  }
}

/**
 * Response to a catalog definition request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDefineCatalogResponse
 */
export class GrpcDefineCatalogResponse extends Message<GrpcDefineCatalogResponse> {
  /**
   * Indicator whether the catalog was defined successfully.
   *
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<GrpcDefineCatalogResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcDefineCatalogResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcDefineCatalogResponse {
    return new GrpcDefineCatalogResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcDefineCatalogResponse {
    return new GrpcDefineCatalogResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcDefineCatalogResponse {
    return new GrpcDefineCatalogResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcDefineCatalogResponse | PlainMessage<GrpcDefineCatalogResponse> | undefined, b: GrpcDefineCatalogResponse | PlainMessage<GrpcDefineCatalogResponse> | undefined): boolean {
    return proto3.util.equals(GrpcDefineCatalogResponse, a, b);
  }
}

/**
 * Request to rename a catalog.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcRenameCatalogRequest
 */
export class GrpcRenameCatalogRequest extends Message<GrpcRenameCatalogRequest> {
  /**
   * Name of the catalog to be renamed.
   *
   * @generated from field: string catalogName = 1;
   */
  catalogName = "";

  /**
   * New name of the catalog.
   *
   * @generated from field: string newCatalogName = 2;
   */
  newCatalogName = "";

  constructor(data?: PartialMessage<GrpcRenameCatalogRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcRenameCatalogRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalogName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "newCatalogName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcRenameCatalogRequest {
    return new GrpcRenameCatalogRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcRenameCatalogRequest {
    return new GrpcRenameCatalogRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcRenameCatalogRequest {
    return new GrpcRenameCatalogRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcRenameCatalogRequest | PlainMessage<GrpcRenameCatalogRequest> | undefined, b: GrpcRenameCatalogRequest | PlainMessage<GrpcRenameCatalogRequest> | undefined): boolean {
    return proto3.util.equals(GrpcRenameCatalogRequest, a, b);
  }
}

/**
 * Response to a catalog rename request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcRenameCatalogResponse
 */
export class GrpcRenameCatalogResponse extends Message<GrpcRenameCatalogResponse> {
  /**
   * Indicator whether the catalog was renamed successfully.
   *
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<GrpcRenameCatalogResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcRenameCatalogResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcRenameCatalogResponse {
    return new GrpcRenameCatalogResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcRenameCatalogResponse {
    return new GrpcRenameCatalogResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcRenameCatalogResponse {
    return new GrpcRenameCatalogResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcRenameCatalogResponse | PlainMessage<GrpcRenameCatalogResponse> | undefined, b: GrpcRenameCatalogResponse | PlainMessage<GrpcRenameCatalogResponse> | undefined): boolean {
    return proto3.util.equals(GrpcRenameCatalogResponse, a, b);
  }
}

/**
 * Request to replace a catalog.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcReplaceCatalogRequest
 */
export class GrpcReplaceCatalogRequest extends Message<GrpcReplaceCatalogRequest> {
  /**
   * Name of the catalog that will become the successor of the original catalog (old name)
   *
   * @generated from field: string catalogNameToBeReplacedWith = 1;
   */
  catalogNameToBeReplacedWith = "";

  /**
   * Name of the catalog that will be replaced and dropped (new name)
   *
   * @generated from field: string catalogNameToBeReplaced = 2;
   */
  catalogNameToBeReplaced = "";

  constructor(data?: PartialMessage<GrpcReplaceCatalogRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcReplaceCatalogRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalogNameToBeReplacedWith", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "catalogNameToBeReplaced", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcReplaceCatalogRequest {
    return new GrpcReplaceCatalogRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcReplaceCatalogRequest {
    return new GrpcReplaceCatalogRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcReplaceCatalogRequest {
    return new GrpcReplaceCatalogRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcReplaceCatalogRequest | PlainMessage<GrpcReplaceCatalogRequest> | undefined, b: GrpcReplaceCatalogRequest | PlainMessage<GrpcReplaceCatalogRequest> | undefined): boolean {
    return proto3.util.equals(GrpcReplaceCatalogRequest, a, b);
  }
}

/**
 * Response to a catalog replace request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcReplaceCatalogResponse
 */
export class GrpcReplaceCatalogResponse extends Message<GrpcReplaceCatalogResponse> {
  /**
   * Indicator whether the catalog was replaced successfully.
   *
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<GrpcReplaceCatalogResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcReplaceCatalogResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcReplaceCatalogResponse {
    return new GrpcReplaceCatalogResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcReplaceCatalogResponse {
    return new GrpcReplaceCatalogResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcReplaceCatalogResponse {
    return new GrpcReplaceCatalogResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcReplaceCatalogResponse | PlainMessage<GrpcReplaceCatalogResponse> | undefined, b: GrpcReplaceCatalogResponse | PlainMessage<GrpcReplaceCatalogResponse> | undefined): boolean {
    return proto3.util.equals(GrpcReplaceCatalogResponse, a, b);
  }
}

/**
 * Request to delete a catalog.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDeleteCatalogIfExistsRequest
 */
export class GrpcDeleteCatalogIfExistsRequest extends Message<GrpcDeleteCatalogIfExistsRequest> {
  /**
   * Name of the catalog to be deleted.
   *
   * @generated from field: string catalogName = 1;
   */
  catalogName = "";

  constructor(data?: PartialMessage<GrpcDeleteCatalogIfExistsRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcDeleteCatalogIfExistsRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalogName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcDeleteCatalogIfExistsRequest {
    return new GrpcDeleteCatalogIfExistsRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcDeleteCatalogIfExistsRequest {
    return new GrpcDeleteCatalogIfExistsRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcDeleteCatalogIfExistsRequest {
    return new GrpcDeleteCatalogIfExistsRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcDeleteCatalogIfExistsRequest | PlainMessage<GrpcDeleteCatalogIfExistsRequest> | undefined, b: GrpcDeleteCatalogIfExistsRequest | PlainMessage<GrpcDeleteCatalogIfExistsRequest> | undefined): boolean {
    return proto3.util.equals(GrpcDeleteCatalogIfExistsRequest, a, b);
  }
}

/**
 * Response to a catalog deletion request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDeleteCatalogIfExistsResponse
 */
export class GrpcDeleteCatalogIfExistsResponse extends Message<GrpcDeleteCatalogIfExistsResponse> {
  /**
   * Indicator whether the catalog was deleted successfully.
   *
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<GrpcDeleteCatalogIfExistsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcDeleteCatalogIfExistsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcDeleteCatalogIfExistsResponse {
    return new GrpcDeleteCatalogIfExistsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcDeleteCatalogIfExistsResponse {
    return new GrpcDeleteCatalogIfExistsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcDeleteCatalogIfExistsResponse {
    return new GrpcDeleteCatalogIfExistsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcDeleteCatalogIfExistsResponse | PlainMessage<GrpcDeleteCatalogIfExistsResponse> | undefined, b: GrpcDeleteCatalogIfExistsResponse | PlainMessage<GrpcDeleteCatalogIfExistsResponse> | undefined): boolean {
    return proto3.util.equals(GrpcDeleteCatalogIfExistsResponse, a, b);
  }
}

/**
 * Request to update the catalog.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcUpdateEvitaRequest
 */
export class GrpcUpdateEvitaRequest extends Message<GrpcUpdateEvitaRequest> {
  /**
   * Collection of top level catalog schema mutations to be applied.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcTopLevelCatalogSchemaMutation schemaMutations = 1;
   */
  schemaMutations: GrpcTopLevelCatalogSchemaMutation[] = [];

  constructor(data?: PartialMessage<GrpcUpdateEvitaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcUpdateEvitaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schemaMutations", kind: "message", T: GrpcTopLevelCatalogSchemaMutation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcUpdateEvitaRequest {
    return new GrpcUpdateEvitaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcUpdateEvitaRequest {
    return new GrpcUpdateEvitaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcUpdateEvitaRequest {
    return new GrpcUpdateEvitaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcUpdateEvitaRequest | PlainMessage<GrpcUpdateEvitaRequest> | undefined, b: GrpcUpdateEvitaRequest | PlainMessage<GrpcUpdateEvitaRequest> | undefined): boolean {
    return proto3.util.equals(GrpcUpdateEvitaRequest, a, b);
  }
}

