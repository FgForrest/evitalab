// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file GrpcEvitaManagementAPI.proto (package io.evitadb.externalApi.grpc.generated, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, protoInt64, StringValue } from "@bufbuild/protobuf";
import { GrpcCatalogStatistics, GrpcFile, GrpcOffsetDateTime, GrpcTaskStatus, GrpcUuid } from "./GrpcEvitaDataTypes_pb.js";
import { GrpcReadiness, GrpcHealthProblem } from "./GrpcEnums_pb.js";

/**
 * Response to a server status request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEvitaServerStatusResponse
 */
export class GrpcEvitaServerStatusResponse extends Message<GrpcEvitaServerStatusResponse> {
  /**
   * Version of evitaDB server taken from the MANIFEST.MF file
   *
   * @generated from field: string version = 1;
   */
  version = "";

  /**
   * Date and time when the server was started
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcOffsetDateTime startedAt = 2;
   */
  startedAt?: GrpcOffsetDateTime;

  /**
   * Duration of time since the server was started (seconds)
   *
   * @generated from field: int64 uptime = 3;
   */
  uptime = protoInt64.zero;

  /**
   * Unique identifier of the server instance
   *
   * @generated from field: string instanceId = 4;
   */
  instanceId = "";

  /**
   * Number of corrupted catalogs
   *
   * @generated from field: int32 catalogsCorrupted = 5;
   */
  catalogsCorrupted = 0;

  /**
   * Number of catalogs that are ok
   *
   * @generated from field: int32 catalogsOk = 6;
   */
  catalogsOk = 0;

  /**
   * Health problems
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcHealthProblem healthProblems = 7;
   */
  healthProblems: GrpcHealthProblem[] = [];

  /**
   * Overall readiness of the evitaDB server
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcReadiness readiness = 8;
   */
  readiness = GrpcReadiness.API_STARTING;

  /**
   * Information about all available APIs
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcApiStatus> api = 9;
   */
  api: { [key: string]: GrpcApiStatus } = {};

  constructor(data?: PartialMessage<GrpcEvitaServerStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcEvitaServerStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "startedAt", kind: "message", T: GrpcOffsetDateTime },
    { no: 3, name: "uptime", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "instanceId", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "catalogsCorrupted", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 6, name: "catalogsOk", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "healthProblems", kind: "enum", T: proto3.getEnumType(GrpcHealthProblem), repeated: true },
    { no: 8, name: "readiness", kind: "enum", T: proto3.getEnumType(GrpcReadiness) },
    { no: 9, name: "api", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: GrpcApiStatus} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcEvitaServerStatusResponse {
    return new GrpcEvitaServerStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcEvitaServerStatusResponse {
    return new GrpcEvitaServerStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcEvitaServerStatusResponse {
    return new GrpcEvitaServerStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcEvitaServerStatusResponse | PlainMessage<GrpcEvitaServerStatusResponse> | undefined, b: GrpcEvitaServerStatusResponse | PlainMessage<GrpcEvitaServerStatusResponse> | undefined): boolean {
    return proto3.util.equals(GrpcEvitaServerStatusResponse, a, b);
  }
}

/**
 * Status of the external API
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcApiStatus
 */
export class GrpcApiStatus extends Message<GrpcApiStatus> {
  /**
   * True if the API is enabled
   *
   * @generated from field: bool enabled = 1;
   */
  enabled = false;

  /**
   * API readiness status
   *
   * @generated from field: bool ready = 2;
   */
  ready = false;

  /**
   * list of base url of the web API
   *
   * @generated from field: repeated string baseUrl = 3;
   */
  baseUrl: string[] = [];

  /**
   * list of specific endpoints of particular API
   * currently only system API provides list of endpoints
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcEndpoint endpoints = 4;
   */
  endpoints: GrpcEndpoint[] = [];

  constructor(data?: PartialMessage<GrpcApiStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcApiStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "ready", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "baseUrl", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 4, name: "endpoints", kind: "message", T: GrpcEndpoint, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcApiStatus {
    return new GrpcApiStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcApiStatus {
    return new GrpcApiStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcApiStatus {
    return new GrpcApiStatus().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcApiStatus | PlainMessage<GrpcApiStatus> | undefined, b: GrpcApiStatus | PlainMessage<GrpcApiStatus> | undefined): boolean {
    return proto3.util.equals(GrpcApiStatus, a, b);
  }
}

/**
 * Information about a system endpoint of particular purpose derived from name
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEndpoint
 */
export class GrpcEndpoint extends Message<GrpcEndpoint> {
  /**
   * logical name of the endpoint
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * absolute URL of the endpoint
   *
   * @generated from field: repeated string url = 2;
   */
  url: string[] = [];

  constructor(data?: PartialMessage<GrpcEndpoint>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcEndpoint";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "url", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcEndpoint {
    return new GrpcEndpoint().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcEndpoint {
    return new GrpcEndpoint().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcEndpoint {
    return new GrpcEndpoint().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcEndpoint | PlainMessage<GrpcEndpoint> | undefined, b: GrpcEndpoint | PlainMessage<GrpcEndpoint> | undefined): boolean {
    return proto3.util.equals(GrpcEndpoint, a, b);
  }
}

/**
 * Response to an evitaDB configuration request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEvitaConfigurationResponse
 */
export class GrpcEvitaConfigurationResponse extends Message<GrpcEvitaConfigurationResponse> {
  /**
   * Current configuration of the server in YAML format with evaluated values.
   *
   * @generated from field: string configuration = 1;
   */
  configuration = "";

  constructor(data?: PartialMessage<GrpcEvitaConfigurationResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcEvitaConfigurationResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "configuration", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcEvitaConfigurationResponse {
    return new GrpcEvitaConfigurationResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcEvitaConfigurationResponse {
    return new GrpcEvitaConfigurationResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcEvitaConfigurationResponse {
    return new GrpcEvitaConfigurationResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcEvitaConfigurationResponse | PlainMessage<GrpcEvitaConfigurationResponse> | undefined, b: GrpcEvitaConfigurationResponse | PlainMessage<GrpcEvitaConfigurationResponse> | undefined): boolean {
    return proto3.util.equals(GrpcEvitaConfigurationResponse, a, b);
  }
}

/**
 * Response to a server catalog statistics request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEvitaCatalogStatisticsResponse
 */
export class GrpcEvitaCatalogStatisticsResponse extends Message<GrpcEvitaCatalogStatisticsResponse> {
  /**
   * Collection of catalog statistics for all catalogs
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcCatalogStatistics catalogStatistics = 1;
   */
  catalogStatistics: GrpcCatalogStatistics[] = [];

  constructor(data?: PartialMessage<GrpcEvitaCatalogStatisticsResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcEvitaCatalogStatisticsResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalogStatistics", kind: "message", T: GrpcCatalogStatistics, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcEvitaCatalogStatisticsResponse {
    return new GrpcEvitaCatalogStatisticsResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcEvitaCatalogStatisticsResponse {
    return new GrpcEvitaCatalogStatisticsResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcEvitaCatalogStatisticsResponse {
    return new GrpcEvitaCatalogStatisticsResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcEvitaCatalogStatisticsResponse | PlainMessage<GrpcEvitaCatalogStatisticsResponse> | undefined, b: GrpcEvitaCatalogStatisticsResponse | PlainMessage<GrpcEvitaCatalogStatisticsResponse> | undefined): boolean {
    return proto3.util.equals(GrpcEvitaCatalogStatisticsResponse, a, b);
  }
}

/**
 * Request to restore a catalog.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcRestoreCatalogRequest
 */
export class GrpcRestoreCatalogRequest extends Message<GrpcRestoreCatalogRequest> {
  /**
   * Name of the catalog where the backup will be restored
   * The name must not clash with any of existing catalogs
   *
   * @generated from field: string catalogName = 1;
   */
  catalogName = "";

  /**
   * Binary contents of the backup file.
   *
   * @generated from field: bytes backupFile = 2;
   */
  backupFile = new Uint8Array(0);

  constructor(data?: PartialMessage<GrpcRestoreCatalogRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcRestoreCatalogRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalogName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "backupFile", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcRestoreCatalogRequest {
    return new GrpcRestoreCatalogRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcRestoreCatalogRequest {
    return new GrpcRestoreCatalogRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcRestoreCatalogRequest {
    return new GrpcRestoreCatalogRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcRestoreCatalogRequest | PlainMessage<GrpcRestoreCatalogRequest> | undefined, b: GrpcRestoreCatalogRequest | PlainMessage<GrpcRestoreCatalogRequest> | undefined): boolean {
    return proto3.util.equals(GrpcRestoreCatalogRequest, a, b);
  }
}

/**
 * Request to restore a catalog.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcRestoreCatalogFromServerFileRequest
 */
export class GrpcRestoreCatalogFromServerFileRequest extends Message<GrpcRestoreCatalogFromServerFileRequest> {
  /**
   * Name of the catalog where the backup will be restored
   * The name must not clash with any of existing catalogs
   *
   * @generated from field: string catalogName = 1;
   */
  catalogName = "";

  /**
   * The identification of the file on the server that should be restored
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcUuid fileId = 2;
   */
  fileId?: GrpcUuid;

  constructor(data?: PartialMessage<GrpcRestoreCatalogFromServerFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcRestoreCatalogFromServerFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalogName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fileId", kind: "message", T: GrpcUuid },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcRestoreCatalogFromServerFileRequest {
    return new GrpcRestoreCatalogFromServerFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcRestoreCatalogFromServerFileRequest {
    return new GrpcRestoreCatalogFromServerFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcRestoreCatalogFromServerFileRequest {
    return new GrpcRestoreCatalogFromServerFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcRestoreCatalogFromServerFileRequest | PlainMessage<GrpcRestoreCatalogFromServerFileRequest> | undefined, b: GrpcRestoreCatalogFromServerFileRequest | PlainMessage<GrpcRestoreCatalogFromServerFileRequest> | undefined): boolean {
    return proto3.util.equals(GrpcRestoreCatalogFromServerFileRequest, a, b);
  }
}

/**
 * Response to a catalog restore request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcRestoreCatalogResponse
 */
export class GrpcRestoreCatalogResponse extends Message<GrpcRestoreCatalogResponse> {
  /**
   * returns the number of bytes read from the backup file
   *
   * @generated from field: int64 read = 1;
   */
  read = protoInt64.zero;

  /**
   * the task that is used to restore the catalog and getting its progress
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcTaskStatus task = 2;
   */
  task?: GrpcTaskStatus;

  constructor(data?: PartialMessage<GrpcRestoreCatalogResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcRestoreCatalogResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "read", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "task", kind: "message", T: GrpcTaskStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcRestoreCatalogResponse {
    return new GrpcRestoreCatalogResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcRestoreCatalogResponse {
    return new GrpcRestoreCatalogResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcRestoreCatalogResponse {
    return new GrpcRestoreCatalogResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcRestoreCatalogResponse | PlainMessage<GrpcRestoreCatalogResponse> | undefined, b: GrpcRestoreCatalogResponse | PlainMessage<GrpcRestoreCatalogResponse> | undefined): boolean {
    return proto3.util.equals(GrpcRestoreCatalogResponse, a, b);
  }
}

/**
 * Request to list task statuses in paginated form.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcTaskStatusesRequest
 */
export class GrpcTaskStatusesRequest extends Message<GrpcTaskStatusesRequest> {
  /**
   * Page number of the task statuses to be listed.
   *
   * @generated from field: int32 pageNumber = 1;
   */
  pageNumber = 0;

  /**
   * Number of task statuses per page.
   *
   * @generated from field: int32 pageSize = 2;
   */
  pageSize = 0;

  constructor(data?: PartialMessage<GrpcTaskStatusesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcTaskStatusesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pageNumber", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "pageSize", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcTaskStatusesRequest {
    return new GrpcTaskStatusesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcTaskStatusesRequest {
    return new GrpcTaskStatusesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcTaskStatusesRequest {
    return new GrpcTaskStatusesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcTaskStatusesRequest | PlainMessage<GrpcTaskStatusesRequest> | undefined, b: GrpcTaskStatusesRequest | PlainMessage<GrpcTaskStatusesRequest> | undefined): boolean {
    return proto3.util.equals(GrpcTaskStatusesRequest, a, b);
  }
}

/**
 * Response to a task statuses request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcTaskStatusesResponse
 */
export class GrpcTaskStatusesResponse extends Message<GrpcTaskStatusesResponse> {
  /**
   * The size of the page.
   *
   * @generated from field: int32 pageSize = 1;
   */
  pageSize = 0;

  /**
   * The number of the page.
   *
   * @generated from field: int32 pageNumber = 2;
   */
  pageNumber = 0;

  /**
   * Collection of task statuses.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcTaskStatus taskStatus = 3;
   */
  taskStatus: GrpcTaskStatus[] = [];

  /**
   * Total number of task statuses.
   *
   * @generated from field: int32 totalNumberOfRecords = 4;
   */
  totalNumberOfRecords = 0;

  constructor(data?: PartialMessage<GrpcTaskStatusesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcTaskStatusesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pageSize", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "pageNumber", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "taskStatus", kind: "message", T: GrpcTaskStatus, repeated: true },
    { no: 4, name: "totalNumberOfRecords", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcTaskStatusesResponse {
    return new GrpcTaskStatusesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcTaskStatusesResponse {
    return new GrpcTaskStatusesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcTaskStatusesResponse {
    return new GrpcTaskStatusesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcTaskStatusesResponse | PlainMessage<GrpcTaskStatusesResponse> | undefined, b: GrpcTaskStatusesResponse | PlainMessage<GrpcTaskStatusesResponse> | undefined): boolean {
    return proto3.util.equals(GrpcTaskStatusesResponse, a, b);
  }
}

/**
 * Request to get multiple task statuses.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcSpecifiedTaskStatusesRequest
 */
export class GrpcSpecifiedTaskStatusesRequest extends Message<GrpcSpecifiedTaskStatusesRequest> {
  /**
   * set of task ids to be listed
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcUuid taskIds = 1;
   */
  taskIds: GrpcUuid[] = [];

  constructor(data?: PartialMessage<GrpcSpecifiedTaskStatusesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcSpecifiedTaskStatusesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "taskIds", kind: "message", T: GrpcUuid, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcSpecifiedTaskStatusesRequest {
    return new GrpcSpecifiedTaskStatusesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcSpecifiedTaskStatusesRequest {
    return new GrpcSpecifiedTaskStatusesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcSpecifiedTaskStatusesRequest {
    return new GrpcSpecifiedTaskStatusesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcSpecifiedTaskStatusesRequest | PlainMessage<GrpcSpecifiedTaskStatusesRequest> | undefined, b: GrpcSpecifiedTaskStatusesRequest | PlainMessage<GrpcSpecifiedTaskStatusesRequest> | undefined): boolean {
    return proto3.util.equals(GrpcSpecifiedTaskStatusesRequest, a, b);
  }
}

/**
 * Response to a multiple task statuses request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcSpecifiedTaskStatusesResponse
 */
export class GrpcSpecifiedTaskStatusesResponse extends Message<GrpcSpecifiedTaskStatusesResponse> {
  /**
   * Collection of task statuses.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcTaskStatus taskStatus = 1;
   */
  taskStatus: GrpcTaskStatus[] = [];

  constructor(data?: PartialMessage<GrpcSpecifiedTaskStatusesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcSpecifiedTaskStatusesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "taskStatus", kind: "message", T: GrpcTaskStatus, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcSpecifiedTaskStatusesResponse {
    return new GrpcSpecifiedTaskStatusesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcSpecifiedTaskStatusesResponse {
    return new GrpcSpecifiedTaskStatusesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcSpecifiedTaskStatusesResponse {
    return new GrpcSpecifiedTaskStatusesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcSpecifiedTaskStatusesResponse | PlainMessage<GrpcSpecifiedTaskStatusesResponse> | undefined, b: GrpcSpecifiedTaskStatusesResponse | PlainMessage<GrpcSpecifiedTaskStatusesResponse> | undefined): boolean {
    return proto3.util.equals(GrpcSpecifiedTaskStatusesResponse, a, b);
  }
}

/**
 * Request to get single task status by id
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcTaskStatusRequest
 */
export class GrpcTaskStatusRequest extends Message<GrpcTaskStatusRequest> {
  /**
   * Identification of the task
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcUuid taskId = 1;
   */
  taskId?: GrpcUuid;

  constructor(data?: PartialMessage<GrpcTaskStatusRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcTaskStatusRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "taskId", kind: "message", T: GrpcUuid },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcTaskStatusRequest {
    return new GrpcTaskStatusRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcTaskStatusRequest {
    return new GrpcTaskStatusRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcTaskStatusRequest {
    return new GrpcTaskStatusRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcTaskStatusRequest | PlainMessage<GrpcTaskStatusRequest> | undefined, b: GrpcTaskStatusRequest | PlainMessage<GrpcTaskStatusRequest> | undefined): boolean {
    return proto3.util.equals(GrpcTaskStatusRequest, a, b);
  }
}

/**
 * Response to a task status request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcTaskStatusResponse
 */
export class GrpcTaskStatusResponse extends Message<GrpcTaskStatusResponse> {
  /**
   * Task status if found
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcTaskStatus taskStatus = 1;
   */
  taskStatus?: GrpcTaskStatus;

  constructor(data?: PartialMessage<GrpcTaskStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcTaskStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "taskStatus", kind: "message", T: GrpcTaskStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcTaskStatusResponse {
    return new GrpcTaskStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcTaskStatusResponse {
    return new GrpcTaskStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcTaskStatusResponse {
    return new GrpcTaskStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcTaskStatusResponse | PlainMessage<GrpcTaskStatusResponse> | undefined, b: GrpcTaskStatusResponse | PlainMessage<GrpcTaskStatusResponse> | undefined): boolean {
    return proto3.util.equals(GrpcTaskStatusResponse, a, b);
  }
}

/**
 * Request to get cancel task status by id
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcCancelTaskRequest
 */
export class GrpcCancelTaskRequest extends Message<GrpcCancelTaskRequest> {
  /**
   * Identification of the task
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcUuid taskId = 1;
   */
  taskId?: GrpcUuid;

  constructor(data?: PartialMessage<GrpcCancelTaskRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcCancelTaskRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "taskId", kind: "message", T: GrpcUuid },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcCancelTaskRequest {
    return new GrpcCancelTaskRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcCancelTaskRequest {
    return new GrpcCancelTaskRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcCancelTaskRequest {
    return new GrpcCancelTaskRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcCancelTaskRequest | PlainMessage<GrpcCancelTaskRequest> | undefined, b: GrpcCancelTaskRequest | PlainMessage<GrpcCancelTaskRequest> | undefined): boolean {
    return proto3.util.equals(GrpcCancelTaskRequest, a, b);
  }
}

/**
 * Request to get cancel task status by id
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcCancelTaskResponse
 */
export class GrpcCancelTaskResponse extends Message<GrpcCancelTaskResponse> {
  /**
   * true if the task was found and canceled
   *
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<GrpcCancelTaskResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcCancelTaskResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcCancelTaskResponse {
    return new GrpcCancelTaskResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcCancelTaskResponse {
    return new GrpcCancelTaskResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcCancelTaskResponse {
    return new GrpcCancelTaskResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcCancelTaskResponse | PlainMessage<GrpcCancelTaskResponse> | undefined, b: GrpcCancelTaskResponse | PlainMessage<GrpcCancelTaskResponse> | undefined): boolean {
    return proto3.util.equals(GrpcCancelTaskResponse, a, b);
  }
}

/**
 * Request to list files to fetch in paginated form.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcFilesToFetchRequest
 */
export class GrpcFilesToFetchRequest extends Message<GrpcFilesToFetchRequest> {
  /**
   * Page number of the task statuses to be listed.
   *
   * @generated from field: int32 pageNumber = 1;
   */
  pageNumber = 0;

  /**
   * Number of task statuses per page.
   *
   * @generated from field: int32 pageSize = 2;
   */
  pageSize = 0;

  /**
   * Optional origin of the files (derived from taskType), passing non-null value
   * in this argument filters the returned files to only those that are related to the specified origin
   *
   * @generated from field: google.protobuf.StringValue origin = 3;
   */
  origin?: string;

  constructor(data?: PartialMessage<GrpcFilesToFetchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcFilesToFetchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pageNumber", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "pageSize", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "origin", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcFilesToFetchRequest {
    return new GrpcFilesToFetchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcFilesToFetchRequest {
    return new GrpcFilesToFetchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcFilesToFetchRequest {
    return new GrpcFilesToFetchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcFilesToFetchRequest | PlainMessage<GrpcFilesToFetchRequest> | undefined, b: GrpcFilesToFetchRequest | PlainMessage<GrpcFilesToFetchRequest> | undefined): boolean {
    return proto3.util.equals(GrpcFilesToFetchRequest, a, b);
  }
}

/**
 * Response to a get files to fetch request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcFilesToFetchResponse
 */
export class GrpcFilesToFetchResponse extends Message<GrpcFilesToFetchResponse> {
  /**
   * The size of the page.
   *
   * @generated from field: int32 pageSize = 1;
   */
  pageSize = 0;

  /**
   * The number of the page.
   *
   * @generated from field: int32 pageNumber = 2;
   */
  pageNumber = 0;

  /**
   * Collection of files to fetch.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcFile filesToFetch = 3;
   */
  filesToFetch: GrpcFile[] = [];

  /**
   * Total number of files to fetch.
   *
   * @generated from field: int32 totalNumberOfRecords = 4;
   */
  totalNumberOfRecords = 0;

  constructor(data?: PartialMessage<GrpcFilesToFetchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcFilesToFetchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pageSize", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "pageNumber", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "filesToFetch", kind: "message", T: GrpcFile, repeated: true },
    { no: 4, name: "totalNumberOfRecords", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcFilesToFetchResponse {
    return new GrpcFilesToFetchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcFilesToFetchResponse {
    return new GrpcFilesToFetchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcFilesToFetchResponse {
    return new GrpcFilesToFetchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcFilesToFetchResponse | PlainMessage<GrpcFilesToFetchResponse> | undefined, b: GrpcFilesToFetchResponse | PlainMessage<GrpcFilesToFetchResponse> | undefined): boolean {
    return proto3.util.equals(GrpcFilesToFetchResponse, a, b);
  }
}

/**
 * Request to list task statuses in paginated form.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcFileToFetchRequest
 */
export class GrpcFileToFetchRequest extends Message<GrpcFileToFetchRequest> {
  /**
   * Identification of the file
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcUuid fileId = 1;
   */
  fileId?: GrpcUuid;

  constructor(data?: PartialMessage<GrpcFileToFetchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcFileToFetchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fileId", kind: "message", T: GrpcUuid },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcFileToFetchRequest {
    return new GrpcFileToFetchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcFileToFetchRequest {
    return new GrpcFileToFetchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcFileToFetchRequest {
    return new GrpcFileToFetchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcFileToFetchRequest | PlainMessage<GrpcFileToFetchRequest> | undefined, b: GrpcFileToFetchRequest | PlainMessage<GrpcFileToFetchRequest> | undefined): boolean {
    return proto3.util.equals(GrpcFileToFetchRequest, a, b);
  }
}

/**
 * Response to a task statuses request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcFileToFetchResponse
 */
export class GrpcFileToFetchResponse extends Message<GrpcFileToFetchResponse> {
  /**
   * File to fetch.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcFile fileToFetch = 1;
   */
  fileToFetch?: GrpcFile;

  constructor(data?: PartialMessage<GrpcFileToFetchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcFileToFetchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fileToFetch", kind: "message", T: GrpcFile },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcFileToFetchResponse {
    return new GrpcFileToFetchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcFileToFetchResponse {
    return new GrpcFileToFetchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcFileToFetchResponse {
    return new GrpcFileToFetchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcFileToFetchResponse | PlainMessage<GrpcFileToFetchResponse> | undefined, b: GrpcFileToFetchResponse | PlainMessage<GrpcFileToFetchResponse> | undefined): boolean {
    return proto3.util.equals(GrpcFileToFetchResponse, a, b);
  }
}

/**
 * Request to get single file by id
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcFetchFileRequest
 */
export class GrpcFetchFileRequest extends Message<GrpcFetchFileRequest> {
  /**
   * Identification of the file
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcUuid fileId = 1;
   */
  fileId?: GrpcUuid;

  constructor(data?: PartialMessage<GrpcFetchFileRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcFetchFileRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fileId", kind: "message", T: GrpcUuid },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcFetchFileRequest {
    return new GrpcFetchFileRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcFetchFileRequest {
    return new GrpcFetchFileRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcFetchFileRequest {
    return new GrpcFetchFileRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcFetchFileRequest | PlainMessage<GrpcFetchFileRequest> | undefined, b: GrpcFetchFileRequest | PlainMessage<GrpcFetchFileRequest> | undefined): boolean {
    return proto3.util.equals(GrpcFetchFileRequest, a, b);
  }
}

/**
 * Response to a task status request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcFetchFileResponse
 */
export class GrpcFetchFileResponse extends Message<GrpcFetchFileResponse> {
  /**
   * chunk of the file content
   *
   * @generated from field: bytes fileContents = 1;
   */
  fileContents = new Uint8Array(0);

  /**
   * total size of the file
   *
   * @generated from field: int64 totalSizeInBytes = 2;
   */
  totalSizeInBytes = protoInt64.zero;

  constructor(data?: PartialMessage<GrpcFetchFileResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcFetchFileResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fileContents", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 2, name: "totalSizeInBytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcFetchFileResponse {
    return new GrpcFetchFileResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcFetchFileResponse {
    return new GrpcFetchFileResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcFetchFileResponse {
    return new GrpcFetchFileResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcFetchFileResponse | PlainMessage<GrpcFetchFileResponse> | undefined, b: GrpcFetchFileResponse | PlainMessage<GrpcFetchFileResponse> | undefined): boolean {
    return proto3.util.equals(GrpcFetchFileResponse, a, b);
  }
}

/**
 * Request to list task statuses in paginated form.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDeleteFileToFetchRequest
 */
export class GrpcDeleteFileToFetchRequest extends Message<GrpcDeleteFileToFetchRequest> {
  /**
   * Identification of the file
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcUuid fileId = 1;
   */
  fileId?: GrpcUuid;

  constructor(data?: PartialMessage<GrpcDeleteFileToFetchRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcDeleteFileToFetchRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fileId", kind: "message", T: GrpcUuid },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcDeleteFileToFetchRequest {
    return new GrpcDeleteFileToFetchRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcDeleteFileToFetchRequest {
    return new GrpcDeleteFileToFetchRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcDeleteFileToFetchRequest {
    return new GrpcDeleteFileToFetchRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcDeleteFileToFetchRequest | PlainMessage<GrpcDeleteFileToFetchRequest> | undefined, b: GrpcDeleteFileToFetchRequest | PlainMessage<GrpcDeleteFileToFetchRequest> | undefined): boolean {
    return proto3.util.equals(GrpcDeleteFileToFetchRequest, a, b);
  }
}

/**
 * Response to a task statuses request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDeleteFileToFetchResponse
 */
export class GrpcDeleteFileToFetchResponse extends Message<GrpcDeleteFileToFetchResponse> {
  /**
   * true if the file was found and deleted
   *
   * @generated from field: bool success = 1;
   */
  success = false;

  constructor(data?: PartialMessage<GrpcDeleteFileToFetchResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcDeleteFileToFetchResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcDeleteFileToFetchResponse {
    return new GrpcDeleteFileToFetchResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcDeleteFileToFetchResponse {
    return new GrpcDeleteFileToFetchResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcDeleteFileToFetchResponse {
    return new GrpcDeleteFileToFetchResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcDeleteFileToFetchResponse | PlainMessage<GrpcDeleteFileToFetchResponse> | undefined, b: GrpcDeleteFileToFetchResponse | PlainMessage<GrpcDeleteFileToFetchResponse> | undefined): boolean {
    return proto3.util.equals(GrpcDeleteFileToFetchResponse, a, b);
  }
}

