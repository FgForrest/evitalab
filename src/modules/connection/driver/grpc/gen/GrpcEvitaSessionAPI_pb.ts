// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file GrpcEvitaSessionAPI.proto (package io.evitadb.externalApi.grpc.generated, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Int32Value, Int64Value, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { GrpcAttributeSpecialValue, GrpcCatalogState, GrpcCommitBehavior, GrpcEmptyHierarchicalEntityBehaviour, GrpcFacetStatisticsDepth, GrpcHistogramBehavior, GrpcManagedReferencesBehaviour, GrpcOrderDirection, GrpcPriceContentMode, GrpcQueryPriceMode, GrpcStatisticsBase, GrpcStatisticsType } from "./GrpcEnums_pb.js";
import { GrpcAttributeSpecialValueArray, GrpcBigDecimal, GrpcBigDecimalArray, GrpcBigDecimalNumberRange, GrpcBigDecimalNumberRangeArray, GrpcBooleanArray, GrpcCurrency, GrpcCurrencyArray, GrpcDateTimeRange, GrpcDateTimeRangeArray, GrpcEmptyHierarchicalEntityBehaviourArray, GrpcFacetStatisticsDepthArray, GrpcHistogramBehaviorTypeArray, GrpcIntegerArray, GrpcIntegerNumberRange, GrpcIntegerNumberRangeArray, GrpcLocale, GrpcLocaleArray, GrpcLongArray, GrpcLongNumberRange, GrpcLongNumberRangeArray, GrpcOffsetDateTime, GrpcOffsetDateTimeArray, GrpcOrderDirectionArray, GrpcPriceContentModeArray, GrpcQueryPriceModeArray, GrpcStatisticsBaseArray, GrpcStatisticsTypeArray, GrpcStringArray, GrpcTaskStatus, GrpcUuid } from "./GrpcEvitaDataTypes_pb.js";
import { GrpcCaptureContent, GrpcCaptureCriteria, GrpcChangeCatalogCapture } from "./GrpcChangeCapture_pb.js";
import { GrpcCatalogSchema } from "./GrpcCatalogSchema_pb.js";
import { GrpcEntitySchema } from "./GrpcEntitySchema_pb.js";
import { GrpcLocalCatalogSchemaMutation } from "./GrpcCatalogSchemaMutation_pb.js";
import { GrpcModifyEntitySchemaMutation } from "./GrpcCatalogSchemaMutations_pb.js";
import { GrpcBinaryEntity, GrpcEntityReference, GrpcSealedEntity } from "./GrpcEntity_pb.js";
import { GrpcExtraResults } from "./GrpcExtraResults_pb.js";
import { GrpcEntityMutation } from "./GrpcEntityMutation_pb.js";

/**
 * Response to GetCatalogState request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcCatalogStateResponse
 */
export class GrpcCatalogStateResponse extends Message<GrpcCatalogStateResponse> {
  /**
   * The current state of the catalog.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcCatalogState state = 1;
   */
  state = GrpcCatalogState.UNKNOWN_CATALOG_STATE;

  constructor(data?: PartialMessage<GrpcCatalogStateResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcCatalogStateResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "state", kind: "enum", T: proto3.getEnumType(GrpcCatalogState) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcCatalogStateResponse {
    return new GrpcCatalogStateResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcCatalogStateResponse {
    return new GrpcCatalogStateResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcCatalogStateResponse {
    return new GrpcCatalogStateResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcCatalogStateResponse | PlainMessage<GrpcCatalogStateResponse> | undefined, b: GrpcCatalogStateResponse | PlainMessage<GrpcCatalogStateResponse> | undefined): boolean {
    return proto3.util.equals(GrpcCatalogStateResponse, a, b);
  }
}

/**
 * Request to GrpcCatalogVersionAt request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcCatalogVersionAtRequest
 */
export class GrpcCatalogVersionAtRequest extends Message<GrpcCatalogVersionAtRequest> {
  /**
   * Chosen moment in time for which the version of the catalog should be returned.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcOffsetDateTime theMoment = 1;
   */
  theMoment?: GrpcOffsetDateTime;

  constructor(data?: PartialMessage<GrpcCatalogVersionAtRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcCatalogVersionAtRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "theMoment", kind: "message", T: GrpcOffsetDateTime },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcCatalogVersionAtRequest {
    return new GrpcCatalogVersionAtRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcCatalogVersionAtRequest {
    return new GrpcCatalogVersionAtRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcCatalogVersionAtRequest {
    return new GrpcCatalogVersionAtRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcCatalogVersionAtRequest | PlainMessage<GrpcCatalogVersionAtRequest> | undefined, b: GrpcCatalogVersionAtRequest | PlainMessage<GrpcCatalogVersionAtRequest> | undefined): boolean {
    return proto3.util.equals(GrpcCatalogVersionAtRequest, a, b);
  }
}

/**
 * Response to GrpcCatalogVersionAt request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcCatalogVersionAtResponse
 */
export class GrpcCatalogVersionAtResponse extends Message<GrpcCatalogVersionAtResponse> {
  /**
   * The version of the catalog at the specified moment in time.
   *
   * @generated from field: int64 version = 1;
   */
  version = protoInt64.zero;

  /**
   * Exact moment when this version was stored (introduced).
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcOffsetDateTime introducedAt = 2;
   */
  introducedAt?: GrpcOffsetDateTime;

  constructor(data?: PartialMessage<GrpcCatalogVersionAtResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcCatalogVersionAtResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "introducedAt", kind: "message", T: GrpcOffsetDateTime },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcCatalogVersionAtResponse {
    return new GrpcCatalogVersionAtResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcCatalogVersionAtResponse {
    return new GrpcCatalogVersionAtResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcCatalogVersionAtResponse {
    return new GrpcCatalogVersionAtResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcCatalogVersionAtResponse | PlainMessage<GrpcCatalogVersionAtResponse> | undefined, b: GrpcCatalogVersionAtResponse | PlainMessage<GrpcCatalogVersionAtResponse> | undefined): boolean {
    return proto3.util.equals(GrpcCatalogVersionAtResponse, a, b);
  }
}

/**
 * Request to GetMutationsHistoryPage request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GetMutationsHistoryPageRequest
 */
export class GetMutationsHistoryPageRequest extends Message<GetMutationsHistoryPageRequest> {
  /**
   * The page number starting with 1
   *
   * @generated from field: int32 page = 1;
   */
  page = 0;

  /**
   * The size of the page to return
   *
   * @generated from field: int32 pageSize = 2;
   */
  pageSize = 0;

  /**
   * Starting point for the search (catalog version)
   *
   * @generated from field: int64 sinceVersion = 3;
   */
  sinceVersion = protoInt64.zero;

  /**
   * Starting point for the search (index of the mutation within catalog version)
   *
   * @generated from field: int32 sinceIndex = 4;
   */
  sinceIndex = 0;

  /**
   * The criteria of the capture, allows to define constraints on the returned mutations
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcCaptureCriteria criteria = 5;
   */
  criteria: GrpcCaptureCriteria[] = [];

  /**
   * The scope of the returned data - either header of the mutation, or the whole mutation
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcCaptureContent content = 6;
   */
  content = GrpcCaptureContent.HEADER;

  constructor(data?: PartialMessage<GetMutationsHistoryPageRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GetMutationsHistoryPageRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "page", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "pageSize", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "sinceVersion", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "sinceIndex", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "criteria", kind: "message", T: GrpcCaptureCriteria, repeated: true },
    { no: 6, name: "content", kind: "enum", T: proto3.getEnumType(GrpcCaptureContent) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMutationsHistoryPageRequest {
    return new GetMutationsHistoryPageRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMutationsHistoryPageRequest {
    return new GetMutationsHistoryPageRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMutationsHistoryPageRequest {
    return new GetMutationsHistoryPageRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMutationsHistoryPageRequest | PlainMessage<GetMutationsHistoryPageRequest> | undefined, b: GetMutationsHistoryPageRequest | PlainMessage<GetMutationsHistoryPageRequest> | undefined): boolean {
    return proto3.util.equals(GetMutationsHistoryPageRequest, a, b);
  }
}

/**
 * Response to GetMutationsHistoryPage request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GetMutationsHistoryPageResponse
 */
export class GetMutationsHistoryPageResponse extends Message<GetMutationsHistoryPageResponse> {
  /**
   * The list of mutations that match the criteria
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcChangeCatalogCapture changeCapture = 1;
   */
  changeCapture: GrpcChangeCatalogCapture[] = [];

  constructor(data?: PartialMessage<GetMutationsHistoryPageResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GetMutationsHistoryPageResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeCapture", kind: "message", T: GrpcChangeCatalogCapture, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMutationsHistoryPageResponse {
    return new GetMutationsHistoryPageResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMutationsHistoryPageResponse {
    return new GetMutationsHistoryPageResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMutationsHistoryPageResponse {
    return new GetMutationsHistoryPageResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMutationsHistoryPageResponse | PlainMessage<GetMutationsHistoryPageResponse> | undefined, b: GetMutationsHistoryPageResponse | PlainMessage<GetMutationsHistoryPageResponse> | undefined): boolean {
    return proto3.util.equals(GetMutationsHistoryPageResponse, a, b);
  }
}

/**
 * Request to GetMutationsHistoryPage request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GetMutationsHistoryRequest
 */
export class GetMutationsHistoryRequest extends Message<GetMutationsHistoryRequest> {
  /**
   * Starting point for the search (catalog version)
   *
   * @generated from field: google.protobuf.Int64Value sinceVersion = 1;
   */
  sinceVersion?: bigint;

  /**
   * Starting point for the search (index of the mutation within catalog version)
   *
   * @generated from field: google.protobuf.Int32Value sinceIndex = 2;
   */
  sinceIndex?: number;

  /**
   * The criteria of the capture, allows to define constraints on the returned mutations
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcCaptureCriteria criteria = 3;
   */
  criteria: GrpcCaptureCriteria[] = [];

  /**
   * The scope of the returned data - either header of the mutation, or the whole mutation
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcCaptureContent content = 4;
   */
  content = GrpcCaptureContent.HEADER;

  constructor(data?: PartialMessage<GetMutationsHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GetMutationsHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sinceVersion", kind: "message", T: Int64Value },
    { no: 2, name: "sinceIndex", kind: "message", T: Int32Value },
    { no: 3, name: "criteria", kind: "message", T: GrpcCaptureCriteria, repeated: true },
    { no: 4, name: "content", kind: "enum", T: proto3.getEnumType(GrpcCaptureContent) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMutationsHistoryRequest {
    return new GetMutationsHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMutationsHistoryRequest {
    return new GetMutationsHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMutationsHistoryRequest {
    return new GetMutationsHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetMutationsHistoryRequest | PlainMessage<GetMutationsHistoryRequest> | undefined, b: GetMutationsHistoryRequest | PlainMessage<GetMutationsHistoryRequest> | undefined): boolean {
    return proto3.util.equals(GetMutationsHistoryRequest, a, b);
  }
}

/**
 * Response to GetMutationsHistory request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GetMutationsHistoryResponse
 */
export class GetMutationsHistoryResponse extends Message<GetMutationsHistoryResponse> {
  /**
   * The list of mutations that match the criteria
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcChangeCatalogCapture changeCapture = 1;
   */
  changeCapture: GrpcChangeCatalogCapture[] = [];

  constructor(data?: PartialMessage<GetMutationsHistoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GetMutationsHistoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "changeCapture", kind: "message", T: GrpcChangeCatalogCapture, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetMutationsHistoryResponse {
    return new GetMutationsHistoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetMutationsHistoryResponse {
    return new GetMutationsHistoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetMutationsHistoryResponse {
    return new GetMutationsHistoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetMutationsHistoryResponse | PlainMessage<GetMutationsHistoryResponse> | undefined, b: GetMutationsHistoryResponse | PlainMessage<GetMutationsHistoryResponse> | undefined): boolean {
    return proto3.util.equals(GetMutationsHistoryResponse, a, b);
  }
}

/**
 * Request to GetCatalogSchema request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcGetCatalogSchemaRequest
 */
export class GrpcGetCatalogSchemaRequest extends Message<GrpcGetCatalogSchemaRequest> {
  /**
   * True, if the schema should include name variants for it and all sub-schemas.
   * This could considerably increase the size of the response.
   *
   * @generated from field: bool nameVariants = 1;
   */
  nameVariants = false;

  constructor(data?: PartialMessage<GrpcGetCatalogSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcGetCatalogSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nameVariants", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcGetCatalogSchemaRequest {
    return new GrpcGetCatalogSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcGetCatalogSchemaRequest {
    return new GrpcGetCatalogSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcGetCatalogSchemaRequest {
    return new GrpcGetCatalogSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcGetCatalogSchemaRequest | PlainMessage<GrpcGetCatalogSchemaRequest> | undefined, b: GrpcGetCatalogSchemaRequest | PlainMessage<GrpcGetCatalogSchemaRequest> | undefined): boolean {
    return proto3.util.equals(GrpcGetCatalogSchemaRequest, a, b);
  }
}

/**
 * Response to GetCatalogSchema request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcCatalogSchemaResponse
 */
export class GrpcCatalogSchemaResponse extends Message<GrpcCatalogSchemaResponse> {
  /**
   * The current catalog schema.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcCatalogSchema catalogSchema = 1;
   */
  catalogSchema?: GrpcCatalogSchema;

  constructor(data?: PartialMessage<GrpcCatalogSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcCatalogSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalogSchema", kind: "message", T: GrpcCatalogSchema },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcCatalogSchemaResponse {
    return new GrpcCatalogSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcCatalogSchemaResponse {
    return new GrpcCatalogSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcCatalogSchemaResponse {
    return new GrpcCatalogSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcCatalogSchemaResponse | PlainMessage<GrpcCatalogSchemaResponse> | undefined, b: GrpcCatalogSchemaResponse | PlainMessage<GrpcCatalogSchemaResponse> | undefined): boolean {
    return proto3.util.equals(GrpcCatalogSchemaResponse, a, b);
  }
}

/**
 * Request for acquiring the schema of a specific entity type.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEntitySchemaRequest
 */
export class GrpcEntitySchemaRequest extends Message<GrpcEntitySchemaRequest> {
  /**
   * The entity type for which the schema is requested.
   *
   * @generated from field: string entityType = 1;
   */
  entityType = "";

  /**
   * True, if the schema should include name variants for it and all sub-schemas.
   * This could considerably increase the size of the response.
   *
   * @generated from field: bool nameVariants = 2;
   */
  nameVariants = false;

  constructor(data?: PartialMessage<GrpcEntitySchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcEntitySchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entityType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "nameVariants", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcEntitySchemaRequest {
    return new GrpcEntitySchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcEntitySchemaRequest {
    return new GrpcEntitySchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcEntitySchemaRequest {
    return new GrpcEntitySchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcEntitySchemaRequest | PlainMessage<GrpcEntitySchemaRequest> | undefined, b: GrpcEntitySchemaRequest | PlainMessage<GrpcEntitySchemaRequest> | undefined): boolean {
    return proto3.util.equals(GrpcEntitySchemaRequest, a, b);
  }
}

/**
 * Response to GetEntitySchema request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEntitySchemaResponse
 */
export class GrpcEntitySchemaResponse extends Message<GrpcEntitySchemaResponse> {
  /**
   * The schema of the requested entity type.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntitySchema entitySchema = 1;
   */
  entitySchema?: GrpcEntitySchema;

  constructor(data?: PartialMessage<GrpcEntitySchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcEntitySchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entitySchema", kind: "message", T: GrpcEntitySchema },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcEntitySchemaResponse {
    return new GrpcEntitySchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcEntitySchemaResponse {
    return new GrpcEntitySchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcEntitySchemaResponse {
    return new GrpcEntitySchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcEntitySchemaResponse | PlainMessage<GrpcEntitySchemaResponse> | undefined, b: GrpcEntitySchemaResponse | PlainMessage<GrpcEntitySchemaResponse> | undefined): boolean {
    return proto3.util.equals(GrpcEntitySchemaResponse, a, b);
  }
}

/**
 * Request for updating the catalog schema.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcUpdateCatalogSchemaRequest
 */
export class GrpcUpdateCatalogSchemaRequest extends Message<GrpcUpdateCatalogSchemaRequest> {
  /**
   * Collection of local catalog schema mutations to be applied.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcLocalCatalogSchemaMutation schemaMutations = 1;
   */
  schemaMutations: GrpcLocalCatalogSchemaMutation[] = [];

  constructor(data?: PartialMessage<GrpcUpdateCatalogSchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcUpdateCatalogSchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schemaMutations", kind: "message", T: GrpcLocalCatalogSchemaMutation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcUpdateCatalogSchemaRequest {
    return new GrpcUpdateCatalogSchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcUpdateCatalogSchemaRequest {
    return new GrpcUpdateCatalogSchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcUpdateCatalogSchemaRequest {
    return new GrpcUpdateCatalogSchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcUpdateCatalogSchemaRequest | PlainMessage<GrpcUpdateCatalogSchemaRequest> | undefined, b: GrpcUpdateCatalogSchemaRequest | PlainMessage<GrpcUpdateCatalogSchemaRequest> | undefined): boolean {
    return proto3.util.equals(GrpcUpdateCatalogSchemaRequest, a, b);
  }
}

/**
 * Response to UpdateCatalogSchema request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcUpdateCatalogSchemaResponse
 */
export class GrpcUpdateCatalogSchemaResponse extends Message<GrpcUpdateCatalogSchemaResponse> {
  /**
   * The new version of the catalog schema.
   *
   * @generated from field: int32 version = 1;
   */
  version = 0;

  constructor(data?: PartialMessage<GrpcUpdateCatalogSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcUpdateCatalogSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcUpdateCatalogSchemaResponse {
    return new GrpcUpdateCatalogSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcUpdateCatalogSchemaResponse {
    return new GrpcUpdateCatalogSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcUpdateCatalogSchemaResponse {
    return new GrpcUpdateCatalogSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcUpdateCatalogSchemaResponse | PlainMessage<GrpcUpdateCatalogSchemaResponse> | undefined, b: GrpcUpdateCatalogSchemaResponse | PlainMessage<GrpcUpdateCatalogSchemaResponse> | undefined): boolean {
    return proto3.util.equals(GrpcUpdateCatalogSchemaResponse, a, b);
  }
}

/**
 * Request for updating the catalog schema and its afterwards fetching.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcUpdateAndFetchCatalogSchemaResponse
 */
export class GrpcUpdateAndFetchCatalogSchemaResponse extends Message<GrpcUpdateAndFetchCatalogSchemaResponse> {
  /**
   * Modified catalog schema.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcCatalogSchema catalogSchema = 1;
   */
  catalogSchema?: GrpcCatalogSchema;

  constructor(data?: PartialMessage<GrpcUpdateAndFetchCatalogSchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcUpdateAndFetchCatalogSchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalogSchema", kind: "message", T: GrpcCatalogSchema },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcUpdateAndFetchCatalogSchemaResponse {
    return new GrpcUpdateAndFetchCatalogSchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcUpdateAndFetchCatalogSchemaResponse {
    return new GrpcUpdateAndFetchCatalogSchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcUpdateAndFetchCatalogSchemaResponse {
    return new GrpcUpdateAndFetchCatalogSchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcUpdateAndFetchCatalogSchemaResponse | PlainMessage<GrpcUpdateAndFetchCatalogSchemaResponse> | undefined, b: GrpcUpdateAndFetchCatalogSchemaResponse | PlainMessage<GrpcUpdateAndFetchCatalogSchemaResponse> | undefined): boolean {
    return proto3.util.equals(GrpcUpdateAndFetchCatalogSchemaResponse, a, b);
  }
}

/**
 * Request for defining the schema of a new entity type.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDefineEntitySchemaRequest
 */
export class GrpcDefineEntitySchemaRequest extends Message<GrpcDefineEntitySchemaRequest> {
  /**
   * The schema of the new entity type.
   *
   * @generated from field: string entityType = 1;
   */
  entityType = "";

  constructor(data?: PartialMessage<GrpcDefineEntitySchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcDefineEntitySchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entityType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcDefineEntitySchemaRequest {
    return new GrpcDefineEntitySchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcDefineEntitySchemaRequest {
    return new GrpcDefineEntitySchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcDefineEntitySchemaRequest {
    return new GrpcDefineEntitySchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcDefineEntitySchemaRequest | PlainMessage<GrpcDefineEntitySchemaRequest> | undefined, b: GrpcDefineEntitySchemaRequest | PlainMessage<GrpcDefineEntitySchemaRequest> | undefined): boolean {
    return proto3.util.equals(GrpcDefineEntitySchemaRequest, a, b);
  }
}

/**
 * Response to DefineEntitySchema request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDefineEntitySchemaResponse
 */
export class GrpcDefineEntitySchemaResponse extends Message<GrpcDefineEntitySchemaResponse> {
  /**
   * Newly created entity schema.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntitySchema entitySchema = 1;
   */
  entitySchema?: GrpcEntitySchema;

  constructor(data?: PartialMessage<GrpcDefineEntitySchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcDefineEntitySchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entitySchema", kind: "message", T: GrpcEntitySchema },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcDefineEntitySchemaResponse {
    return new GrpcDefineEntitySchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcDefineEntitySchemaResponse {
    return new GrpcDefineEntitySchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcDefineEntitySchemaResponse {
    return new GrpcDefineEntitySchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcDefineEntitySchemaResponse | PlainMessage<GrpcDefineEntitySchemaResponse> | undefined, b: GrpcDefineEntitySchemaResponse | PlainMessage<GrpcDefineEntitySchemaResponse> | undefined): boolean {
    return proto3.util.equals(GrpcDefineEntitySchemaResponse, a, b);
  }
}

/**
 * Request for updating the schema of an existing entity type.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcUpdateEntitySchemaRequest
 */
export class GrpcUpdateEntitySchemaRequest extends Message<GrpcUpdateEntitySchemaRequest> {
  /**
   * Wrapper that holds the entity type and the collection of EntitySchemaMutations to be applied.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcModifyEntitySchemaMutation schemaMutation = 1;
   */
  schemaMutation?: GrpcModifyEntitySchemaMutation;

  constructor(data?: PartialMessage<GrpcUpdateEntitySchemaRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcUpdateEntitySchemaRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "schemaMutation", kind: "message", T: GrpcModifyEntitySchemaMutation },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcUpdateEntitySchemaRequest {
    return new GrpcUpdateEntitySchemaRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcUpdateEntitySchemaRequest {
    return new GrpcUpdateEntitySchemaRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcUpdateEntitySchemaRequest {
    return new GrpcUpdateEntitySchemaRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcUpdateEntitySchemaRequest | PlainMessage<GrpcUpdateEntitySchemaRequest> | undefined, b: GrpcUpdateEntitySchemaRequest | PlainMessage<GrpcUpdateEntitySchemaRequest> | undefined): boolean {
    return proto3.util.equals(GrpcUpdateEntitySchemaRequest, a, b);
  }
}

/**
 * Response to UpdateEntitySchema request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcUpdateEntitySchemaResponse
 */
export class GrpcUpdateEntitySchemaResponse extends Message<GrpcUpdateEntitySchemaResponse> {
  /**
   * The new version of the entity schema.
   *
   * @generated from field: int32 version = 1;
   */
  version = 0;

  constructor(data?: PartialMessage<GrpcUpdateEntitySchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcUpdateEntitySchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcUpdateEntitySchemaResponse {
    return new GrpcUpdateEntitySchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcUpdateEntitySchemaResponse {
    return new GrpcUpdateEntitySchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcUpdateEntitySchemaResponse {
    return new GrpcUpdateEntitySchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcUpdateEntitySchemaResponse | PlainMessage<GrpcUpdateEntitySchemaResponse> | undefined, b: GrpcUpdateEntitySchemaResponse | PlainMessage<GrpcUpdateEntitySchemaResponse> | undefined): boolean {
    return proto3.util.equals(GrpcUpdateEntitySchemaResponse, a, b);
  }
}

/**
 * Request for updating the entity schema and its afterwards fetching.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcUpdateAndFetchEntitySchemaResponse
 */
export class GrpcUpdateAndFetchEntitySchemaResponse extends Message<GrpcUpdateAndFetchEntitySchemaResponse> {
  /**
   * Modified entity schema.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntitySchema entitySchema = 1;
   */
  entitySchema?: GrpcEntitySchema;

  constructor(data?: PartialMessage<GrpcUpdateAndFetchEntitySchemaResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcUpdateAndFetchEntitySchemaResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entitySchema", kind: "message", T: GrpcEntitySchema },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcUpdateAndFetchEntitySchemaResponse {
    return new GrpcUpdateAndFetchEntitySchemaResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcUpdateAndFetchEntitySchemaResponse {
    return new GrpcUpdateAndFetchEntitySchemaResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcUpdateAndFetchEntitySchemaResponse {
    return new GrpcUpdateAndFetchEntitySchemaResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcUpdateAndFetchEntitySchemaResponse | PlainMessage<GrpcUpdateAndFetchEntitySchemaResponse> | undefined, b: GrpcUpdateAndFetchEntitySchemaResponse | PlainMessage<GrpcUpdateAndFetchEntitySchemaResponse> | undefined): boolean {
    return proto3.util.equals(GrpcUpdateAndFetchEntitySchemaResponse, a, b);
  }
}

/**
 * Request for acquiring an entity.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEntityRequest
 */
export class GrpcEntityRequest extends Message<GrpcEntityRequest> {
  /**
   * The primary key of the entity.
   *
   * @generated from field: int32 primaryKey = 1;
   */
  primaryKey = 0;

  /**
   * The entity type of the entity.
   *
   * @generated from field: string entityType = 2;
   */
  entityType = "";

  /**
   * The string part of the parametrised query require part.
   *
   * @generated from field: string require = 3;
   */
  require = "";

  /**
   * The positional query parameters.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcQueryParam positionalQueryParams = 4;
   */
  positionalQueryParams: GrpcQueryParam[] = [];

  /**
   * The named query parameters.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcQueryParam> namedQueryParams = 5;
   */
  namedQueryParams: { [key: string]: GrpcQueryParam } = {};

  constructor(data?: PartialMessage<GrpcEntityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcEntityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "primaryKey", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "entityType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "require", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "positionalQueryParams", kind: "message", T: GrpcQueryParam, repeated: true },
    { no: 5, name: "namedQueryParams", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: GrpcQueryParam} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcEntityRequest {
    return new GrpcEntityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcEntityRequest {
    return new GrpcEntityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcEntityRequest {
    return new GrpcEntityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcEntityRequest | PlainMessage<GrpcEntityRequest> | undefined, b: GrpcEntityRequest | PlainMessage<GrpcEntityRequest> | undefined): boolean {
    return proto3.util.equals(GrpcEntityRequest, a, b);
  }
}

/**
 * Response to GetEntity request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEntityResponse
 */
export class GrpcEntityResponse extends Message<GrpcEntityResponse> {
  /**
   * The found entity.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcSealedEntity entity = 1;
   */
  entity?: GrpcSealedEntity;

  constructor(data?: PartialMessage<GrpcEntityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcEntityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entity", kind: "message", T: GrpcSealedEntity },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcEntityResponse {
    return new GrpcEntityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcEntityResponse {
    return new GrpcEntityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcEntityResponse {
    return new GrpcEntityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcEntityResponse | PlainMessage<GrpcEntityResponse> | undefined, b: GrpcEntityResponse | PlainMessage<GrpcEntityResponse> | undefined): boolean {
    return proto3.util.equals(GrpcEntityResponse, a, b);
  }
}

/**
 * Structure that represents a pagination within a data chunk.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcPaginatedList
 */
export class GrpcPaginatedList extends Message<GrpcPaginatedList> {
  /**
   * The size of the page.
   *
   * @generated from field: int32 pageSize = 1;
   */
  pageSize = 0;

  /**
   * The number of the page.
   *
   * @generated from field: int32 pageNumber = 2;
   */
  pageNumber = 0;

  constructor(data?: PartialMessage<GrpcPaginatedList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcPaginatedList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pageSize", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "pageNumber", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcPaginatedList {
    return new GrpcPaginatedList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcPaginatedList {
    return new GrpcPaginatedList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcPaginatedList {
    return new GrpcPaginatedList().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcPaginatedList | PlainMessage<GrpcPaginatedList> | undefined, b: GrpcPaginatedList | PlainMessage<GrpcPaginatedList> | undefined): boolean {
    return proto3.util.equals(GrpcPaginatedList, a, b);
  }
}

/**
 * Structure that represents a strip within a data chunk.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcStripList
 */
export class GrpcStripList extends Message<GrpcStripList> {
  /**
   * The size of the strip.
   *
   * @generated from field: int32 limit = 1;
   */
  limit = 0;

  /**
   * The offset of the strip - count of records from the beginning to skip.
   *
   * @generated from field: int32 offset = 2;
   */
  offset = 0;

  constructor(data?: PartialMessage<GrpcStripList>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcStripList";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcStripList {
    return new GrpcStripList().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcStripList {
    return new GrpcStripList().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcStripList {
    return new GrpcStripList().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcStripList | PlainMessage<GrpcStripList> | undefined, b: GrpcStripList | PlainMessage<GrpcStripList> | undefined): boolean {
    return proto3.util.equals(GrpcStripList, a, b);
  }
}

/**
 * Structure that represents a data chunk of entities. Only one of the entity fields should be set in one response.
 * That is decided by require block in a query, so as the pagination method used.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDataChunk
 */
export class GrpcDataChunk extends Message<GrpcDataChunk> {
  /**
   * Collection of entity references.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcEntityReference entityReferences = 1;
   */
  entityReferences: GrpcEntityReference[] = [];

  /**
   * Collection of sealed entities.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcSealedEntity sealedEntities = 2;
   */
  sealedEntities: GrpcSealedEntity[] = [];

  /**
   * Collection of binary entities.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcBinaryEntity binaryEntities = 3;
   */
  binaryEntities: GrpcBinaryEntity[] = [];

  /**
   * Chunk of the data.
   *
   * @generated from oneof io.evitadb.externalApi.grpc.generated.GrpcDataChunk.chunk
   */
  chunk: {
    /**
     * The paginated list.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcPaginatedList paginatedList = 4;
     */
    value: GrpcPaginatedList;
    case: "paginatedList";
  } | {
    /**
     * The strip list.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcStripList stripList = 5;
     */
    value: GrpcStripList;
    case: "stripList";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * The total number of records.
   *
   * @generated from field: int32 totalRecordCount = 6;
   */
  totalRecordCount = 0;

  /**
   * True, if this is the first page.
   *
   * @generated from field: bool isFirst = 7;
   */
  isFirst = false;

  /**
   * True, if this is the last page.
   *
   * @generated from field: bool isLast = 8;
   */
  isLast = false;

  /**
   * True, if there is a previous page.
   *
   * @generated from field: bool hasPrevious = 9;
   */
  hasPrevious = false;

  /**
   * True, if there is a next page.
   *
   * @generated from field: bool hasNext = 10;
   */
  hasNext = false;

  /**
   * True, if this is a single page.
   *
   * @generated from field: bool isSinglePage = 11;
   */
  isSinglePage = false;

  /**
   * True, if this is an empty page.
   *
   * @generated from field: bool isEmpty = 12;
   */
  isEmpty = false;

  constructor(data?: PartialMessage<GrpcDataChunk>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcDataChunk";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entityReferences", kind: "message", T: GrpcEntityReference, repeated: true },
    { no: 2, name: "sealedEntities", kind: "message", T: GrpcSealedEntity, repeated: true },
    { no: 3, name: "binaryEntities", kind: "message", T: GrpcBinaryEntity, repeated: true },
    { no: 4, name: "paginatedList", kind: "message", T: GrpcPaginatedList, oneof: "chunk" },
    { no: 5, name: "stripList", kind: "message", T: GrpcStripList, oneof: "chunk" },
    { no: 6, name: "totalRecordCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 7, name: "isFirst", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 8, name: "isLast", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 9, name: "hasPrevious", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 10, name: "hasNext", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 11, name: "isSinglePage", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 12, name: "isEmpty", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcDataChunk {
    return new GrpcDataChunk().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcDataChunk {
    return new GrpcDataChunk().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcDataChunk {
    return new GrpcDataChunk().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcDataChunk | PlainMessage<GrpcDataChunk> | undefined, b: GrpcDataChunk | PlainMessage<GrpcDataChunk> | undefined): boolean {
    return proto3.util.equals(GrpcDataChunk, a, b);
  }
}

/**
 * Request for deleting an entity collection.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDeleteCollectionRequest
 */
export class GrpcDeleteCollectionRequest extends Message<GrpcDeleteCollectionRequest> {
  /**
   * The entity type of the collection to be deleted.
   *
   * @generated from field: string entityType = 1;
   */
  entityType = "";

  constructor(data?: PartialMessage<GrpcDeleteCollectionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcDeleteCollectionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entityType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcDeleteCollectionRequest {
    return new GrpcDeleteCollectionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcDeleteCollectionRequest {
    return new GrpcDeleteCollectionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcDeleteCollectionRequest {
    return new GrpcDeleteCollectionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcDeleteCollectionRequest | PlainMessage<GrpcDeleteCollectionRequest> | undefined, b: GrpcDeleteCollectionRequest | PlainMessage<GrpcDeleteCollectionRequest> | undefined): boolean {
    return proto3.util.equals(GrpcDeleteCollectionRequest, a, b);
  }
}

/**
 * Response to DeleteCollection request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDeleteCollectionResponse
 */
export class GrpcDeleteCollectionResponse extends Message<GrpcDeleteCollectionResponse> {
  /**
   * True, if the collection was deleted.
   *
   * @generated from field: bool deleted = 1;
   */
  deleted = false;

  constructor(data?: PartialMessage<GrpcDeleteCollectionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcDeleteCollectionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deleted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcDeleteCollectionResponse {
    return new GrpcDeleteCollectionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcDeleteCollectionResponse {
    return new GrpcDeleteCollectionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcDeleteCollectionResponse {
    return new GrpcDeleteCollectionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcDeleteCollectionResponse | PlainMessage<GrpcDeleteCollectionResponse> | undefined, b: GrpcDeleteCollectionResponse | PlainMessage<GrpcDeleteCollectionResponse> | undefined): boolean {
    return proto3.util.equals(GrpcDeleteCollectionResponse, a, b);
  }
}

/**
 * Request for renaming an entity collection.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcRenameCollectionRequest
 */
export class GrpcRenameCollectionRequest extends Message<GrpcRenameCollectionRequest> {
  /**
   * The entity type of the collection to be renamed.
   *
   * @generated from field: string entityType = 1;
   */
  entityType = "";

  /**
   * The new name of the collection.
   *
   * @generated from field: string newName = 2;
   */
  newName = "";

  constructor(data?: PartialMessage<GrpcRenameCollectionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcRenameCollectionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entityType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "newName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcRenameCollectionRequest {
    return new GrpcRenameCollectionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcRenameCollectionRequest {
    return new GrpcRenameCollectionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcRenameCollectionRequest {
    return new GrpcRenameCollectionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcRenameCollectionRequest | PlainMessage<GrpcRenameCollectionRequest> | undefined, b: GrpcRenameCollectionRequest | PlainMessage<GrpcRenameCollectionRequest> | undefined): boolean {
    return proto3.util.equals(GrpcRenameCollectionRequest, a, b);
  }
}

/**
 * Response to RenameCollection request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcRenameCollectionResponse
 */
export class GrpcRenameCollectionResponse extends Message<GrpcRenameCollectionResponse> {
  /**
   * True, if the collection was renamed.
   *
   * @generated from field: bool renamed = 1;
   */
  renamed = false;

  constructor(data?: PartialMessage<GrpcRenameCollectionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcRenameCollectionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "renamed", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcRenameCollectionResponse {
    return new GrpcRenameCollectionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcRenameCollectionResponse {
    return new GrpcRenameCollectionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcRenameCollectionResponse {
    return new GrpcRenameCollectionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcRenameCollectionResponse | PlainMessage<GrpcRenameCollectionResponse> | undefined, b: GrpcRenameCollectionResponse | PlainMessage<GrpcRenameCollectionResponse> | undefined): boolean {
    return proto3.util.equals(GrpcRenameCollectionResponse, a, b);
  }
}

/**
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcReplaceCollectionRequest
 */
export class GrpcReplaceCollectionRequest extends Message<GrpcReplaceCollectionRequest> {
  /**
   * Name of the entity collection that will be replaced and dropped (new name)
   *
   * @generated from field: string entityTypeToBeReplaced = 1;
   */
  entityTypeToBeReplaced = "";

  /**
   * Name of the entity collection that will become the successor of the original collection (old name)
   *
   * @generated from field: string entityTypeToBeReplacedWith = 2;
   */
  entityTypeToBeReplacedWith = "";

  constructor(data?: PartialMessage<GrpcReplaceCollectionRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcReplaceCollectionRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entityTypeToBeReplaced", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entityTypeToBeReplacedWith", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcReplaceCollectionRequest {
    return new GrpcReplaceCollectionRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcReplaceCollectionRequest {
    return new GrpcReplaceCollectionRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcReplaceCollectionRequest {
    return new GrpcReplaceCollectionRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcReplaceCollectionRequest | PlainMessage<GrpcReplaceCollectionRequest> | undefined, b: GrpcReplaceCollectionRequest | PlainMessage<GrpcReplaceCollectionRequest> | undefined): boolean {
    return proto3.util.equals(GrpcReplaceCollectionRequest, a, b);
  }
}

/**
 * Response to ReplaceCollection request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcReplaceCollectionResponse
 */
export class GrpcReplaceCollectionResponse extends Message<GrpcReplaceCollectionResponse> {
  /**
   * True, if the collection was replaced.
   *
   * @generated from field: bool replaced = 1;
   */
  replaced = false;

  constructor(data?: PartialMessage<GrpcReplaceCollectionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcReplaceCollectionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "replaced", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcReplaceCollectionResponse {
    return new GrpcReplaceCollectionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcReplaceCollectionResponse {
    return new GrpcReplaceCollectionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcReplaceCollectionResponse {
    return new GrpcReplaceCollectionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcReplaceCollectionResponse | PlainMessage<GrpcReplaceCollectionResponse> | undefined, b: GrpcReplaceCollectionResponse | PlainMessage<GrpcReplaceCollectionResponse> | undefined): boolean {
    return proto3.util.equals(GrpcReplaceCollectionResponse, a, b);
  }
}

/**
 * Request for acquiring the size of an entity collection.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEntityCollectionSizeRequest
 */
export class GrpcEntityCollectionSizeRequest extends Message<GrpcEntityCollectionSizeRequest> {
  /**
   * The entity type of the collection - (count of entities stored).
   *
   * @generated from field: string entityType = 1;
   */
  entityType = "";

  constructor(data?: PartialMessage<GrpcEntityCollectionSizeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcEntityCollectionSizeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entityType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcEntityCollectionSizeRequest {
    return new GrpcEntityCollectionSizeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcEntityCollectionSizeRequest {
    return new GrpcEntityCollectionSizeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcEntityCollectionSizeRequest {
    return new GrpcEntityCollectionSizeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcEntityCollectionSizeRequest | PlainMessage<GrpcEntityCollectionSizeRequest> | undefined, b: GrpcEntityCollectionSizeRequest | PlainMessage<GrpcEntityCollectionSizeRequest> | undefined): boolean {
    return proto3.util.equals(GrpcEntityCollectionSizeRequest, a, b);
  }
}

/**
 * Response to GetEntityCollectionSize request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEntityCollectionSizeResponse
 */
export class GrpcEntityCollectionSizeResponse extends Message<GrpcEntityCollectionSizeResponse> {
  /**
   * The size of the collection.
   *
   * @generated from field: int32 size = 1;
   */
  size = 0;

  constructor(data?: PartialMessage<GrpcEntityCollectionSizeResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcEntityCollectionSizeResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "size", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcEntityCollectionSizeResponse {
    return new GrpcEntityCollectionSizeResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcEntityCollectionSizeResponse {
    return new GrpcEntityCollectionSizeResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcEntityCollectionSizeResponse {
    return new GrpcEntityCollectionSizeResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcEntityCollectionSizeResponse | PlainMessage<GrpcEntityCollectionSizeResponse> | undefined, b: GrpcEntityCollectionSizeResponse | PlainMessage<GrpcEntityCollectionSizeResponse> | undefined): boolean {
    return proto3.util.equals(GrpcEntityCollectionSizeResponse, a, b);
  }
}

/**
 * Response for Close request that commits or rollbacks the changes in the session.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcCloseRequest
 */
export class GrpcCloseRequest extends Message<GrpcCloseRequest> {
  /**
   * Contains the requested commit behaviour
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcCommitBehavior commitBehaviour = 1;
   */
  commitBehaviour = GrpcCommitBehavior.WAIT_FOR_CONFLICT_RESOLUTION;

  constructor(data?: PartialMessage<GrpcCloseRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcCloseRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "commitBehaviour", kind: "enum", T: proto3.getEnumType(GrpcCommitBehavior) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcCloseRequest {
    return new GrpcCloseRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcCloseRequest {
    return new GrpcCloseRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcCloseRequest {
    return new GrpcCloseRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcCloseRequest | PlainMessage<GrpcCloseRequest> | undefined, b: GrpcCloseRequest | PlainMessage<GrpcCloseRequest> | undefined): boolean {
    return proto3.util.equals(GrpcCloseRequest, a, b);
  }
}

/**
 * Response for Close request that commits or rollbacks the changes in the session.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcCloseResponse
 */
export class GrpcCloseResponse extends Message<GrpcCloseResponse> {
  /**
   * Contains next catalog version
   *
   * @generated from field: int64 catalogVersion = 1;
   */
  catalogVersion = protoInt64.zero;

  constructor(data?: PartialMessage<GrpcCloseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcCloseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalogVersion", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcCloseResponse {
    return new GrpcCloseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcCloseResponse {
    return new GrpcCloseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcCloseResponse {
    return new GrpcCloseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcCloseResponse | PlainMessage<GrpcCloseResponse> | undefined, b: GrpcCloseResponse | PlainMessage<GrpcCloseResponse> | undefined): boolean {
    return proto3.util.equals(GrpcCloseResponse, a, b);
  }
}

/**
 * Response for GoLiveAndClose request that switches the catalog to ALIVE state and closes the session.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcGoLiveAndCloseResponse
 */
export class GrpcGoLiveAndCloseResponse extends Message<GrpcGoLiveAndCloseResponse> {
  /**
   * True, if the catalog was switched to ALIVE state.
   *
   * @generated from field: bool success = 1;
   */
  success = false;

  /**
   * Contains next catalog version
   *
   * @generated from field: int64 catalogVersion = 2;
   */
  catalogVersion = protoInt64.zero;

  constructor(data?: PartialMessage<GrpcGoLiveAndCloseResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcGoLiveAndCloseResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "catalogVersion", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcGoLiveAndCloseResponse {
    return new GrpcGoLiveAndCloseResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcGoLiveAndCloseResponse {
    return new GrpcGoLiveAndCloseResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcGoLiveAndCloseResponse {
    return new GrpcGoLiveAndCloseResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcGoLiveAndCloseResponse | PlainMessage<GrpcGoLiveAndCloseResponse> | undefined, b: GrpcGoLiveAndCloseResponse | PlainMessage<GrpcGoLiveAndCloseResponse> | undefined): boolean {
    return proto3.util.equals(GrpcGoLiveAndCloseResponse, a, b);
  }
}

/**
 * Response to a catalog backup request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcBackupCatalogRequest
 */
export class GrpcBackupCatalogRequest extends Message<GrpcBackupCatalogRequest> {
  /**
   * The moment in time to which the catalog should be backed up. Might be null for current time.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcOffsetDateTime pastMoment = 1;
   */
  pastMoment?: GrpcOffsetDateTime;

  /**
   * True, if the WAL should be included in the backup. Use false if you want to restore catalog in exact state as
   * it was at the pastMoment.
   *
   * @generated from field: bool includingWAL = 2;
   */
  includingWAL = false;

  constructor(data?: PartialMessage<GrpcBackupCatalogRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcBackupCatalogRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pastMoment", kind: "message", T: GrpcOffsetDateTime },
    { no: 2, name: "includingWAL", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcBackupCatalogRequest {
    return new GrpcBackupCatalogRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcBackupCatalogRequest {
    return new GrpcBackupCatalogRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcBackupCatalogRequest {
    return new GrpcBackupCatalogRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcBackupCatalogRequest | PlainMessage<GrpcBackupCatalogRequest> | undefined, b: GrpcBackupCatalogRequest | PlainMessage<GrpcBackupCatalogRequest> | undefined): boolean {
    return proto3.util.equals(GrpcBackupCatalogRequest, a, b);
  }
}

/**
 * Response to a catalog backup request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcBackupCatalogResponse
 */
export class GrpcBackupCatalogResponse extends Message<GrpcBackupCatalogResponse> {
  /**
   * the task that is used to backup the catalog and getting its progress
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcTaskStatus taskStatus = 1;
   */
  taskStatus?: GrpcTaskStatus;

  constructor(data?: PartialMessage<GrpcBackupCatalogResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcBackupCatalogResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "taskStatus", kind: "message", T: GrpcTaskStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcBackupCatalogResponse {
    return new GrpcBackupCatalogResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcBackupCatalogResponse {
    return new GrpcBackupCatalogResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcBackupCatalogResponse {
    return new GrpcBackupCatalogResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcBackupCatalogResponse | PlainMessage<GrpcBackupCatalogResponse> | undefined, b: GrpcBackupCatalogResponse | PlainMessage<GrpcBackupCatalogResponse> | undefined): boolean {
    return proto3.util.equals(GrpcBackupCatalogResponse, a, b);
  }
}

/**
 * Request for acquiring the list of all entity types.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEntityTypesResponse
 */
export class GrpcEntityTypesResponse extends Message<GrpcEntityTypesResponse> {
  /**
   * The list of all entity types.
   *
   * @generated from field: repeated string entityTypes = 1;
   */
  entityTypes: string[] = [];

  constructor(data?: PartialMessage<GrpcEntityTypesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcEntityTypesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entityTypes", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcEntityTypesResponse {
    return new GrpcEntityTypesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcEntityTypesResponse {
    return new GrpcEntityTypesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcEntityTypesResponse {
    return new GrpcEntityTypesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcEntityTypesResponse | PlainMessage<GrpcEntityTypesResponse> | undefined, b: GrpcEntityTypesResponse | PlainMessage<GrpcEntityTypesResponse> | undefined): boolean {
    return proto3.util.equals(GrpcEntityTypesResponse, a, b);
  }
}

/**
 * Request for specifying a query to be executed.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcQueryRequest
 */
export class GrpcQueryRequest extends Message<GrpcQueryRequest> {
  /**
   * The string part of the parametrised query.
   *
   * @generated from field: string query = 1;
   */
  query = "";

  /**
   * The positional query parameters.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcQueryParam positionalQueryParams = 2;
   */
  positionalQueryParams: GrpcQueryParam[] = [];

  /**
   * The named query parameters.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcQueryParam> namedQueryParams = 3;
   */
  namedQueryParams: { [key: string]: GrpcQueryParam } = {};

  constructor(data?: PartialMessage<GrpcQueryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcQueryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "positionalQueryParams", kind: "message", T: GrpcQueryParam, repeated: true },
    { no: 3, name: "namedQueryParams", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: GrpcQueryParam} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcQueryRequest {
    return new GrpcQueryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcQueryRequest {
    return new GrpcQueryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcQueryRequest {
    return new GrpcQueryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcQueryRequest | PlainMessage<GrpcQueryRequest> | undefined, b: GrpcQueryRequest | PlainMessage<GrpcQueryRequest> | undefined): boolean {
    return proto3.util.equals(GrpcQueryRequest, a, b);
  }
}

/**
 * Request for specifying a query to be executed.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcQueryUnsafeRequest
 */
export class GrpcQueryUnsafeRequest extends Message<GrpcQueryUnsafeRequest> {
  /**
   * The string part of the parametrised query.
   *
   * @generated from field: string query = 1;
   */
  query = "";

  constructor(data?: PartialMessage<GrpcQueryUnsafeRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcQueryUnsafeRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcQueryUnsafeRequest {
    return new GrpcQueryUnsafeRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcQueryUnsafeRequest {
    return new GrpcQueryUnsafeRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcQueryUnsafeRequest {
    return new GrpcQueryUnsafeRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcQueryUnsafeRequest | PlainMessage<GrpcQueryUnsafeRequest> | undefined, b: GrpcQueryUnsafeRequest | PlainMessage<GrpcQueryUnsafeRequest> | undefined): boolean {
    return proto3.util.equals(GrpcQueryUnsafeRequest, a, b);
  }
}

/**
 * Response to Query request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcQueryResponse
 */
export class GrpcQueryResponse extends Message<GrpcQueryResponse> {
  /**
   * The fetched record page with entities.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcDataChunk recordPage = 1;
   */
  recordPage?: GrpcDataChunk;

  /**
   * The computed extra results.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcExtraResults extraResults = 2;
   */
  extraResults?: GrpcExtraResults;

  constructor(data?: PartialMessage<GrpcQueryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcQueryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "recordPage", kind: "message", T: GrpcDataChunk },
    { no: 2, name: "extraResults", kind: "message", T: GrpcExtraResults },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcQueryResponse {
    return new GrpcQueryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcQueryResponse {
    return new GrpcQueryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcQueryResponse {
    return new GrpcQueryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcQueryResponse | PlainMessage<GrpcQueryResponse> | undefined, b: GrpcQueryResponse | PlainMessage<GrpcQueryResponse> | undefined): boolean {
    return proto3.util.equals(GrpcQueryResponse, a, b);
  }
}

/**
 * Response for query request executed when searched for exactly one entity. The used field is decided by the require block in the query.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcQueryOneResponse
 */
export class GrpcQueryOneResponse extends Message<GrpcQueryOneResponse> {
  /**
   * Entity reference of the found entity.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntityReference entityReference = 1;
   */
  entityReference?: GrpcEntityReference;

  /**
   * Sealed entity of the found entity.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcSealedEntity sealedEntity = 2;
   */
  sealedEntity?: GrpcSealedEntity;

  /**
   * Binary entity of the found entity.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcBinaryEntity binaryEntity = 3;
   */
  binaryEntity?: GrpcBinaryEntity;

  constructor(data?: PartialMessage<GrpcQueryOneResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcQueryOneResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entityReference", kind: "message", T: GrpcEntityReference },
    { no: 2, name: "sealedEntity", kind: "message", T: GrpcSealedEntity },
    { no: 3, name: "binaryEntity", kind: "message", T: GrpcBinaryEntity },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcQueryOneResponse {
    return new GrpcQueryOneResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcQueryOneResponse {
    return new GrpcQueryOneResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcQueryOneResponse {
    return new GrpcQueryOneResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcQueryOneResponse | PlainMessage<GrpcQueryOneResponse> | undefined, b: GrpcQueryOneResponse | PlainMessage<GrpcQueryOneResponse> | undefined): boolean {
    return proto3.util.equals(GrpcQueryOneResponse, a, b);
  }
}

/**
 * Response for query request executed when searched for a list of entities. The used field is decided by the require block in the query.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcQueryListResponse
 */
export class GrpcQueryListResponse extends Message<GrpcQueryListResponse> {
  /**
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcEntityReference entityReferences = 1;
   */
  entityReferences: GrpcEntityReference[] = [];

  /**
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcSealedEntity sealedEntities = 2;
   */
  sealedEntities: GrpcSealedEntity[] = [];

  /**
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcBinaryEntity binaryEntities = 3;
   */
  binaryEntities: GrpcBinaryEntity[] = [];

  constructor(data?: PartialMessage<GrpcQueryListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcQueryListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entityReferences", kind: "message", T: GrpcEntityReference, repeated: true },
    { no: 2, name: "sealedEntities", kind: "message", T: GrpcSealedEntity, repeated: true },
    { no: 3, name: "binaryEntities", kind: "message", T: GrpcBinaryEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcQueryListResponse {
    return new GrpcQueryListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcQueryListResponse {
    return new GrpcQueryListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcQueryListResponse {
    return new GrpcQueryListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcQueryListResponse | PlainMessage<GrpcQueryListResponse> | undefined, b: GrpcQueryListResponse | PlainMessage<GrpcQueryListResponse> | undefined): boolean {
    return proto3.util.equals(GrpcQueryListResponse, a, b);
  }
}

/**
 * Request for upserting an entity that should return an entity with required richness.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcUpsertEntityRequest
 */
export class GrpcUpsertEntityRequest extends Message<GrpcUpsertEntityRequest> {
  /**
   * Either Upsert or Delete entity mutation.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntityMutation entityMutation = 1;
   */
  entityMutation?: GrpcEntityMutation;

  /**
   * The string part of the parametrised query require part.
   *
   * @generated from field: string require = 2;
   */
  require = "";

  /**
   * The positional query parameters.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcQueryParam positionalQueryParams = 3;
   */
  positionalQueryParams: GrpcQueryParam[] = [];

  /**
   * The named query parameters.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcQueryParam> namedQueryParams = 4;
   */
  namedQueryParams: { [key: string]: GrpcQueryParam } = {};

  constructor(data?: PartialMessage<GrpcUpsertEntityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcUpsertEntityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entityMutation", kind: "message", T: GrpcEntityMutation },
    { no: 2, name: "require", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "positionalQueryParams", kind: "message", T: GrpcQueryParam, repeated: true },
    { no: 4, name: "namedQueryParams", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: GrpcQueryParam} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcUpsertEntityRequest {
    return new GrpcUpsertEntityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcUpsertEntityRequest {
    return new GrpcUpsertEntityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcUpsertEntityRequest {
    return new GrpcUpsertEntityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcUpsertEntityRequest | PlainMessage<GrpcUpsertEntityRequest> | undefined, b: GrpcUpsertEntityRequest | PlainMessage<GrpcUpsertEntityRequest> | undefined): boolean {
    return proto3.util.equals(GrpcUpsertEntityRequest, a, b);
  }
}

/**
 * Request for deleting an entity that should return the deleted entity with required richness.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDeleteEntityRequest
 */
export class GrpcDeleteEntityRequest extends Message<GrpcDeleteEntityRequest> {
  /**
   * Entity type of the entity to be deleted.
   *
   * @generated from field: string entityType = 1;
   */
  entityType = "";

  /**
   * Primary key of the entity to be deleted.
   *
   * @generated from field: google.protobuf.Int32Value primaryKey = 2;
   */
  primaryKey?: number;

  /**
   * The string part of the parametrised query require part.
   *
   * @generated from field: string require = 3;
   */
  require = "";

  /**
   * The positional query parameters.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcQueryParam positionalQueryParams = 4;
   */
  positionalQueryParams: GrpcQueryParam[] = [];

  /**
   * The named query parameters.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcQueryParam> namedQueryParams = 5;
   */
  namedQueryParams: { [key: string]: GrpcQueryParam } = {};

  constructor(data?: PartialMessage<GrpcDeleteEntityRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcDeleteEntityRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entityType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "primaryKey", kind: "message", T: Int32Value },
    { no: 3, name: "require", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "positionalQueryParams", kind: "message", T: GrpcQueryParam, repeated: true },
    { no: 5, name: "namedQueryParams", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: GrpcQueryParam} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcDeleteEntityRequest {
    return new GrpcDeleteEntityRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcDeleteEntityRequest {
    return new GrpcDeleteEntityRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcDeleteEntityRequest {
    return new GrpcDeleteEntityRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcDeleteEntityRequest | PlainMessage<GrpcDeleteEntityRequest> | undefined, b: GrpcDeleteEntityRequest | PlainMessage<GrpcDeleteEntityRequest> | undefined): boolean {
    return proto3.util.equals(GrpcDeleteEntityRequest, a, b);
  }
}

/**
 * Request for deleting a collection of entities specified by a query.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDeleteEntitiesRequest
 */
export class GrpcDeleteEntitiesRequest extends Message<GrpcDeleteEntitiesRequest> {
  /**
   * The string part of the parametrised query.
   *
   * @generated from field: string query = 1;
   */
  query = "";

  /**
   * The positional query parameters.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcQueryParam positionalQueryParams = 2;
   */
  positionalQueryParams: GrpcQueryParam[] = [];

  /**
   * The named query parameters.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcQueryParam> namedQueryParams = 3;
   */
  namedQueryParams: { [key: string]: GrpcQueryParam } = {};

  constructor(data?: PartialMessage<GrpcDeleteEntitiesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcDeleteEntitiesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "query", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "positionalQueryParams", kind: "message", T: GrpcQueryParam, repeated: true },
    { no: 3, name: "namedQueryParams", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: GrpcQueryParam} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcDeleteEntitiesRequest {
    return new GrpcDeleteEntitiesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcDeleteEntitiesRequest {
    return new GrpcDeleteEntitiesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcDeleteEntitiesRequest {
    return new GrpcDeleteEntitiesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcDeleteEntitiesRequest | PlainMessage<GrpcDeleteEntitiesRequest> | undefined, b: GrpcDeleteEntitiesRequest | PlainMessage<GrpcDeleteEntitiesRequest> | undefined): boolean {
    return proto3.util.equals(GrpcDeleteEntitiesRequest, a, b);
  }
}

/**
 * Response to UpsertEntity request. The used field is decided by the require block in the query.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcUpsertEntityResponse
 */
export class GrpcUpsertEntityResponse extends Message<GrpcUpsertEntityResponse> {
  /**
   * The upserted entity.
   *
   * @generated from oneof io.evitadb.externalApi.grpc.generated.GrpcUpsertEntityResponse.response
   */
  response: {
    /**
     * The upserted entity reference.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntityReference entityReference = 1;
     */
    value: GrpcEntityReference;
    case: "entityReference";
  } | {
    /**
     * The upserted entity.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcSealedEntity entity = 2;
     */
    value: GrpcSealedEntity;
    case: "entity";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GrpcUpsertEntityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcUpsertEntityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entityReference", kind: "message", T: GrpcEntityReference, oneof: "response" },
    { no: 2, name: "entity", kind: "message", T: GrpcSealedEntity, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcUpsertEntityResponse {
    return new GrpcUpsertEntityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcUpsertEntityResponse {
    return new GrpcUpsertEntityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcUpsertEntityResponse {
    return new GrpcUpsertEntityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcUpsertEntityResponse | PlainMessage<GrpcUpsertEntityResponse> | undefined, b: GrpcUpsertEntityResponse | PlainMessage<GrpcUpsertEntityResponse> | undefined): boolean {
    return proto3.util.equals(GrpcUpsertEntityResponse, a, b);
  }
}

/**
 * Response to DeleteEntity request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDeleteEntityResponse
 */
export class GrpcDeleteEntityResponse extends Message<GrpcDeleteEntityResponse> {
  /**
   * The deleted entity. The used field is decided by the require block in the query.
   *
   * @generated from oneof io.evitadb.externalApi.grpc.generated.GrpcDeleteEntityResponse.response
   */
  response: {
    /**
     * The deleted entity reference.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntityReference entityReference = 1;
     */
    value: GrpcEntityReference;
    case: "entityReference";
  } | {
    /**
     * The deleted entity.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcSealedEntity entity = 2;
     */
    value: GrpcSealedEntity;
    case: "entity";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GrpcDeleteEntityResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcDeleteEntityResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entityReference", kind: "message", T: GrpcEntityReference, oneof: "response" },
    { no: 2, name: "entity", kind: "message", T: GrpcSealedEntity, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcDeleteEntityResponse {
    return new GrpcDeleteEntityResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcDeleteEntityResponse {
    return new GrpcDeleteEntityResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcDeleteEntityResponse {
    return new GrpcDeleteEntityResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcDeleteEntityResponse | PlainMessage<GrpcDeleteEntityResponse> | undefined, b: GrpcDeleteEntityResponse | PlainMessage<GrpcDeleteEntityResponse> | undefined): boolean {
    return proto3.util.equals(GrpcDeleteEntityResponse, a, b);
  }
}

/**
 * Response to DeleteEntity request when hierarchy has been specified in filter.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDeleteEntityAndItsHierarchyResponse
 */
export class GrpcDeleteEntityAndItsHierarchyResponse extends Message<GrpcDeleteEntityAndItsHierarchyResponse> {
  /**
   * Count of deleted entities.
   *
   * @generated from field: int32 deletedEntities = 1;
   */
  deletedEntities = 0;

  /**
   * @generated from oneof io.evitadb.externalApi.grpc.generated.GrpcDeleteEntityAndItsHierarchyResponse.response
   */
  response: {
    /**
     * The deleted root entity reference.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntityReference deletedRootEntityReference = 2;
     */
    value: GrpcEntityReference;
    case: "deletedRootEntityReference";
  } | {
    /**
     * The deleted root entity.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcSealedEntity deletedRootEntity = 3;
     */
    value: GrpcSealedEntity;
    case: "deletedRootEntity";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GrpcDeleteEntityAndItsHierarchyResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcDeleteEntityAndItsHierarchyResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deletedEntities", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "deletedRootEntityReference", kind: "message", T: GrpcEntityReference, oneof: "response" },
    { no: 3, name: "deletedRootEntity", kind: "message", T: GrpcSealedEntity, oneof: "response" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcDeleteEntityAndItsHierarchyResponse {
    return new GrpcDeleteEntityAndItsHierarchyResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcDeleteEntityAndItsHierarchyResponse {
    return new GrpcDeleteEntityAndItsHierarchyResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcDeleteEntityAndItsHierarchyResponse {
    return new GrpcDeleteEntityAndItsHierarchyResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcDeleteEntityAndItsHierarchyResponse | PlainMessage<GrpcDeleteEntityAndItsHierarchyResponse> | undefined, b: GrpcDeleteEntityAndItsHierarchyResponse | PlainMessage<GrpcDeleteEntityAndItsHierarchyResponse> | undefined): boolean {
    return proto3.util.equals(GrpcDeleteEntityAndItsHierarchyResponse, a, b);
  }
}

/**
 * Response to DeleteEntities request that deletes all entities that match the sent query..
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDeleteEntitiesResponse
 */
export class GrpcDeleteEntitiesResponse extends Message<GrpcDeleteEntitiesResponse> {
  /**
   * Count of deleted entities.
   *
   * @generated from field: int32 deletedEntities = 1;
   */
  deletedEntities = 0;

  /**
   * The deleted entity bodies.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcSealedEntity deletedEntityBodies = 2;
   */
  deletedEntityBodies: GrpcSealedEntity[] = [];

  constructor(data?: PartialMessage<GrpcDeleteEntitiesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcDeleteEntitiesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "deletedEntities", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "deletedEntityBodies", kind: "message", T: GrpcSealedEntity, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcDeleteEntitiesResponse {
    return new GrpcDeleteEntitiesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcDeleteEntitiesResponse {
    return new GrpcDeleteEntitiesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcDeleteEntitiesResponse {
    return new GrpcDeleteEntitiesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcDeleteEntitiesResponse | PlainMessage<GrpcDeleteEntitiesResponse> | undefined, b: GrpcDeleteEntitiesResponse | PlainMessage<GrpcDeleteEntitiesResponse> | undefined): boolean {
    return proto3.util.equals(GrpcDeleteEntitiesResponse, a, b);
  }
}

/**
 * Request for opening a transaction.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcTransactionResponse
 */
export class GrpcTransactionResponse extends Message<GrpcTransactionResponse> {
  /**
   * The current version of the catalog the transaction is bound to.
   *
   * @generated from field: int64 catalogVersion = 1;
   */
  catalogVersion = protoInt64.zero;

  /**
   * The id of the opened transaction.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcUuid transactionId = 2;
   */
  transactionId?: GrpcUuid;

  constructor(data?: PartialMessage<GrpcTransactionResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcTransactionResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalogVersion", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "transactionId", kind: "message", T: GrpcUuid },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcTransactionResponse {
    return new GrpcTransactionResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcTransactionResponse {
    return new GrpcTransactionResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcTransactionResponse {
    return new GrpcTransactionResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcTransactionResponse | PlainMessage<GrpcTransactionResponse> | undefined, b: GrpcTransactionResponse | PlainMessage<GrpcTransactionResponse> | undefined): boolean {
    return proto3.util.equals(GrpcTransactionResponse, a, b);
  }
}

/**
 * Structure that supports storing all possible parameters that could be used within query.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcQueryParam
 */
export class GrpcQueryParam extends Message<GrpcQueryParam> {
  /**
   * The value of the parameter.
   *
   * @generated from oneof io.evitadb.externalApi.grpc.generated.GrpcQueryParam.queryParam
   */
  queryParam: {
    /**
     * The string value.
     *
     * @generated from field: string stringValue = 1;
     */
    value: string;
    case: "stringValue";
  } | {
    /**
     * The integer value.
     *
     * @generated from field: int32 integerValue = 2;
     */
    value: number;
    case: "integerValue";
  } | {
    /**
     * The long value.
     *
     * @generated from field: int64 longValue = 3;
     */
    value: bigint;
    case: "longValue";
  } | {
    /**
     * The boolean value.
     *
     * @generated from field: bool booleanValue = 4;
     */
    value: boolean;
    case: "booleanValue";
  } | {
    /**
     * The big decimal value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcBigDecimal bigDecimalValue = 5;
     */
    value: GrpcBigDecimal;
    case: "bigDecimalValue";
  } | {
    /**
     * The date time range value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcDateTimeRange dateTimeRangeValue = 6;
     */
    value: GrpcDateTimeRange;
    case: "dateTimeRangeValue";
  } | {
    /**
     * The integer number range value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcIntegerNumberRange integerNumberRangeValue = 7;
     */
    value: GrpcIntegerNumberRange;
    case: "integerNumberRangeValue";
  } | {
    /**
     * The long number range value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcLongNumberRange longNumberRangeValue = 8;
     */
    value: GrpcLongNumberRange;
    case: "longNumberRangeValue";
  } | {
    /**
     * The big decimal number range value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcBigDecimalNumberRange bigDecimalNumberRangeValue = 9;
     */
    value: GrpcBigDecimalNumberRange;
    case: "bigDecimalNumberRangeValue";
  } | {
    /**
     * The offset date time value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcOffsetDateTime offsetDateTimeValue = 10;
     */
    value: GrpcOffsetDateTime;
    case: "offsetDateTimeValue";
  } | {
    /**
     * The locale value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcLocale localeValue = 11;
     */
    value: GrpcLocale;
    case: "localeValue";
  } | {
    /**
     * The currency value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcCurrency currencyValue = 12;
     */
    value: GrpcCurrency;
    case: "currencyValue";
  } | {
    /**
     * The facet statistics depth enum value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcFacetStatisticsDepth facetStatisticsDepthValue = 13;
     */
    value: GrpcFacetStatisticsDepth;
    case: "facetStatisticsDepthValue";
  } | {
    /**
     * The query price mode enum value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcQueryPriceMode queryPriceModelValue = 14;
     */
    value: GrpcQueryPriceMode;
    case: "queryPriceModelValue";
  } | {
    /**
     * The price content mode enum value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcPriceContentMode priceContentModeValue = 15;
     */
    value: GrpcPriceContentMode;
    case: "priceContentModeValue";
  } | {
    /**
     * The attribute special value enum value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcAttributeSpecialValue attributeSpecialValue = 16;
     */
    value: GrpcAttributeSpecialValue;
    case: "attributeSpecialValue";
  } | {
    /**
     * The order direction enum value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcOrderDirection orderDirectionValue = 17;
     */
    value: GrpcOrderDirection;
    case: "orderDirectionValue";
  } | {
    /**
     * The empty hierarchical entity behaviour enum value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEmptyHierarchicalEntityBehaviour emptyHierarchicalEntityBehaviour = 18;
     */
    value: GrpcEmptyHierarchicalEntityBehaviour;
    case: "emptyHierarchicalEntityBehaviour";
  } | {
    /**
     * The statistics base enum value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcStatisticsBase statisticsBase = 19;
     */
    value: GrpcStatisticsBase;
    case: "statisticsBase";
  } | {
    /**
     * The statistics type enum value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcStatisticsType statisticsType = 20;
     */
    value: GrpcStatisticsType;
    case: "statisticsType";
  } | {
    /**
     * The histogram behavior enum value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcHistogramBehavior histogramBehavior = 21;
     */
    value: GrpcHistogramBehavior;
    case: "histogramBehavior";
  } | {
    /**
     * The managed references behaviour
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcManagedReferencesBehaviour managedReferencesBehaviour = 22;
     */
    value: GrpcManagedReferencesBehaviour;
    case: "managedReferencesBehaviour";
  } | {
    /**
     * The string array value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcStringArray stringArrayValue = 101;
     */
    value: GrpcStringArray;
    case: "stringArrayValue";
  } | {
    /**
     * The integer array value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcIntegerArray integerArrayValue = 102;
     */
    value: GrpcIntegerArray;
    case: "integerArrayValue";
  } | {
    /**
     * The long array value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcLongArray longArrayValue = 103;
     */
    value: GrpcLongArray;
    case: "longArrayValue";
  } | {
    /**
     * The boolean array value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcBooleanArray booleanArrayValue = 104;
     */
    value: GrpcBooleanArray;
    case: "booleanArrayValue";
  } | {
    /**
     * The big decimal array value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcBigDecimalArray bigDecimalArrayValue = 105;
     */
    value: GrpcBigDecimalArray;
    case: "bigDecimalArrayValue";
  } | {
    /**
     * The date time range array value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcDateTimeRangeArray dateTimeRangeArrayValue = 106;
     */
    value: GrpcDateTimeRangeArray;
    case: "dateTimeRangeArrayValue";
  } | {
    /**
     * The integer number range array value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcIntegerNumberRangeArray integerNumberRangeArrayValue = 107;
     */
    value: GrpcIntegerNumberRangeArray;
    case: "integerNumberRangeArrayValue";
  } | {
    /**
     * The long number range array value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcLongNumberRangeArray longNumberRangeArrayValue = 108;
     */
    value: GrpcLongNumberRangeArray;
    case: "longNumberRangeArrayValue";
  } | {
    /**
     * The big decimal number range array value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcBigDecimalNumberRangeArray bigDecimalNumberRangeArrayValue = 109;
     */
    value: GrpcBigDecimalNumberRangeArray;
    case: "bigDecimalNumberRangeArrayValue";
  } | {
    /**
     * The offset date time array value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcOffsetDateTimeArray offsetDateTimeArrayValue = 110;
     */
    value: GrpcOffsetDateTimeArray;
    case: "offsetDateTimeArrayValue";
  } | {
    /**
     * The locale array value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcLocaleArray localeArrayValue = 111;
     */
    value: GrpcLocaleArray;
    case: "localeArrayValue";
  } | {
    /**
     * The currency array value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcCurrencyArray currencyArrayValue = 112;
     */
    value: GrpcCurrencyArray;
    case: "currencyArrayValue";
  } | {
    /**
     * The facet statistics depth array value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcFacetStatisticsDepthArray facetStatisticsDepthArrayValue = 113;
     */
    value: GrpcFacetStatisticsDepthArray;
    case: "facetStatisticsDepthArrayValue";
  } | {
    /**
     * The query price mode array value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcQueryPriceModeArray queryPriceModelArrayValue = 114;
     */
    value: GrpcQueryPriceModeArray;
    case: "queryPriceModelArrayValue";
  } | {
    /**
     * The price content mode array value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcPriceContentModeArray priceContentModeArrayValue = 115;
     */
    value: GrpcPriceContentModeArray;
    case: "priceContentModeArrayValue";
  } | {
    /**
     * The attribute special value array value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcAttributeSpecialValueArray attributeSpecialArrayValue = 116;
     */
    value: GrpcAttributeSpecialValueArray;
    case: "attributeSpecialArrayValue";
  } | {
    /**
     * The order direction array value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcOrderDirectionArray orderDirectionArrayValue = 117;
     */
    value: GrpcOrderDirectionArray;
    case: "orderDirectionArrayValue";
  } | {
    /**
     * The empty hierarchical entity behaviour array value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEmptyHierarchicalEntityBehaviourArray emptyHierarchicalEntityBehaviourArrayValue = 118;
     */
    value: GrpcEmptyHierarchicalEntityBehaviourArray;
    case: "emptyHierarchicalEntityBehaviourArrayValue";
  } | {
    /**
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcStatisticsBaseArray statisticsBaseArrayValue = 119;
     */
    value: GrpcStatisticsBaseArray;
    case: "statisticsBaseArrayValue";
  } | {
    /**
     * The statistics type array value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcStatisticsTypeArray statisticsTypeArrayValue = 120;
     */
    value: GrpcStatisticsTypeArray;
    case: "statisticsTypeArrayValue";
  } | {
    /**
     * The histogram behavior enum value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcHistogramBehaviorTypeArray histogramBehaviorTypeArrayValue = 121;
     */
    value: GrpcHistogramBehaviorTypeArray;
    case: "histogramBehaviorTypeArrayValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GrpcQueryParam>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcQueryParam";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stringValue", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "queryParam" },
    { no: 2, name: "integerValue", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "queryParam" },
    { no: 3, name: "longValue", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "queryParam" },
    { no: 4, name: "booleanValue", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "queryParam" },
    { no: 5, name: "bigDecimalValue", kind: "message", T: GrpcBigDecimal, oneof: "queryParam" },
    { no: 6, name: "dateTimeRangeValue", kind: "message", T: GrpcDateTimeRange, oneof: "queryParam" },
    { no: 7, name: "integerNumberRangeValue", kind: "message", T: GrpcIntegerNumberRange, oneof: "queryParam" },
    { no: 8, name: "longNumberRangeValue", kind: "message", T: GrpcLongNumberRange, oneof: "queryParam" },
    { no: 9, name: "bigDecimalNumberRangeValue", kind: "message", T: GrpcBigDecimalNumberRange, oneof: "queryParam" },
    { no: 10, name: "offsetDateTimeValue", kind: "message", T: GrpcOffsetDateTime, oneof: "queryParam" },
    { no: 11, name: "localeValue", kind: "message", T: GrpcLocale, oneof: "queryParam" },
    { no: 12, name: "currencyValue", kind: "message", T: GrpcCurrency, oneof: "queryParam" },
    { no: 13, name: "facetStatisticsDepthValue", kind: "enum", T: proto3.getEnumType(GrpcFacetStatisticsDepth), oneof: "queryParam" },
    { no: 14, name: "queryPriceModelValue", kind: "enum", T: proto3.getEnumType(GrpcQueryPriceMode), oneof: "queryParam" },
    { no: 15, name: "priceContentModeValue", kind: "enum", T: proto3.getEnumType(GrpcPriceContentMode), oneof: "queryParam" },
    { no: 16, name: "attributeSpecialValue", kind: "enum", T: proto3.getEnumType(GrpcAttributeSpecialValue), oneof: "queryParam" },
    { no: 17, name: "orderDirectionValue", kind: "enum", T: proto3.getEnumType(GrpcOrderDirection), oneof: "queryParam" },
    { no: 18, name: "emptyHierarchicalEntityBehaviour", kind: "enum", T: proto3.getEnumType(GrpcEmptyHierarchicalEntityBehaviour), oneof: "queryParam" },
    { no: 19, name: "statisticsBase", kind: "enum", T: proto3.getEnumType(GrpcStatisticsBase), oneof: "queryParam" },
    { no: 20, name: "statisticsType", kind: "enum", T: proto3.getEnumType(GrpcStatisticsType), oneof: "queryParam" },
    { no: 21, name: "histogramBehavior", kind: "enum", T: proto3.getEnumType(GrpcHistogramBehavior), oneof: "queryParam" },
    { no: 22, name: "managedReferencesBehaviour", kind: "enum", T: proto3.getEnumType(GrpcManagedReferencesBehaviour), oneof: "queryParam" },
    { no: 101, name: "stringArrayValue", kind: "message", T: GrpcStringArray, oneof: "queryParam" },
    { no: 102, name: "integerArrayValue", kind: "message", T: GrpcIntegerArray, oneof: "queryParam" },
    { no: 103, name: "longArrayValue", kind: "message", T: GrpcLongArray, oneof: "queryParam" },
    { no: 104, name: "booleanArrayValue", kind: "message", T: GrpcBooleanArray, oneof: "queryParam" },
    { no: 105, name: "bigDecimalArrayValue", kind: "message", T: GrpcBigDecimalArray, oneof: "queryParam" },
    { no: 106, name: "dateTimeRangeArrayValue", kind: "message", T: GrpcDateTimeRangeArray, oneof: "queryParam" },
    { no: 107, name: "integerNumberRangeArrayValue", kind: "message", T: GrpcIntegerNumberRangeArray, oneof: "queryParam" },
    { no: 108, name: "longNumberRangeArrayValue", kind: "message", T: GrpcLongNumberRangeArray, oneof: "queryParam" },
    { no: 109, name: "bigDecimalNumberRangeArrayValue", kind: "message", T: GrpcBigDecimalNumberRangeArray, oneof: "queryParam" },
    { no: 110, name: "offsetDateTimeArrayValue", kind: "message", T: GrpcOffsetDateTimeArray, oneof: "queryParam" },
    { no: 111, name: "localeArrayValue", kind: "message", T: GrpcLocaleArray, oneof: "queryParam" },
    { no: 112, name: "currencyArrayValue", kind: "message", T: GrpcCurrencyArray, oneof: "queryParam" },
    { no: 113, name: "facetStatisticsDepthArrayValue", kind: "message", T: GrpcFacetStatisticsDepthArray, oneof: "queryParam" },
    { no: 114, name: "queryPriceModelArrayValue", kind: "message", T: GrpcQueryPriceModeArray, oneof: "queryParam" },
    { no: 115, name: "priceContentModeArrayValue", kind: "message", T: GrpcPriceContentModeArray, oneof: "queryParam" },
    { no: 116, name: "attributeSpecialArrayValue", kind: "message", T: GrpcAttributeSpecialValueArray, oneof: "queryParam" },
    { no: 117, name: "orderDirectionArrayValue", kind: "message", T: GrpcOrderDirectionArray, oneof: "queryParam" },
    { no: 118, name: "emptyHierarchicalEntityBehaviourArrayValue", kind: "message", T: GrpcEmptyHierarchicalEntityBehaviourArray, oneof: "queryParam" },
    { no: 119, name: "statisticsBaseArrayValue", kind: "message", T: GrpcStatisticsBaseArray, oneof: "queryParam" },
    { no: 120, name: "statisticsTypeArrayValue", kind: "message", T: GrpcStatisticsTypeArray, oneof: "queryParam" },
    { no: 121, name: "histogramBehaviorTypeArrayValue", kind: "message", T: GrpcHistogramBehaviorTypeArray, oneof: "queryParam" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcQueryParam {
    return new GrpcQueryParam().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcQueryParam {
    return new GrpcQueryParam().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcQueryParam {
    return new GrpcQueryParam().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcQueryParam | PlainMessage<GrpcQueryParam> | undefined, b: GrpcQueryParam | PlainMessage<GrpcQueryParam> | undefined): boolean {
    return proto3.util.equals(GrpcQueryParam, a, b);
  }
}

