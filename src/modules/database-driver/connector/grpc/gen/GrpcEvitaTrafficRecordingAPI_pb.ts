// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file GrpcEvitaTrafficRecordingAPI.proto (package io.evitadb.externalApi.grpc.generated, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Int64Value, Message, proto3, StringValue } from "@bufbuild/protobuf";
import { GrpcTrafficRecord, GrpcTrafficRecordingCaptureCriteria } from "./GrpcTrafficRecording_pb.js";
import { GrpcTaskStatus, GrpcUuid } from "./GrpcEvitaDataTypes_pb.js";

/**
 * Request to GetTrafficHistoryList request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GetTrafficHistoryListRequest
 */
export class GetTrafficHistoryListRequest extends Message<GetTrafficHistoryListRequest> {
  /**
   * The limit of records to return
   *
   * @generated from field: int32 limit = 1;
   */
  limit = 0;

  /**
   * The criteria of the traffic recording, allows to define constraints on the returned records
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcTrafficRecordingCaptureCriteria criteria = 2;
   */
  criteria?: GrpcTrafficRecordingCaptureCriteria;

  constructor(data?: PartialMessage<GetTrafficHistoryListRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GetTrafficHistoryListRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "criteria", kind: "message", T: GrpcTrafficRecordingCaptureCriteria },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTrafficHistoryListRequest {
    return new GetTrafficHistoryListRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTrafficHistoryListRequest {
    return new GetTrafficHistoryListRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTrafficHistoryListRequest {
    return new GetTrafficHistoryListRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTrafficHistoryListRequest | PlainMessage<GetTrafficHistoryListRequest> | undefined, b: GetTrafficHistoryListRequest | PlainMessage<GetTrafficHistoryListRequest> | undefined): boolean {
    return proto3.util.equals(GetTrafficHistoryListRequest, a, b);
  }
}

/**
 * Response to GetTrafficHistoryList request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GetTrafficHistoryListResponse
 */
export class GetTrafficHistoryListResponse extends Message<GetTrafficHistoryListResponse> {
  /**
   * The list of traffic records that match the criteria
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcTrafficRecord trafficRecord = 1;
   */
  trafficRecord: GrpcTrafficRecord[] = [];

  constructor(data?: PartialMessage<GetTrafficHistoryListResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GetTrafficHistoryListResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "trafficRecord", kind: "message", T: GrpcTrafficRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTrafficHistoryListResponse {
    return new GetTrafficHistoryListResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTrafficHistoryListResponse {
    return new GetTrafficHistoryListResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTrafficHistoryListResponse {
    return new GetTrafficHistoryListResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTrafficHistoryListResponse | PlainMessage<GetTrafficHistoryListResponse> | undefined, b: GetTrafficHistoryListResponse | PlainMessage<GetTrafficHistoryListResponse> | undefined): boolean {
    return proto3.util.equals(GetTrafficHistoryListResponse, a, b);
  }
}

/**
 * Request to GetTrafficHistory request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GetTrafficHistoryRequest
 */
export class GetTrafficHistoryRequest extends Message<GetTrafficHistoryRequest> {
  /**
   * The criteria of the traffic recording, allows to define constraints on the returned records
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcTrafficRecordingCaptureCriteria criteria = 1;
   */
  criteria?: GrpcTrafficRecordingCaptureCriteria;

  constructor(data?: PartialMessage<GetTrafficHistoryRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GetTrafficHistoryRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "criteria", kind: "message", T: GrpcTrafficRecordingCaptureCriteria },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTrafficHistoryRequest {
    return new GetTrafficHistoryRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTrafficHistoryRequest {
    return new GetTrafficHistoryRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTrafficHistoryRequest {
    return new GetTrafficHistoryRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTrafficHistoryRequest | PlainMessage<GetTrafficHistoryRequest> | undefined, b: GetTrafficHistoryRequest | PlainMessage<GetTrafficHistoryRequest> | undefined): boolean {
    return proto3.util.equals(GetTrafficHistoryRequest, a, b);
  }
}

/**
 * Response to GetTrafficHistory request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GetTrafficHistoryResponse
 */
export class GetTrafficHistoryResponse extends Message<GetTrafficHistoryResponse> {
  /**
   * The list of traffic records that match the criteria
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcTrafficRecord trafficRecord = 1;
   */
  trafficRecord: GrpcTrafficRecord[] = [];

  constructor(data?: PartialMessage<GetTrafficHistoryResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GetTrafficHistoryResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "trafficRecord", kind: "message", T: GrpcTrafficRecord, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTrafficHistoryResponse {
    return new GetTrafficHistoryResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTrafficHistoryResponse {
    return new GetTrafficHistoryResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTrafficHistoryResponse {
    return new GetTrafficHistoryResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTrafficHistoryResponse | PlainMessage<GetTrafficHistoryResponse> | undefined, b: GetTrafficHistoryResponse | PlainMessage<GetTrafficHistoryResponse> | undefined): boolean {
    return proto3.util.equals(GetTrafficHistoryResponse, a, b);
  }
}

/**
 * Response to GetTrafficRecordingLabelsNamesOrderedByCardinality request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GetTrafficRecordingLabelNamesRequest
 */
export class GetTrafficRecordingLabelNamesRequest extends Message<GetTrafficRecordingLabelNamesRequest> {
  /**
   * The limit of records to return
   *
   * @generated from field: int32 limit = 1;
   */
  limit = 0;

  /**
   * Allows to filter the returned labels by the name prefix
   *
   * @generated from field: google.protobuf.StringValue nameStartsWith = 2;
   */
  nameStartsWith?: string;

  constructor(data?: PartialMessage<GetTrafficRecordingLabelNamesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GetTrafficRecordingLabelNamesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "nameStartsWith", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTrafficRecordingLabelNamesRequest {
    return new GetTrafficRecordingLabelNamesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTrafficRecordingLabelNamesRequest {
    return new GetTrafficRecordingLabelNamesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTrafficRecordingLabelNamesRequest {
    return new GetTrafficRecordingLabelNamesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTrafficRecordingLabelNamesRequest | PlainMessage<GetTrafficRecordingLabelNamesRequest> | undefined, b: GetTrafficRecordingLabelNamesRequest | PlainMessage<GetTrafficRecordingLabelNamesRequest> | undefined): boolean {
    return proto3.util.equals(GetTrafficRecordingLabelNamesRequest, a, b);
  }
}

/**
 * Response to GetTrafficRecordingLabelsNamesOrderedByCardinality response.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GetTrafficRecordingLabelNamesResponse
 */
export class GetTrafficRecordingLabelNamesResponse extends Message<GetTrafficRecordingLabelNamesResponse> {
  /**
   * The list of labels names that match the criteria
   *
   * @generated from field: repeated string labelName = 1;
   */
  labelName: string[] = [];

  constructor(data?: PartialMessage<GetTrafficRecordingLabelNamesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GetTrafficRecordingLabelNamesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "labelName", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTrafficRecordingLabelNamesResponse {
    return new GetTrafficRecordingLabelNamesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTrafficRecordingLabelNamesResponse {
    return new GetTrafficRecordingLabelNamesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTrafficRecordingLabelNamesResponse {
    return new GetTrafficRecordingLabelNamesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTrafficRecordingLabelNamesResponse | PlainMessage<GetTrafficRecordingLabelNamesResponse> | undefined, b: GetTrafficRecordingLabelNamesResponse | PlainMessage<GetTrafficRecordingLabelNamesResponse> | undefined): boolean {
    return proto3.util.equals(GetTrafficRecordingLabelNamesResponse, a, b);
  }
}

/**
 * Response to GetTrafficRecordingLabelsValuesOrderedByCardinality request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GetTrafficRecordingValuesNamesRequest
 */
export class GetTrafficRecordingValuesNamesRequest extends Message<GetTrafficRecordingValuesNamesRequest> {
  /**
   * The limit of records to return
   *
   * @generated from field: int32 limit = 1;
   */
  limit = 0;

  /**
   * The name of the label to get the values for
   *
   * @generated from field: string labelName = 2;
   */
  labelName = "";

  /**
   * Allows to filter the returned labels by the name prefix
   *
   * @generated from field: google.protobuf.StringValue valueStartsWith = 3;
   */
  valueStartsWith?: string;

  constructor(data?: PartialMessage<GetTrafficRecordingValuesNamesRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GetTrafficRecordingValuesNamesRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "labelName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "valueStartsWith", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTrafficRecordingValuesNamesRequest {
    return new GetTrafficRecordingValuesNamesRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTrafficRecordingValuesNamesRequest {
    return new GetTrafficRecordingValuesNamesRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTrafficRecordingValuesNamesRequest {
    return new GetTrafficRecordingValuesNamesRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GetTrafficRecordingValuesNamesRequest | PlainMessage<GetTrafficRecordingValuesNamesRequest> | undefined, b: GetTrafficRecordingValuesNamesRequest | PlainMessage<GetTrafficRecordingValuesNamesRequest> | undefined): boolean {
    return proto3.util.equals(GetTrafficRecordingValuesNamesRequest, a, b);
  }
}

/**
 * Response to GetTrafficRecordingLabelsValuesOrderedByCardinality response.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GetTrafficRecordingValuesNamesResponse
 */
export class GetTrafficRecordingValuesNamesResponse extends Message<GetTrafficRecordingValuesNamesResponse> {
  /**
   * The list of labels values that match the criteria
   *
   * @generated from field: repeated string labelValue = 1;
   */
  labelValue: string[] = [];

  constructor(data?: PartialMessage<GetTrafficRecordingValuesNamesResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GetTrafficRecordingValuesNamesResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "labelValue", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTrafficRecordingValuesNamesResponse {
    return new GetTrafficRecordingValuesNamesResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTrafficRecordingValuesNamesResponse {
    return new GetTrafficRecordingValuesNamesResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTrafficRecordingValuesNamesResponse {
    return new GetTrafficRecordingValuesNamesResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTrafficRecordingValuesNamesResponse | PlainMessage<GetTrafficRecordingValuesNamesResponse> | undefined, b: GetTrafficRecordingValuesNamesResponse | PlainMessage<GetTrafficRecordingValuesNamesResponse> | undefined): boolean {
    return proto3.util.equals(GetTrafficRecordingValuesNamesResponse, a, b);
  }
}

/**
 * Request to StartTrafficRecording request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcStartTrafficRecordingRequest
 */
export class GrpcStartTrafficRecordingRequest extends Message<GrpcStartTrafficRecordingRequest> {
  /**
   * The sampling rate of the traffic recording (100 means all records will be recorded, 1 means 1% of records will be recorded)
   *
   * @generated from field: int32 samplingRate = 1;
   */
  samplingRate = 0;

  /**
   * If true the recording will be exported to a file, otherwise only internal ring buffer will be made available for
   * the time the traffic recording is running.
   *
   * @generated from field: bool exportFile = 2;
   */
  exportFile = false;

  /**
   * The duration of the recording in milliseconds, after this time the recording will be stopped automatically.
   *
   * @generated from field: google.protobuf.Int64Value maxDurationInMilliseconds = 3;
   */
  maxDurationInMilliseconds?: bigint;

  /**
   * The size of the recording in bytes, after this size the recording will be stopped automatically.
   *
   * @generated from field: google.protobuf.Int64Value maxFileSizeInBytes = 4;
   */
  maxFileSizeInBytes?: bigint;

  /**
   * The size of the chunk file in bytes. Individual files in the export file will be approximately this size.
   *
   * @generated from field: google.protobuf.Int64Value chunkFileSizeInBytes = 5;
   */
  chunkFileSizeInBytes?: bigint;

  constructor(data?: PartialMessage<GrpcStartTrafficRecordingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcStartTrafficRecordingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "samplingRate", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "exportFile", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 3, name: "maxDurationInMilliseconds", kind: "message", T: Int64Value },
    { no: 4, name: "maxFileSizeInBytes", kind: "message", T: Int64Value },
    { no: 5, name: "chunkFileSizeInBytes", kind: "message", T: Int64Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcStartTrafficRecordingRequest {
    return new GrpcStartTrafficRecordingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcStartTrafficRecordingRequest {
    return new GrpcStartTrafficRecordingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcStartTrafficRecordingRequest {
    return new GrpcStartTrafficRecordingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcStartTrafficRecordingRequest | PlainMessage<GrpcStartTrafficRecordingRequest> | undefined, b: GrpcStartTrafficRecordingRequest | PlainMessage<GrpcStartTrafficRecordingRequest> | undefined): boolean {
    return proto3.util.equals(GrpcStartTrafficRecordingRequest, a, b);
  }
}

/**
 * Request to StopTrafficRecording request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcStopTrafficRecordingRequest
 */
export class GrpcStopTrafficRecordingRequest extends Message<GrpcStopTrafficRecordingRequest> {
  /**
   * The ID of the task that started the recording
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcUuid taskStatusId = 1;
   */
  taskStatusId?: GrpcUuid;

  constructor(data?: PartialMessage<GrpcStopTrafficRecordingRequest>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcStopTrafficRecordingRequest";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "taskStatusId", kind: "message", T: GrpcUuid },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcStopTrafficRecordingRequest {
    return new GrpcStopTrafficRecordingRequest().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcStopTrafficRecordingRequest {
    return new GrpcStopTrafficRecordingRequest().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcStopTrafficRecordingRequest {
    return new GrpcStopTrafficRecordingRequest().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcStopTrafficRecordingRequest | PlainMessage<GrpcStopTrafficRecordingRequest> | undefined, b: GrpcStopTrafficRecordingRequest | PlainMessage<GrpcStopTrafficRecordingRequest> | undefined): boolean {
    return proto3.util.equals(GrpcStopTrafficRecordingRequest, a, b);
  }
}

/**
 * Response to StartTrafficRecording and  request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GetTrafficRecordingStatusResponse
 */
export class GetTrafficRecordingStatusResponse extends Message<GetTrafficRecordingStatusResponse> {
  /**
   * The status of the recording task
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcTaskStatus taskStatus = 1;
   */
  taskStatus?: GrpcTaskStatus;

  constructor(data?: PartialMessage<GetTrafficRecordingStatusResponse>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GetTrafficRecordingStatusResponse";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "taskStatus", kind: "message", T: GrpcTaskStatus },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GetTrafficRecordingStatusResponse {
    return new GetTrafficRecordingStatusResponse().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GetTrafficRecordingStatusResponse {
    return new GetTrafficRecordingStatusResponse().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GetTrafficRecordingStatusResponse {
    return new GetTrafficRecordingStatusResponse().fromJsonString(jsonString, options);
  }

  static equals(a: GetTrafficRecordingStatusResponse | PlainMessage<GetTrafficRecordingStatusResponse> | undefined, b: GetTrafficRecordingStatusResponse | PlainMessage<GetTrafficRecordingStatusResponse> | undefined): boolean {
    return proto3.util.equals(GetTrafficRecordingStatusResponse, a, b);
  }
}

