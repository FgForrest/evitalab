// @generated by protoc-gen-es v2.5.2 with parameter "target=ts"
// @generated from file GrpcEntity.proto (package io.evitadb.externalApi.grpc.generated, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { GrpcLocalizedAttribute } from "./GrpcAttribute_pb";
import { file_GrpcAttribute } from "./GrpcAttribute_pb";
import type { GrpcPrice } from "./GrpcPrice_pb";
import { file_GrpcPrice } from "./GrpcPrice_pb";
import type { GrpcLocalizedAssociatedData } from "./GrpcAssociatedData_pb";
import { file_GrpcAssociatedData } from "./GrpcAssociatedData_pb";
import type { GrpcCardinality, GrpcEntityScope, GrpcPriceInnerRecordHandling } from "./GrpcEnums_pb";
import { file_GrpcEnums } from "./GrpcEnums_pb";
import type { GrpcEvitaAssociatedDataValue, GrpcEvitaValue, GrpcLocale } from "./GrpcEvitaDataTypes_pb";
import { file_GrpcEvitaDataTypes } from "./GrpcEvitaDataTypes_pb";
import { file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file GrpcEntity.proto.
 */
export const file_GrpcEntity: GenFile = /*@__PURE__*/
  fileDesc("ChBHcnBjRW50aXR5LnByb3RvEiVpby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkIokBChNHcnBjRW50aXR5UmVmZXJlbmNlEhIKCmVudGl0eVR5cGUYASABKAkSEgoKcHJpbWFyeUtleRgCIAEoBRITCgd2ZXJzaW9uGAMgASgFQgIYARI1ChByZWZlcmVuY2VWZXJzaW9uGAQgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUisgEKHUdycGNFbnRpdHlSZWZlcmVuY2VXaXRoUGFyZW50EhIKCmVudGl0eVR5cGUYASABKAkSEgoKcHJpbWFyeUtleRgCIAEoBRITCgd2ZXJzaW9uGAMgASgFQgIYARJUCgZwYXJlbnQYBCABKAsyRC5pby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkLkdycGNFbnRpdHlSZWZlcmVuY2VXaXRoUGFyZW50IoURChBHcnBjU2VhbGVkRW50aXR5EhIKCmVudGl0eVR5cGUYASABKAkSEgoKcHJpbWFyeUtleRgCIAEoBRIPCgd2ZXJzaW9uGAMgASgFEhUKDXNjaGVtYVZlcnNpb24YBCABKAUSKwoGcGFyZW50GAUgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUSXQoPcGFyZW50UmVmZXJlbmNlGAYgASgLMkQuaW8uZXZpdGFkYi5leHRlcm5hbEFwaS5ncnBjLmdlbmVyYXRlZC5HcnBjRW50aXR5UmVmZXJlbmNlV2l0aFBhcmVudBJNCgxwYXJlbnRFbnRpdHkYByABKAsyNy5pby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkLkdycGNTZWFsZWRFbnRpdHkSZwoQZ2xvYmFsQXR0cmlidXRlcxgIIAMoCzJNLmlvLmV2aXRhZGIuZXh0ZXJuYWxBcGkuZ3JwYy5nZW5lcmF0ZWQuR3JwY1NlYWxlZEVudGl0eS5HbG9iYWxBdHRyaWJ1dGVzRW50cnkSbQoTbG9jYWxpemVkQXR0cmlidXRlcxgJIAMoCzJQLmlvLmV2aXRhZGIuZXh0ZXJuYWxBcGkuZ3JwYy5nZW5lcmF0ZWQuR3JwY1NlYWxlZEVudGl0eS5Mb2NhbGl6ZWRBdHRyaWJ1dGVzRW50cnkSQAoGcHJpY2VzGAogAygLMjAuaW8uZXZpdGFkYi5leHRlcm5hbEFwaS5ncnBjLmdlbmVyYXRlZC5HcnBjUHJpY2USRgoMcHJpY2VGb3JTYWxlGAsgASgLMjAuaW8uZXZpdGFkYi5leHRlcm5hbEFwaS5ncnBjLmdlbmVyYXRlZC5HcnBjUHJpY2USZQoYcHJpY2VJbm5lclJlY29yZEhhbmRsaW5nGAwgASgOMkMuaW8uZXZpdGFkYi5leHRlcm5hbEFwaS5ncnBjLmdlbmVyYXRlZC5HcnBjUHJpY2VJbm5lclJlY29yZEhhbmRsaW5nEkgKCnJlZmVyZW5jZXMYDSADKAsyNC5pby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkLkdycGNSZWZlcmVuY2USbwoUZ2xvYmFsQXNzb2NpYXRlZERhdGEYDiADKAsyUS5pby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkLkdycGNTZWFsZWRFbnRpdHkuR2xvYmFsQXNzb2NpYXRlZERhdGFFbnRyeRJ1Chdsb2NhbGl6ZWRBc3NvY2lhdGVkRGF0YRgPIAMoCzJULmlvLmV2aXRhZGIuZXh0ZXJuYWxBcGkuZ3JwYy5nZW5lcmF0ZWQuR3JwY1NlYWxlZEVudGl0eS5Mb2NhbGl6ZWRBc3NvY2lhdGVkRGF0YUVudHJ5EkIKB2xvY2FsZXMYECADKAsyMS5pby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkLkdycGNMb2NhbGUSRQoFc2NvcGUYESABKA4yNi5pby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkLkdycGNFbnRpdHlTY29wZRJ3ChhyZWZlcmVuY2VPZmZzZXRBbmRMaW1pdHMYEiADKAsyVS5pby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkLkdycGNTZWFsZWRFbnRpdHkuUmVmZXJlbmNlT2Zmc2V0QW5kTGltaXRzRW50cnkSawoSYWNjb21wYW55aW5nUHJpY2VzGBMgAygLMk8uaW8uZXZpdGFkYi5leHRlcm5hbEFwaS5ncnBjLmdlbmVyYXRlZC5HcnBjU2VhbGVkRW50aXR5LkFjY29tcGFueWluZ1ByaWNlc0VudHJ5Gm4KFUdsb2JhbEF0dHJpYnV0ZXNFbnRyeRILCgNrZXkYASABKAkSRAoFdmFsdWUYAiABKAsyNS5pby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkLkdycGNFdml0YVZhbHVlOgI4ARp5ChhMb2NhbGl6ZWRBdHRyaWJ1dGVzRW50cnkSCwoDa2V5GAEgASgJEkwKBXZhbHVlGAIgASgLMj0uaW8uZXZpdGFkYi5leHRlcm5hbEFwaS5ncnBjLmdlbmVyYXRlZC5HcnBjTG9jYWxpemVkQXR0cmlidXRlOgI4ARqAAQoZR2xvYmFsQXNzb2NpYXRlZERhdGFFbnRyeRILCgNrZXkYASABKAkSUgoFdmFsdWUYAiABKAsyQy5pby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkLkdycGNFdml0YUFzc29jaWF0ZWREYXRhVmFsdWU6AjgBGoIBChxMb2NhbGl6ZWRBc3NvY2lhdGVkRGF0YUVudHJ5EgsKA2tleRgBIAEoCRJRCgV2YWx1ZRgCIAEoCzJCLmlvLmV2aXRhZGIuZXh0ZXJuYWxBcGkuZ3JwYy5nZW5lcmF0ZWQuR3JwY0xvY2FsaXplZEFzc29jaWF0ZWREYXRhOgI4ARp6Ch1SZWZlcmVuY2VPZmZzZXRBbmRMaW1pdHNFbnRyeRILCgNrZXkYASABKAkSSAoFdmFsdWUYAiABKAsyOS5pby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkLkdycGNPZmZzZXRBbmRMaW1pdDoCOAEaawoXQWNjb21wYW55aW5nUHJpY2VzRW50cnkSCwoDa2V5GAEgASgJEj8KBXZhbHVlGAIgASgLMjAuaW8uZXZpdGFkYi5leHRlcm5hbEFwaS5ncnBjLmdlbmVyYXRlZC5HcnBjUHJpY2U6AjgBIucBChBHcnBjQmluYXJ5RW50aXR5EhIKCmVudGl0eVR5cGUYASABKAkSEgoKcHJpbWFyeUtleRgCIAEoBRIVCg1zY2hlbWFWZXJzaW9uGAMgASgFEhkKEWVudGl0eVN0b3JhZ2VQYXJ0GAQgASgMEh0KFWF0dHJpYnV0ZVN0b3JhZ2VQYXJ0cxgFIAMoDBIiChphc3NvY2lhdGVkRGF0YVN0b3JhZ2VQYXJ0cxgGIAMoDBIYChBwcmljZVN0b3JhZ2VQYXJ0GAcgASgMEhwKFHJlZmVyZW5jZVN0b3JhZ2VQYXJ0GAggASgMIu4HCg1HcnBjUmVmZXJlbmNlEhUKDXJlZmVyZW5jZU5hbWUYASABKAkSDwoHdmVyc2lvbhgCIAEoBRJdChlyZWZlcmVuY2VkRW50aXR5UmVmZXJlbmNlGAMgASgLMjouaW8uZXZpdGFkYi5leHRlcm5hbEFwaS5ncnBjLmdlbmVyYXRlZC5HcnBjRW50aXR5UmVmZXJlbmNlElEKEHJlZmVyZW5jZWRFbnRpdHkYBCABKAsyNy5pby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkLkdycGNTZWFsZWRFbnRpdHkSZAoeZ3JvdXBSZWZlcmVuY2VkRW50aXR5UmVmZXJlbmNlGAUgASgLMjouaW8uZXZpdGFkYi5leHRlcm5hbEFwaS5ncnBjLmdlbmVyYXRlZC5HcnBjRW50aXR5UmVmZXJlbmNlSAASWAoVZ3JvdXBSZWZlcmVuY2VkRW50aXR5GAYgASgLMjcuaW8uZXZpdGFkYi5leHRlcm5hbEFwaS5ncnBjLmdlbmVyYXRlZC5HcnBjU2VhbGVkRW50aXR5SAASZAoQZ2xvYmFsQXR0cmlidXRlcxgHIAMoCzJKLmlvLmV2aXRhZGIuZXh0ZXJuYWxBcGkuZ3JwYy5nZW5lcmF0ZWQuR3JwY1JlZmVyZW5jZS5HbG9iYWxBdHRyaWJ1dGVzRW50cnkSagoTbG9jYWxpemVkQXR0cmlidXRlcxgIIAMoCzJNLmlvLmV2aXRhZGIuZXh0ZXJuYWxBcGkuZ3JwYy5nZW5lcmF0ZWQuR3JwY1JlZmVyZW5jZS5Mb2NhbGl6ZWRBdHRyaWJ1dGVzRW50cnkSVAoUcmVmZXJlbmNlQ2FyZGluYWxpdHkYCSABKA4yNi5pby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkLkdycGNDYXJkaW5hbGl0eRIaChJpbnRlcm5hbFByaW1hcnlLZXkYCiABKAUabgoVR2xvYmFsQXR0cmlidXRlc0VudHJ5EgsKA2tleRgBIAEoCRJECgV2YWx1ZRgCIAEoCzI1LmlvLmV2aXRhZGIuZXh0ZXJuYWxBcGkuZ3JwYy5nZW5lcmF0ZWQuR3JwY0V2aXRhVmFsdWU6AjgBGnkKGExvY2FsaXplZEF0dHJpYnV0ZXNFbnRyeRILCgNrZXkYASABKAkSTAoFdmFsdWUYAiABKAsyPS5pby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkLkdycGNMb2NhbGl6ZWRBdHRyaWJ1dGU6AjgBQhQKEmdyb3VwUmVmZXJlbmNlVHlwZSJ5ChJHcnBjT2Zmc2V0QW5kTGltaXQSDgoGb2Zmc2V0GAEgASgFEg0KBWxpbWl0GAIgASgFEhIKCnBhZ2VOdW1iZXIYAyABKAUSFgoObGFzdFBhZ2VOdW1iZXIYBCABKAUSGAoQdG90YWxSZWNvcmRDb3VudBgFIAEoBUL2AQopY29tLmlvLmV2aXRhZGIuZXh0ZXJuYWxBcGkuZ3JwYy5nZW5lcmF0ZWRCD0dycGNFbnRpdHlQcm90b1ABogIFSUVFR0eqAiVJby5Fdml0YWRiLkV4dGVybmFsQXBpLkdycGMuR2VuZXJhdGVkygIlSW9cRXZpdGFkYlxFeHRlcm5hbEFwaVxHcnBjXEdlbmVyYXRlZOICMUlvXEV2aXRhZGJcRXh0ZXJuYWxBcGlcR3JwY1xHZW5lcmF0ZWRcR1BCTWV0YWRhdGHqAilJbzo6RXZpdGFkYjo6RXh0ZXJuYWxBcGk6OkdycGM6OkdlbmVyYXRlZGIGcHJvdG8z", [file_GrpcAttribute, file_GrpcPrice, file_GrpcAssociatedData, file_GrpcEnums, file_GrpcEvitaDataTypes, file_google_protobuf_wrappers]);

/**
 * This type represents a reference to any Evita entity and that is returned by default for all
 * queries that don't require loading additional data.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEntityReference
 */
export type GrpcEntityReference = Message<"io.evitadb.externalApi.grpc.generated.GrpcEntityReference"> & {
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   * @generated from field: string entityType = 1;
   */
  entityType: string;

  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   * @generated from field: int32 primaryKey = 2;
   */
  primaryKey: number;

  /**
   * value is deprecated, it was available only for entity references used in entity body, in other use-cases it was left
   * as zero - which was a mistake in the design.
   * in order to get the entity version you need to fetch the entity itself (with entity body).
   *
   * @generated from field: int32 version = 3 [deprecated = true];
   * @deprecated
   */
  version: number;

  /**
   * Contains version of this reference and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   * @generated from field: google.protobuf.Int32Value referenceVersion = 4;
   */
  referenceVersion?: number;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcEntityReference.
 * Use `create(GrpcEntityReferenceSchema)` to create a new message.
 */
export const GrpcEntityReferenceSchema: GenMessage<GrpcEntityReference> = /*@__PURE__*/
  messageDesc(file_GrpcEntity, 0);

/**
 * Entity reference which contains information about parent entity.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEntityReferenceWithParent
 */
export type GrpcEntityReferenceWithParent = Message<"io.evitadb.externalApi.grpc.generated.GrpcEntityReferenceWithParent"> & {
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   * @generated from field: string entityType = 1;
   */
  entityType: string;

  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   * @generated from field: int32 primaryKey = 2;
   */
  primaryKey: number;

  /**
   * Contains version of this entity and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   * value is deprecated, it was never available in the first place - it was a mistake in the design.
   * in order to get the entity version you need to fetch the entity itself (with entity body).
   *
   * @generated from field: int32 version = 3 [deprecated = true];
   * @deprecated
   */
  version: number;

  /**
   * Recursive pointer to parent entity.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntityReferenceWithParent parent = 4;
   */
  parent?: GrpcEntityReferenceWithParent;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcEntityReferenceWithParent.
 * Use `create(GrpcEntityReferenceWithParentSchema)` to create a new message.
 */
export const GrpcEntityReferenceWithParentSchema: GenMessage<GrpcEntityReferenceWithParent> = /*@__PURE__*/
  messageDesc(file_GrpcEntity, 1);

/**
 * Based on our experience we've designed following data model for handling entities in evitaDB. Model is rather complex
 * but was designed to limit amount of data fetched from database and minimize an amount of data that are indexed and subject
 * to search.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcSealedEntity
 */
export type GrpcSealedEntity = Message<"io.evitadb.externalApi.grpc.generated.GrpcSealedEntity"> & {
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   * @generated from field: string entityType = 1;
   */
  entityType: string;

  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   * @generated from field: int32 primaryKey = 2;
   */
  primaryKey: number;

  /**
   * Contains version of this entity and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   * @generated from field: int32 version = 3;
   */
  version: number;

  /**
   * Contains version of this entity schema and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   * @generated from field: int32 schemaVersion = 4;
   */
  schemaVersion: number;

  /**
   * Primary key of parent entity.
   *
   * @generated from field: google.protobuf.Int32Value parent = 5;
   */
  parent?: number;

  /**
   * A parent entity reference with its parent hierarchy chain.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntityReferenceWithParent parentReference = 6;
   */
  parentReference?: GrpcEntityReferenceWithParent;

  /**
   * A parent entity with its parent hierarchy chain.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcSealedEntity parentEntity = 7;
   */
  parentEntity?: GrpcSealedEntity;

  /**
   * Contains global attributes.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcEvitaValue> globalAttributes = 8;
   */
  globalAttributes: { [key: string]: GrpcEvitaValue };

  /**
   * Contains localized attributes.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcLocalizedAttribute> localizedAttributes = 9;
   */
  localizedAttributes: { [key: string]: GrpcLocalizedAttribute };

  /**
   * Prices allows defining set of prices of entity for complex filtering and ordering.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcPrice prices = 10;
   */
  prices: GrpcPrice[];

  /**
   * Price for which the entity should be sold. This method can be used only when appropriate
   * price related constraints are present so that `currency` and `priceList` priority can be extracted from the query.
   * The moment is either extracted from the query as well (if present) or current date and time is used.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcPrice priceForSale = 11;
   */
  priceForSale?: GrpcPrice;

  /**
   * Price inner record handling controls how prices that share same `inner entity id` will behave during filtering and sorting.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcPriceInnerRecordHandling priceInnerRecordHandling = 12;
   */
  priceInnerRecordHandling: GrpcPriceInnerRecordHandling;

  /**
   * Returns a collection of References of this entity. The references represent relations to other evitaDB
   * entities or external entities in different systems.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcReference references = 13;
   */
  references: GrpcReference[];

  /**
   * Contains global associated data.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcEvitaAssociatedDataValue> globalAssociatedData = 14;
   */
  globalAssociatedData: { [key: string]: GrpcEvitaAssociatedDataValue };

  /**
   * Contains localized associated data.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcLocalizedAssociatedData> localizedAssociatedData = 15;
   */
  localizedAssociatedData: { [key: string]: GrpcLocalizedAssociatedData };

  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcLocale locales = 16;
   */
  locales: GrpcLocale[];

  /**
   * Identifies scope where the entity resides (either live or archived scope).
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntityScope scope = 17;
   */
  scope: GrpcEntityScope;

  /**
   * Contains total count of references per reference name. This may differ from count of provided references
   * if pagination or strip was used in the input query.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcOffsetAndLimit> referenceOffsetAndLimits = 18;
   */
  referenceOffsetAndLimits: { [key: string]: GrpcOffsetAndLimit };

  /**
   * Contains prices that has been requested to be calculated beside the main price for sale.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcPrice> accompanyingPrices = 19;
   */
  accompanyingPrices: { [key: string]: GrpcPrice };
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcSealedEntity.
 * Use `create(GrpcSealedEntitySchema)` to create a new message.
 */
export const GrpcSealedEntitySchema: GenMessage<GrpcSealedEntity> = /*@__PURE__*/
  messageDesc(file_GrpcEntity, 2);

/**
 * Response carries entities in a binary format and is part of the PRIVATE API that is used by Java driver. The client
 * that receives the binary data must know how to deserialize them using Kryo deserializers which are internal to
 * the evitaDB (and even if they had been public they could not have been used because Kryo is not ported to other
 * platforms than Java). The response is triggered by BinaryForm query requirement.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcBinaryEntity
 */
export type GrpcBinaryEntity = Message<"io.evitadb.externalApi.grpc.generated.GrpcBinaryEntity"> & {
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   * @generated from field: string entityType = 1;
   */
  entityType: string;

  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   * @generated from field: int32 primaryKey = 2;
   */
  primaryKey: number;

  /**
   * Contains version of this entity schema and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   * @generated from field: int32 schemaVersion = 3;
   */
  schemaVersion: number;

  /**
   * Serialized representation of the entity body.
   *
   * @generated from field: bytes entityStoragePart = 4;
   */
  entityStoragePart: Uint8Array;

  /**
   * Serialized representation of entity attributes.
   *
   * @generated from field: repeated bytes attributeStorageParts = 5;
   */
  attributeStorageParts: Uint8Array[];

  /**
   * Serialized representation of entity associated data.
   *
   * @generated from field: repeated bytes associatedDataStorageParts = 6;
   */
  associatedDataStorageParts: Uint8Array[];

  /**
   * Serialized representation of entity prices.
   *
   * @generated from field: bytes priceStoragePart = 7;
   */
  priceStoragePart: Uint8Array;

  /**
   * Serialized representation of entity references.
   *
   * @generated from field: bytes referenceStoragePart = 8;
   */
  referenceStoragePart: Uint8Array;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcBinaryEntity.
 * Use `create(GrpcBinaryEntitySchema)` to create a new message.
 */
export const GrpcBinaryEntitySchema: GenMessage<GrpcBinaryEntity> = /*@__PURE__*/
  messageDesc(file_GrpcEntity, 3);

/**
 * References may carry additional key-value data linked to this entity relation (fe. item count present on certain stock).
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcReference
 */
export type GrpcReference = Message<"io.evitadb.externalApi.grpc.generated.GrpcReference"> & {
  /**
   * Name of the reference
   *
   * @generated from field: string referenceName = 1;
   */
  referenceName: string;

  /**
   * Contains version of this reference and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   * @generated from field: int32 version = 2;
   */
  version: number;

  /**
   * Returns entity reference of the referenced entity in case its fetching was requested via entityFetch constraint.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntityReference referencedEntityReference = 3;
   */
  referencedEntityReference?: GrpcEntityReference;

  /**
   * Returns body of the referenced entity in case its fetching was requested via entityFetch constraint.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcSealedEntity referencedEntity = 4;
   */
  referencedEntity?: GrpcSealedEntity;

  /**
   * Returns the referenced entity in case its fetching was requested via entityGroupFetch constraint.
   *
   * @generated from oneof io.evitadb.externalApi.grpc.generated.GrpcReference.groupReferenceType
   */
  groupReferenceType: {
    /**
     * Returns entity reference of the referenced entity in case its fetching was requested via entityGroupFetch constraint.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntityReference groupReferencedEntityReference = 5;
     */
    value: GrpcEntityReference;
    case: "groupReferencedEntityReference";
  } | {
    /**
     * Returns body of the referenced entity in case its fetching was requested via entityGroupFetch constraint.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcSealedEntity groupReferencedEntity = 6;
     */
    value: GrpcSealedEntity;
    case: "groupReferencedEntity";
  } | { case: undefined; value?: undefined };

  /**
   * Contains global attributes.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcEvitaValue> globalAttributes = 7;
   */
  globalAttributes: { [key: string]: GrpcEvitaValue };

  /**
   * Contains localized attributes.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcLocalizedAttribute> localizedAttributes = 8;
   */
  localizedAttributes: { [key: string]: GrpcLocalizedAttribute };

  /**
   * Contains reference cardinality.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcCardinality referenceCardinality = 9;
   */
  referenceCardinality: GrpcCardinality;

  /**
   * internal PK is assigned by evitaDB engine and is used to uniquely identify the
   * reference among other references. It is used when multiple references share same
   * business key - entityType and primaryKey - but differ by other properties (fe. reference group or attributes).
   *
   * When a reference is created for the first time, internal id is set to a unique
   * negative number that is not used by the server side, which assigns positive unique
   * numbers to the references on first reference persistence. This allows distinguishing
   * references that are not yet persisted from those that are already persistent.
   *
   * When standalone key is used:
   *
   * - negative number: means that the reference is new and hasn't been yet persisted
   * - zero: means we don't know the internal PK
   * - positive number: means that the reference is persistent and has been already stored
   *   in the database
   *
   * @generated from field: int32 internalPrimaryKey = 10;
   */
  internalPrimaryKey: number;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcReference.
 * Use `create(GrpcReferenceSchema)` to create a new message.
 */
export const GrpcReferenceSchema: GenMessage<GrpcReference> = /*@__PURE__*/
  messageDesc(file_GrpcEntity, 4);

/**
 * The OffsetAndLimit record represents pagination parameters including offset, limit, and the last page number.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcOffsetAndLimit
 */
export type GrpcOffsetAndLimit = Message<"io.evitadb.externalApi.grpc.generated.GrpcOffsetAndLimit"> & {
  /**
   * The starting point for fetching records.
   *
   * @generated from field: int32 offset = 1;
   */
  offset: number;

  /**
   * The number of records to fetch from the starting point.
   *
   * @generated from field: int32 limit = 2;
   */
  limit: number;

  /**
   * The current page number based on the current pagination settings.
   *
   * @generated from field: int32 pageNumber = 3;
   */
  pageNumber: number;

  /**
   * The last page number based on the current pagination settings.
   *
   * @generated from field: int32 lastPageNumber = 4;
   */
  lastPageNumber: number;

  /**
   * The total number of records available.
   *
   * @generated from field: int32 totalRecordCount = 5;
   */
  totalRecordCount: number;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcOffsetAndLimit.
 * Use `create(GrpcOffsetAndLimitSchema)` to create a new message.
 */
export const GrpcOffsetAndLimitSchema: GenMessage<GrpcOffsetAndLimit> = /*@__PURE__*/
  messageDesc(file_GrpcEntity, 5);

