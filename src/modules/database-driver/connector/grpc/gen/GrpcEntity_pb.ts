// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file GrpcEntity.proto (package io.evitadb.externalApi.grpc.generated, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Int32Value, Message, proto3 } from "@bufbuild/protobuf";
import { GrpcEvitaAssociatedDataValue, GrpcEvitaValue, GrpcLocale } from "./GrpcEvitaDataTypes_pb.js";
import { GrpcLocalizedAttribute } from "./GrpcAttribute_pb.js";
import { GrpcPrice } from "./GrpcPrice_pb.js";
import { GrpcCardinality, GrpcEntityScope, GrpcPriceInnerRecordHandling } from "./GrpcEnums_pb.js";
import { GrpcLocalizedAssociatedData } from "./GrpcAssociatedData_pb.js";

/**
 * This type represents a reference to any Evita entity and that ne returned by default for all
 * queries that don't require loading additional data.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEntityReference
 */
export class GrpcEntityReference extends Message<GrpcEntityReference> {
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   * @generated from field: string entityType = 1;
   */
  entityType = "";

  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   * @generated from field: int32 primaryKey = 2;
   */
  primaryKey = 0;

  /**
   * value is deprecated, it was available only for entity references used in entity body, in other use-cases it was left
   * as zero - which was a mistake in the design.
   * in order to get the entity version you need to fetch the entity itself (with entity body).
   *
   * @generated from field: int32 version = 3 [deprecated = true];
   * @deprecated
   */
  version = 0;

  /**
   * Contains version of this reference and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   * @generated from field: google.protobuf.Int32Value referenceVersion = 4;
   */
  referenceVersion?: number;

  constructor(data?: PartialMessage<GrpcEntityReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcEntityReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entityType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "primaryKey", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "referenceVersion", kind: "message", T: Int32Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcEntityReference {
    return new GrpcEntityReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcEntityReference {
    return new GrpcEntityReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcEntityReference {
    return new GrpcEntityReference().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcEntityReference | PlainMessage<GrpcEntityReference> | undefined, b: GrpcEntityReference | PlainMessage<GrpcEntityReference> | undefined): boolean {
    return proto3.util.equals(GrpcEntityReference, a, b);
  }
}

/**
 * Entity reference which contains information about parent entity.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEntityReferenceWithParent
 */
export class GrpcEntityReferenceWithParent extends Message<GrpcEntityReferenceWithParent> {
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   * @generated from field: string entityType = 1;
   */
  entityType = "";

  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   * @generated from field: int32 primaryKey = 2;
   */
  primaryKey = 0;

  /**
   * Contains version of this entity and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   * value is deprecated, it was never available in the first place - it was a mistake in the design.
   * in order to get the entity version you need to fetch the entity itself (with entity body).
   *
   * @generated from field: int32 version = 3 [deprecated = true];
   * @deprecated
   */
  version = 0;

  /**
   * Recursive pointer to parent entity.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntityReferenceWithParent parent = 4;
   */
  parent?: GrpcEntityReferenceWithParent;

  constructor(data?: PartialMessage<GrpcEntityReferenceWithParent>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcEntityReferenceWithParent";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entityType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "primaryKey", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "parent", kind: "message", T: GrpcEntityReferenceWithParent },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcEntityReferenceWithParent {
    return new GrpcEntityReferenceWithParent().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcEntityReferenceWithParent {
    return new GrpcEntityReferenceWithParent().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcEntityReferenceWithParent {
    return new GrpcEntityReferenceWithParent().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcEntityReferenceWithParent | PlainMessage<GrpcEntityReferenceWithParent> | undefined, b: GrpcEntityReferenceWithParent | PlainMessage<GrpcEntityReferenceWithParent> | undefined): boolean {
    return proto3.util.equals(GrpcEntityReferenceWithParent, a, b);
  }
}

/**
 * Based on our experience we've designed following data model for handling entities in evitaDB. Model is rather complex
 * but was designed to limit amount of data fetched from database and minimize an amount of data that are indexed and subject
 * to search.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcSealedEntity
 */
export class GrpcSealedEntity extends Message<GrpcSealedEntity> {
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   * @generated from field: string entityType = 1;
   */
  entityType = "";

  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   * @generated from field: int32 primaryKey = 2;
   */
  primaryKey = 0;

  /**
   * Contains version of this entity and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   * @generated from field: int32 version = 3;
   */
  version = 0;

  /**
   * Contains version of this entity schema and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   * @generated from field: int32 schemaVersion = 4;
   */
  schemaVersion = 0;

  /**
   * Primary key of parent entity.
   *
   * @generated from field: google.protobuf.Int32Value parent = 5;
   */
  parent?: number;

  /**
   * A parent entity reference with its parent hierarchy chain.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntityReferenceWithParent parentReference = 6;
   */
  parentReference?: GrpcEntityReferenceWithParent;

  /**
   * A parent entity with its parent hierarchy chain.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcSealedEntity parentEntity = 7;
   */
  parentEntity?: GrpcSealedEntity;

  /**
   * Contains global attributes.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcEvitaValue> globalAttributes = 8;
   */
  globalAttributes: { [key: string]: GrpcEvitaValue } = {};

  /**
   * Contains localized attributes.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcLocalizedAttribute> localizedAttributes = 9;
   */
  localizedAttributes: { [key: string]: GrpcLocalizedAttribute } = {};

  /**
   * Prices allows defining set of prices of entity for complex filtering and ordering.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcPrice prices = 10;
   */
  prices: GrpcPrice[] = [];

  /**
   * Price for which the entity should be sold. This method can be used only when appropriate
   * price related constraints are present so that `currency` and `priceList` priority can be extracted from the query.
   * The moment is either extracted from the query as well (if present) or current date and time is used.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcPrice priceForSale = 11;
   */
  priceForSale?: GrpcPrice;

  /**
   * Price inner record handling controls how prices that share same `inner entity id` will behave during filtering and sorting.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcPriceInnerRecordHandling priceInnerRecordHandling = 12;
   */
  priceInnerRecordHandling = GrpcPriceInnerRecordHandling.NONE;

  /**
   * Returns a collection of References of this entity. The references represent relations to other evitaDB
   * entities or external entities in different systems.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcReference references = 13;
   */
  references: GrpcReference[] = [];

  /**
   * Contains global associated data.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcEvitaAssociatedDataValue> globalAssociatedData = 14;
   */
  globalAssociatedData: { [key: string]: GrpcEvitaAssociatedDataValue } = {};

  /**
   * Contains localized associated data.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcLocalizedAssociatedData> localizedAssociatedData = 15;
   */
  localizedAssociatedData: { [key: string]: GrpcLocalizedAssociatedData } = {};

  /**
   * Contains set of all locales that were used for localized attributes or associated data of
   * this particular entity.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcLocale locales = 16;
   */
  locales: GrpcLocale[] = [];

  /**
   * Identifies scope where the entity resides (either live or archived scope).
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntityScope scope = 17;
   */
  scope = GrpcEntityScope.SCOPE_LIVE;

  /**
   * Contains total count of references per reference name. This may differ from count of provided references
   * if pagination or strip was used in the input query.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcOffsetAndLimit> referenceOffsetAndLimits = 18;
   */
  referenceOffsetAndLimits: { [key: string]: GrpcOffsetAndLimit } = {};

  constructor(data?: PartialMessage<GrpcSealedEntity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcSealedEntity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entityType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "primaryKey", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "schemaVersion", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "parent", kind: "message", T: Int32Value },
    { no: 6, name: "parentReference", kind: "message", T: GrpcEntityReferenceWithParent },
    { no: 7, name: "parentEntity", kind: "message", T: GrpcSealedEntity },
    { no: 8, name: "globalAttributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: GrpcEvitaValue} },
    { no: 9, name: "localizedAttributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: GrpcLocalizedAttribute} },
    { no: 10, name: "prices", kind: "message", T: GrpcPrice, repeated: true },
    { no: 11, name: "priceForSale", kind: "message", T: GrpcPrice },
    { no: 12, name: "priceInnerRecordHandling", kind: "enum", T: proto3.getEnumType(GrpcPriceInnerRecordHandling) },
    { no: 13, name: "references", kind: "message", T: GrpcReference, repeated: true },
    { no: 14, name: "globalAssociatedData", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: GrpcEvitaAssociatedDataValue} },
    { no: 15, name: "localizedAssociatedData", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: GrpcLocalizedAssociatedData} },
    { no: 16, name: "locales", kind: "message", T: GrpcLocale, repeated: true },
    { no: 17, name: "scope", kind: "enum", T: proto3.getEnumType(GrpcEntityScope) },
    { no: 18, name: "referenceOffsetAndLimits", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: GrpcOffsetAndLimit} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcSealedEntity {
    return new GrpcSealedEntity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcSealedEntity {
    return new GrpcSealedEntity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcSealedEntity {
    return new GrpcSealedEntity().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcSealedEntity | PlainMessage<GrpcSealedEntity> | undefined, b: GrpcSealedEntity | PlainMessage<GrpcSealedEntity> | undefined): boolean {
    return proto3.util.equals(GrpcSealedEntity, a, b);
  }
}

/**
 * Response carries entities in a binary format and is part of the PRIVATE API that is used by Java driver. The client
 * that receives the binary data must know how to deserialize them using Kryo deserializers which are internal to
 * the evitaDB (and even if they had been public they could not have been used because Kryo is not ported to other
 * platforms than Java). The response is triggered by BinaryForm query requirement.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcBinaryEntity
 */
export class GrpcBinaryEntity extends Message<GrpcBinaryEntity> {
  /**
   * Type of entity.
   * Entity type is main sharding key - all data of entities with same type are stored in separated collections. Within the
   * entity type entity is uniquely represented by primary key.
   *
   * @generated from field: string entityType = 1;
   */
  entityType = "";

  /**
   * Unique Integer positive number representing the entity. Can be used for fast lookup for
   * entity (entities). Primary key must be unique within the same entity type.
   *
   * @generated from field: int32 primaryKey = 2;
   */
  primaryKey = 0;

  /**
   * Contains version of this entity schema and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   * @generated from field: int32 schemaVersion = 3;
   */
  schemaVersion = 0;

  /**
   * Serialized representation of the entity body.
   *
   * @generated from field: bytes entityStoragePart = 4;
   */
  entityStoragePart = new Uint8Array(0);

  /**
   * Serialized representation of entity attributes.
   *
   * @generated from field: repeated bytes attributeStorageParts = 5;
   */
  attributeStorageParts: Uint8Array[] = [];

  /**
   * Serialized representation of entity associated data.
   *
   * @generated from field: repeated bytes associatedDataStorageParts = 6;
   */
  associatedDataStorageParts: Uint8Array[] = [];

  /**
   * Serialized representation of entity prices.
   *
   * @generated from field: bytes priceStoragePart = 7;
   */
  priceStoragePart = new Uint8Array(0);

  /**
   * Serialized representation of entity references.
   *
   * @generated from field: bytes referenceStoragePart = 8;
   */
  referenceStoragePart = new Uint8Array(0);

  constructor(data?: PartialMessage<GrpcBinaryEntity>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcBinaryEntity";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entityType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "primaryKey", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "schemaVersion", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "entityStoragePart", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 5, name: "attributeStorageParts", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 6, name: "associatedDataStorageParts", kind: "scalar", T: 12 /* ScalarType.BYTES */, repeated: true },
    { no: 7, name: "priceStoragePart", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
    { no: 8, name: "referenceStoragePart", kind: "scalar", T: 12 /* ScalarType.BYTES */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcBinaryEntity {
    return new GrpcBinaryEntity().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcBinaryEntity {
    return new GrpcBinaryEntity().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcBinaryEntity {
    return new GrpcBinaryEntity().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcBinaryEntity | PlainMessage<GrpcBinaryEntity> | undefined, b: GrpcBinaryEntity | PlainMessage<GrpcBinaryEntity> | undefined): boolean {
    return proto3.util.equals(GrpcBinaryEntity, a, b);
  }
}

/**
 * References may carry additional key-value data linked to this entity relation (fe. item count present on certain stock).
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcReference
 */
export class GrpcReference extends Message<GrpcReference> {
  /**
   * Name of the reference
   *
   * @generated from field: string referenceName = 1;
   */
  referenceName = "";

  /**
   * Contains version of this reference and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications.
   *
   * @generated from field: int32 version = 2;
   */
  version = 0;

  /**
   * Returns entity reference of the referenced entity in case its fetching was requested via entityFetch constraint.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntityReference referencedEntityReference = 3;
   */
  referencedEntityReference?: GrpcEntityReference;

  /**
   * Returns body of the referenced entity in case its fetching was requested via entityFetch constraint.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcSealedEntity referencedEntity = 4;
   */
  referencedEntity?: GrpcSealedEntity;

  /**
   * Returns the referenced entity in case its fetching was requested via entityGroupFetch constraint.
   *
   * @generated from oneof io.evitadb.externalApi.grpc.generated.GrpcReference.groupReferenceType
   */
  groupReferenceType: {
    /**
     * Returns entity reference of the referenced entity in case its fetching was requested via entityGroupFetch constraint.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntityReference groupReferencedEntityReference = 5;
     */
    value: GrpcEntityReference;
    case: "groupReferencedEntityReference";
  } | {
    /**
     * Returns body of the referenced entity in case its fetching was requested via entityGroupFetch constraint.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcSealedEntity groupReferencedEntity = 6;
     */
    value: GrpcSealedEntity;
    case: "groupReferencedEntity";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Contains global attributes.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcEvitaValue> globalAttributes = 7;
   */
  globalAttributes: { [key: string]: GrpcEvitaValue } = {};

  /**
   * Contains localized attributes.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcLocalizedAttribute> localizedAttributes = 8;
   */
  localizedAttributes: { [key: string]: GrpcLocalizedAttribute } = {};

  /**
   * Contains reference cardinality.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcCardinality referenceCardinality = 9;
   */
  referenceCardinality = GrpcCardinality.NOT_SPECIFIED;

  constructor(data?: PartialMessage<GrpcReference>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcReference";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "referenceName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "version", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "referencedEntityReference", kind: "message", T: GrpcEntityReference },
    { no: 4, name: "referencedEntity", kind: "message", T: GrpcSealedEntity },
    { no: 5, name: "groupReferencedEntityReference", kind: "message", T: GrpcEntityReference, oneof: "groupReferenceType" },
    { no: 6, name: "groupReferencedEntity", kind: "message", T: GrpcSealedEntity, oneof: "groupReferenceType" },
    { no: 7, name: "globalAttributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: GrpcEvitaValue} },
    { no: 8, name: "localizedAttributes", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: GrpcLocalizedAttribute} },
    { no: 9, name: "referenceCardinality", kind: "enum", T: proto3.getEnumType(GrpcCardinality) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcReference {
    return new GrpcReference().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcReference {
    return new GrpcReference().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcReference {
    return new GrpcReference().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcReference | PlainMessage<GrpcReference> | undefined, b: GrpcReference | PlainMessage<GrpcReference> | undefined): boolean {
    return proto3.util.equals(GrpcReference, a, b);
  }
}

/**
 * The OffsetAndLimit record represents pagination parameters including offset, limit, and the last page number.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcOffsetAndLimit
 */
export class GrpcOffsetAndLimit extends Message<GrpcOffsetAndLimit> {
  /**
   * The starting point for fetching records.
   *
   * @generated from field: int32 offset = 1;
   */
  offset = 0;

  /**
   * The number of records to fetch from the starting point.
   *
   * @generated from field: int32 limit = 2;
   */
  limit = 0;

  /**
   * The current page number based on the current pagination settings.
   *
   * @generated from field: int32 pageNumber = 3;
   */
  pageNumber = 0;

  /**
   * The last page number based on the current pagination settings.
   *
   * @generated from field: int32 lastPageNumber = 4;
   */
  lastPageNumber = 0;

  /**
   * The total number of records available.
   *
   * @generated from field: int32 totalRecordCount = 5;
   */
  totalRecordCount = 0;

  constructor(data?: PartialMessage<GrpcOffsetAndLimit>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcOffsetAndLimit";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "offset", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 2, name: "limit", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "pageNumber", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "lastPageNumber", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "totalRecordCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcOffsetAndLimit {
    return new GrpcOffsetAndLimit().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcOffsetAndLimit {
    return new GrpcOffsetAndLimit().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcOffsetAndLimit {
    return new GrpcOffsetAndLimit().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcOffsetAndLimit | PlainMessage<GrpcOffsetAndLimit> | undefined, b: GrpcOffsetAndLimit | PlainMessage<GrpcOffsetAndLimit> | undefined): boolean {
    return proto3.util.equals(GrpcOffsetAndLimit, a, b);
  }
}

