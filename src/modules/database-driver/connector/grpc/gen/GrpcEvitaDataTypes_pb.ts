// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file GrpcEvitaDataTypes.proto (package io.evitadb.externalApi.grpc.generated, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Int32Value, Int64Value, Message, proto3, protoInt64, StringValue, Timestamp } from "@bufbuild/protobuf";
import { GrpcAttributeSpecialValue, GrpcAttributeUniquenessType, GrpcCatalogState, GrpcEmptyHierarchicalEntityBehaviour, GrpcEntityScope, GrpcEvitaAssociatedDataDataType_GrpcEvitaDataType, GrpcEvitaDataType, GrpcFacetStatisticsDepth, GrpcGlobalAttributeUniquenessType, GrpcHistogramBehavior, GrpcNamingConvention, GrpcOrderDirection, GrpcPriceContentMode, GrpcQueryPriceMode, GrpcStatisticsBase, GrpcStatisticsType, GrpcTaskSimplifiedState, GrpcTaskTrait } from "./GrpcEnums_pb.js";

/**
 * Representation of IntegerNumberRange structures with optional from and to values.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcIntegerNumberRange
 */
export class GrpcIntegerNumberRange extends Message<GrpcIntegerNumberRange> {
  /**
   * The lower bound of the range.
   *
   * @generated from field: google.protobuf.Int32Value from = 1;
   */
  from?: number;

  /**
   * The upper bound of the range.
   *
   * @generated from field: google.protobuf.Int32Value to = 2;
   */
  to?: number;

  constructor(data?: PartialMessage<GrpcIntegerNumberRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcIntegerNumberRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "message", T: Int32Value },
    { no: 2, name: "to", kind: "message", T: Int32Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcIntegerNumberRange {
    return new GrpcIntegerNumberRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcIntegerNumberRange {
    return new GrpcIntegerNumberRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcIntegerNumberRange {
    return new GrpcIntegerNumberRange().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcIntegerNumberRange | PlainMessage<GrpcIntegerNumberRange> | undefined, b: GrpcIntegerNumberRange | PlainMessage<GrpcIntegerNumberRange> | undefined): boolean {
    return proto3.util.equals(GrpcIntegerNumberRange, a, b);
  }
}

/**
 * Representation of LongNumberRange structures with optional from and to values.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcLongNumberRange
 */
export class GrpcLongNumberRange extends Message<GrpcLongNumberRange> {
  /**
   * The lower bound of the range.
   *
   * @generated from field: google.protobuf.Int64Value from = 1;
   */
  from?: bigint;

  /**
   * The upper bound of the range.
   *
   * @generated from field: google.protobuf.Int64Value to = 2;
   */
  to?: bigint;

  constructor(data?: PartialMessage<GrpcLongNumberRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcLongNumberRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "message", T: Int64Value },
    { no: 2, name: "to", kind: "message", T: Int64Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcLongNumberRange {
    return new GrpcLongNumberRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcLongNumberRange {
    return new GrpcLongNumberRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcLongNumberRange {
    return new GrpcLongNumberRange().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcLongNumberRange | PlainMessage<GrpcLongNumberRange> | undefined, b: GrpcLongNumberRange | PlainMessage<GrpcLongNumberRange> | undefined): boolean {
    return proto3.util.equals(GrpcLongNumberRange, a, b);
  }
}

/**
 * Representation of BigDecimalNumberRange structures with optional from and to values.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcBigDecimalNumberRange
 */
export class GrpcBigDecimalNumberRange extends Message<GrpcBigDecimalNumberRange> {
  /**
   * The lower bound of the range.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcBigDecimal from = 1;
   */
  from?: GrpcBigDecimal;

  /**
   * The upper bound of the range.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcBigDecimal to = 2;
   */
  to?: GrpcBigDecimal;

  /**
   * The number of decimal places to compare.
   *
   * @generated from field: int32 decimalPlacesToCompare = 3;
   */
  decimalPlacesToCompare = 0;

  constructor(data?: PartialMessage<GrpcBigDecimalNumberRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcBigDecimalNumberRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "message", T: GrpcBigDecimal },
    { no: 2, name: "to", kind: "message", T: GrpcBigDecimal },
    { no: 3, name: "decimalPlacesToCompare", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcBigDecimalNumberRange {
    return new GrpcBigDecimalNumberRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcBigDecimalNumberRange {
    return new GrpcBigDecimalNumberRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcBigDecimalNumberRange {
    return new GrpcBigDecimalNumberRange().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcBigDecimalNumberRange | PlainMessage<GrpcBigDecimalNumberRange> | undefined, b: GrpcBigDecimalNumberRange | PlainMessage<GrpcBigDecimalNumberRange> | undefined): boolean {
    return proto3.util.equals(GrpcBigDecimalNumberRange, a, b);
  }
}

/**
 * Representation of DateTimeRange structures with optional from and to values.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDateTimeRange
 */
export class GrpcDateTimeRange extends Message<GrpcDateTimeRange> {
  /**
   * The lower bound of the range.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcOffsetDateTime from = 1;
   */
  from?: GrpcOffsetDateTime;

  /**
   * The upper bound of the range.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcOffsetDateTime to = 2;
   */
  to?: GrpcOffsetDateTime;

  constructor(data?: PartialMessage<GrpcDateTimeRange>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcDateTimeRange";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "from", kind: "message", T: GrpcOffsetDateTime },
    { no: 2, name: "to", kind: "message", T: GrpcOffsetDateTime },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcDateTimeRange {
    return new GrpcDateTimeRange().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcDateTimeRange {
    return new GrpcDateTimeRange().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcDateTimeRange {
    return new GrpcDateTimeRange().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcDateTimeRange | PlainMessage<GrpcDateTimeRange> | undefined, b: GrpcDateTimeRange | PlainMessage<GrpcDateTimeRange> | undefined): boolean {
    return proto3.util.equals(GrpcDateTimeRange, a, b);
  }
}

/**
 * Representation of Java's BigDecimal class with arbitrary precision.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcBigDecimal
 */
export class GrpcBigDecimal extends Message<GrpcBigDecimal> {
  /**
   * The string serialized value.
   *
   * @generated from field: string valueString = 1;
   */
  valueString = "";

  constructor(data?: PartialMessage<GrpcBigDecimal>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcBigDecimal";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "valueString", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcBigDecimal {
    return new GrpcBigDecimal().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcBigDecimal {
    return new GrpcBigDecimal().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcBigDecimal {
    return new GrpcBigDecimal().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcBigDecimal | PlainMessage<GrpcBigDecimal> | undefined, b: GrpcBigDecimal | PlainMessage<GrpcBigDecimal> | undefined): boolean {
    return proto3.util.equals(GrpcBigDecimal, a, b);
  }
}

/**
 * Structure for representing Locale objects specified by language tag.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcLocale
 */
export class GrpcLocale extends Message<GrpcLocale> {
  /**
   * The language tag of the locale.
   *
   * @generated from field: string languageTag = 1;
   */
  languageTag = "";

  constructor(data?: PartialMessage<GrpcLocale>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcLocale";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "languageTag", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcLocale {
    return new GrpcLocale().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcLocale {
    return new GrpcLocale().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcLocale {
    return new GrpcLocale().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcLocale | PlainMessage<GrpcLocale> | undefined, b: GrpcLocale | PlainMessage<GrpcLocale> | undefined): boolean {
    return proto3.util.equals(GrpcLocale, a, b);
  }
}

/**
 * Structure for representing Currency objects specified by currency code.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcCurrency
 */
export class GrpcCurrency extends Message<GrpcCurrency> {
  /**
   * The currency code of the currency.
   *
   * @generated from field: string code = 1;
   */
  code = "";

  constructor(data?: PartialMessage<GrpcCurrency>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcCurrency";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "code", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcCurrency {
    return new GrpcCurrency().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcCurrency {
    return new GrpcCurrency().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcCurrency {
    return new GrpcCurrency().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcCurrency | PlainMessage<GrpcCurrency> | undefined, b: GrpcCurrency | PlainMessage<GrpcCurrency> | undefined): boolean {
    return proto3.util.equals(GrpcCurrency, a, b);
  }
}

/**
 * Structure for representing UUID objects.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcUuid
 */
export class GrpcUuid extends Message<GrpcUuid> {
  /**
   * Value that supports storing a UUID.
   *
   * @generated from field: int64 mostSignificantBits = 1;
   */
  mostSignificantBits = protoInt64.zero;

  /**
   * @generated from field: int64 leastSignificantBits = 2;
   */
  leastSignificantBits = protoInt64.zero;

  constructor(data?: PartialMessage<GrpcUuid>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcUuid";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "mostSignificantBits", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "leastSignificantBits", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcUuid {
    return new GrpcUuid().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcUuid {
    return new GrpcUuid().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcUuid {
    return new GrpcUuid().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcUuid | PlainMessage<GrpcUuid> | undefined, b: GrpcUuid | PlainMessage<GrpcUuid> | undefined): boolean {
    return proto3.util.equals(GrpcUuid, a, b);
  }
}

/**
 * Structure for representing Predecessor objects.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcPredecessor
 */
export class GrpcPredecessor extends Message<GrpcPredecessor> {
  /**
   * true if predecessor is a head, false otherwise
   *
   * @generated from field: bool head = 1;
   */
  head = false;

  /**
   * Value that supports storing a Predecessor.
   *
   * @generated from field: google.protobuf.Int32Value predecessorId = 2;
   */
  predecessorId?: number;

  constructor(data?: PartialMessage<GrpcPredecessor>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcPredecessor";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "head", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 2, name: "predecessorId", kind: "message", T: Int32Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcPredecessor {
    return new GrpcPredecessor().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcPredecessor {
    return new GrpcPredecessor().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcPredecessor {
    return new GrpcPredecessor().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcPredecessor | PlainMessage<GrpcPredecessor> | undefined, b: GrpcPredecessor | PlainMessage<GrpcPredecessor> | undefined): boolean {
    return proto3.util.equals(GrpcPredecessor, a, b);
  }
}

/**
 * Structure for universal representation of DateTime objects with an offset.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcOffsetDateTime
 */
export class GrpcOffsetDateTime extends Message<GrpcOffsetDateTime> {
  /**
   * The date and time of the object internally represented by unix timestamp.
   *
   * @generated from field: google.protobuf.Timestamp timestamp = 1;
   */
  timestamp?: Timestamp;

  /**
   * The offset of the object in seconds.
   * Templates for offset:
   *   Z - for UTC
   *  +h
   *  +hh
   *  +hh:mm
   *  -hh:mm
   *  +hhmm
   *  -hhmm
   *  +hh:mm:ss
   *  -hh:mm:ss
   *  +hhmmss
   *  -hhmms
   *
   * @generated from field: string offset = 2;
   */
  offset = "";

  constructor(data?: PartialMessage<GrpcOffsetDateTime>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcOffsetDateTime";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "timestamp", kind: "message", T: Timestamp },
    { no: 2, name: "offset", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcOffsetDateTime {
    return new GrpcOffsetDateTime().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcOffsetDateTime {
    return new GrpcOffsetDateTime().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcOffsetDateTime {
    return new GrpcOffsetDateTime().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcOffsetDateTime | PlainMessage<GrpcOffsetDateTime> | undefined, b: GrpcOffsetDateTime | PlainMessage<GrpcOffsetDateTime> | undefined): boolean {
    return proto3.util.equals(GrpcOffsetDateTime, a, b);
  }
}

/**
 * Wrapper for representing an array of strings.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcStringArray
 */
export class GrpcStringArray extends Message<GrpcStringArray> {
  /**
   * Value that supports storing a string array.
   *
   * @generated from field: repeated string value = 1;
   */
  value: string[] = [];

  constructor(data?: PartialMessage<GrpcStringArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcStringArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcStringArray {
    return new GrpcStringArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcStringArray {
    return new GrpcStringArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcStringArray {
    return new GrpcStringArray().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcStringArray | PlainMessage<GrpcStringArray> | undefined, b: GrpcStringArray | PlainMessage<GrpcStringArray> | undefined): boolean {
    return proto3.util.equals(GrpcStringArray, a, b);
  }
}

/**
 * Wrapper for representing an array of integers.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcIntegerArray
 */
export class GrpcIntegerArray extends Message<GrpcIntegerArray> {
  /**
   * Value that supports storing an integer array.
   *
   * @generated from field: repeated int32 value = 1;
   */
  value: number[] = [];

  constructor(data?: PartialMessage<GrpcIntegerArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcIntegerArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 5 /* ScalarType.INT32 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcIntegerArray {
    return new GrpcIntegerArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcIntegerArray {
    return new GrpcIntegerArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcIntegerArray {
    return new GrpcIntegerArray().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcIntegerArray | PlainMessage<GrpcIntegerArray> | undefined, b: GrpcIntegerArray | PlainMessage<GrpcIntegerArray> | undefined): boolean {
    return proto3.util.equals(GrpcIntegerArray, a, b);
  }
}

/**
 * Wrapper for representing an array of longs.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcLongArray
 */
export class GrpcLongArray extends Message<GrpcLongArray> {
  /**
   * Value that supports storing a long array.
   *
   * @generated from field: repeated int64 value = 1;
   */
  value: bigint[] = [];

  constructor(data?: PartialMessage<GrpcLongArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcLongArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 3 /* ScalarType.INT64 */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcLongArray {
    return new GrpcLongArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcLongArray {
    return new GrpcLongArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcLongArray {
    return new GrpcLongArray().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcLongArray | PlainMessage<GrpcLongArray> | undefined, b: GrpcLongArray | PlainMessage<GrpcLongArray> | undefined): boolean {
    return proto3.util.equals(GrpcLongArray, a, b);
  }
}

/**
 * Wrapper for representing an array of booleans.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcBooleanArray
 */
export class GrpcBooleanArray extends Message<GrpcBooleanArray> {
  /**
   * Value that supports storing a boolean array.
   *
   * @generated from field: repeated bool value = 1;
   */
  value: boolean[] = [];

  constructor(data?: PartialMessage<GrpcBooleanArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcBooleanArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "scalar", T: 8 /* ScalarType.BOOL */, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcBooleanArray {
    return new GrpcBooleanArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcBooleanArray {
    return new GrpcBooleanArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcBooleanArray {
    return new GrpcBooleanArray().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcBooleanArray | PlainMessage<GrpcBooleanArray> | undefined, b: GrpcBooleanArray | PlainMessage<GrpcBooleanArray> | undefined): boolean {
    return proto3.util.equals(GrpcBooleanArray, a, b);
  }
}

/**
 * Wrapper for representing an array of BigDecimals.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcBigDecimalArray
 */
export class GrpcBigDecimalArray extends Message<GrpcBigDecimalArray> {
  /**
   * Value that supports storing a BigDecimal array.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcBigDecimal value = 1;
   */
  value: GrpcBigDecimal[] = [];

  constructor(data?: PartialMessage<GrpcBigDecimalArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcBigDecimalArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: GrpcBigDecimal, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcBigDecimalArray {
    return new GrpcBigDecimalArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcBigDecimalArray {
    return new GrpcBigDecimalArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcBigDecimalArray {
    return new GrpcBigDecimalArray().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcBigDecimalArray | PlainMessage<GrpcBigDecimalArray> | undefined, b: GrpcBigDecimalArray | PlainMessage<GrpcBigDecimalArray> | undefined): boolean {
    return proto3.util.equals(GrpcBigDecimalArray, a, b);
  }
}

/**
 * Wrapper for representing an array of DateTimeRanges.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDateTimeRangeArray
 */
export class GrpcDateTimeRangeArray extends Message<GrpcDateTimeRangeArray> {
  /**
   * Value that supports storing a DateTimeRange array.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcDateTimeRange value = 1;
   */
  value: GrpcDateTimeRange[] = [];

  constructor(data?: PartialMessage<GrpcDateTimeRangeArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcDateTimeRangeArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: GrpcDateTimeRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcDateTimeRangeArray {
    return new GrpcDateTimeRangeArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcDateTimeRangeArray {
    return new GrpcDateTimeRangeArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcDateTimeRangeArray {
    return new GrpcDateTimeRangeArray().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcDateTimeRangeArray | PlainMessage<GrpcDateTimeRangeArray> | undefined, b: GrpcDateTimeRangeArray | PlainMessage<GrpcDateTimeRangeArray> | undefined): boolean {
    return proto3.util.equals(GrpcDateTimeRangeArray, a, b);
  }
}

/**
 * Wrapper for representing an array of IntegerNumberRanges.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcIntegerNumberRangeArray
 */
export class GrpcIntegerNumberRangeArray extends Message<GrpcIntegerNumberRangeArray> {
  /**
   * Value that supports storing an IntegerNumberRange array.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcIntegerNumberRange value = 1;
   */
  value: GrpcIntegerNumberRange[] = [];

  constructor(data?: PartialMessage<GrpcIntegerNumberRangeArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcIntegerNumberRangeArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: GrpcIntegerNumberRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcIntegerNumberRangeArray {
    return new GrpcIntegerNumberRangeArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcIntegerNumberRangeArray {
    return new GrpcIntegerNumberRangeArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcIntegerNumberRangeArray {
    return new GrpcIntegerNumberRangeArray().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcIntegerNumberRangeArray | PlainMessage<GrpcIntegerNumberRangeArray> | undefined, b: GrpcIntegerNumberRangeArray | PlainMessage<GrpcIntegerNumberRangeArray> | undefined): boolean {
    return proto3.util.equals(GrpcIntegerNumberRangeArray, a, b);
  }
}

/**
 * Wrapper for representing an array of LongNumberRanges.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcLongNumberRangeArray
 */
export class GrpcLongNumberRangeArray extends Message<GrpcLongNumberRangeArray> {
  /**
   * Value that supports storing a LongNumberRange array.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcLongNumberRange value = 1;
   */
  value: GrpcLongNumberRange[] = [];

  constructor(data?: PartialMessage<GrpcLongNumberRangeArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcLongNumberRangeArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: GrpcLongNumberRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcLongNumberRangeArray {
    return new GrpcLongNumberRangeArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcLongNumberRangeArray {
    return new GrpcLongNumberRangeArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcLongNumberRangeArray {
    return new GrpcLongNumberRangeArray().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcLongNumberRangeArray | PlainMessage<GrpcLongNumberRangeArray> | undefined, b: GrpcLongNumberRangeArray | PlainMessage<GrpcLongNumberRangeArray> | undefined): boolean {
    return proto3.util.equals(GrpcLongNumberRangeArray, a, b);
  }
}

/**
 * Wrapper for representing an array of BigDecimalNumberRanges.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcBigDecimalNumberRangeArray
 */
export class GrpcBigDecimalNumberRangeArray extends Message<GrpcBigDecimalNumberRangeArray> {
  /**
   * Value that supports storing a BigDecimalNumberRange array.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcBigDecimalNumberRange value = 1;
   */
  value: GrpcBigDecimalNumberRange[] = [];

  constructor(data?: PartialMessage<GrpcBigDecimalNumberRangeArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcBigDecimalNumberRangeArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: GrpcBigDecimalNumberRange, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcBigDecimalNumberRangeArray {
    return new GrpcBigDecimalNumberRangeArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcBigDecimalNumberRangeArray {
    return new GrpcBigDecimalNumberRangeArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcBigDecimalNumberRangeArray {
    return new GrpcBigDecimalNumberRangeArray().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcBigDecimalNumberRangeArray | PlainMessage<GrpcBigDecimalNumberRangeArray> | undefined, b: GrpcBigDecimalNumberRangeArray | PlainMessage<GrpcBigDecimalNumberRangeArray> | undefined): boolean {
    return proto3.util.equals(GrpcBigDecimalNumberRangeArray, a, b);
  }
}

/**
 * Wrapper for representing an array of OffsetDateTimes.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcOffsetDateTimeArray
 */
export class GrpcOffsetDateTimeArray extends Message<GrpcOffsetDateTimeArray> {
  /**
   * Value that supports storing an OffsetDateTime array.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcOffsetDateTime value = 1;
   */
  value: GrpcOffsetDateTime[] = [];

  constructor(data?: PartialMessage<GrpcOffsetDateTimeArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcOffsetDateTimeArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: GrpcOffsetDateTime, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcOffsetDateTimeArray {
    return new GrpcOffsetDateTimeArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcOffsetDateTimeArray {
    return new GrpcOffsetDateTimeArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcOffsetDateTimeArray {
    return new GrpcOffsetDateTimeArray().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcOffsetDateTimeArray | PlainMessage<GrpcOffsetDateTimeArray> | undefined, b: GrpcOffsetDateTimeArray | PlainMessage<GrpcOffsetDateTimeArray> | undefined): boolean {
    return proto3.util.equals(GrpcOffsetDateTimeArray, a, b);
  }
}

/**
 * Wrapper for representing an array of Locales.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcLocaleArray
 */
export class GrpcLocaleArray extends Message<GrpcLocaleArray> {
  /**
   * Value that supports storing a Locale array.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcLocale value = 1;
   */
  value: GrpcLocale[] = [];

  constructor(data?: PartialMessage<GrpcLocaleArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcLocaleArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: GrpcLocale, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcLocaleArray {
    return new GrpcLocaleArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcLocaleArray {
    return new GrpcLocaleArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcLocaleArray {
    return new GrpcLocaleArray().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcLocaleArray | PlainMessage<GrpcLocaleArray> | undefined, b: GrpcLocaleArray | PlainMessage<GrpcLocaleArray> | undefined): boolean {
    return proto3.util.equals(GrpcLocaleArray, a, b);
  }
}

/**
 * Wrapper for representing an array of Currencies.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcCurrencyArray
 */
export class GrpcCurrencyArray extends Message<GrpcCurrencyArray> {
  /**
   * Value that supports storing a Currency array.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcCurrency value = 1;
   */
  value: GrpcCurrency[] = [];

  constructor(data?: PartialMessage<GrpcCurrencyArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcCurrencyArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: GrpcCurrency, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcCurrencyArray {
    return new GrpcCurrencyArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcCurrencyArray {
    return new GrpcCurrencyArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcCurrencyArray {
    return new GrpcCurrencyArray().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcCurrencyArray | PlainMessage<GrpcCurrencyArray> | undefined, b: GrpcCurrencyArray | PlainMessage<GrpcCurrencyArray> | undefined): boolean {
    return proto3.util.equals(GrpcCurrencyArray, a, b);
  }
}

/**
 * Wrapper for representing an array of UUIDs.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcUuidArray
 */
export class GrpcUuidArray extends Message<GrpcUuidArray> {
  /**
   * Value that supports storing a UUID array.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcUuid value = 1;
   */
  value: GrpcUuid[] = [];

  constructor(data?: PartialMessage<GrpcUuidArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcUuidArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "message", T: GrpcUuid, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcUuidArray {
    return new GrpcUuidArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcUuidArray {
    return new GrpcUuidArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcUuidArray {
    return new GrpcUuidArray().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcUuidArray | PlainMessage<GrpcUuidArray> | undefined, b: GrpcUuidArray | PlainMessage<GrpcUuidArray> | undefined): boolean {
    return proto3.util.equals(GrpcUuidArray, a, b);
  }
}

/**
 * Wrapper for representing an array of FacetStatisticsDepth enums.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcFacetStatisticsDepthArray
 */
export class GrpcFacetStatisticsDepthArray extends Message<GrpcFacetStatisticsDepthArray> {
  /**
   * Value that supports storing a FacetStatisticsDepth array.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcFacetStatisticsDepth value = 1;
   */
  value: GrpcFacetStatisticsDepth[] = [];

  constructor(data?: PartialMessage<GrpcFacetStatisticsDepthArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcFacetStatisticsDepthArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(GrpcFacetStatisticsDepth), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcFacetStatisticsDepthArray {
    return new GrpcFacetStatisticsDepthArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcFacetStatisticsDepthArray {
    return new GrpcFacetStatisticsDepthArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcFacetStatisticsDepthArray {
    return new GrpcFacetStatisticsDepthArray().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcFacetStatisticsDepthArray | PlainMessage<GrpcFacetStatisticsDepthArray> | undefined, b: GrpcFacetStatisticsDepthArray | PlainMessage<GrpcFacetStatisticsDepthArray> | undefined): boolean {
    return proto3.util.equals(GrpcFacetStatisticsDepthArray, a, b);
  }
}

/**
 * Wrapper for representing an array of QueryPriceModeArray enums.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcQueryPriceModeArray
 */
export class GrpcQueryPriceModeArray extends Message<GrpcQueryPriceModeArray> {
  /**
   * Value that supports storing a QueryPriceMode array.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcQueryPriceMode value = 1;
   */
  value: GrpcQueryPriceMode[] = [];

  constructor(data?: PartialMessage<GrpcQueryPriceModeArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcQueryPriceModeArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(GrpcQueryPriceMode), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcQueryPriceModeArray {
    return new GrpcQueryPriceModeArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcQueryPriceModeArray {
    return new GrpcQueryPriceModeArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcQueryPriceModeArray {
    return new GrpcQueryPriceModeArray().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcQueryPriceModeArray | PlainMessage<GrpcQueryPriceModeArray> | undefined, b: GrpcQueryPriceModeArray | PlainMessage<GrpcQueryPriceModeArray> | undefined): boolean {
    return proto3.util.equals(GrpcQueryPriceModeArray, a, b);
  }
}

/**
 * Wrapper for representing an array of PriceContentMode enums.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcPriceContentModeArray
 */
export class GrpcPriceContentModeArray extends Message<GrpcPriceContentModeArray> {
  /**
   * Value that supports storing a PriceContentMode array.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcPriceContentMode value = 1;
   */
  value: GrpcPriceContentMode[] = [];

  constructor(data?: PartialMessage<GrpcPriceContentModeArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcPriceContentModeArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(GrpcPriceContentMode), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcPriceContentModeArray {
    return new GrpcPriceContentModeArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcPriceContentModeArray {
    return new GrpcPriceContentModeArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcPriceContentModeArray {
    return new GrpcPriceContentModeArray().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcPriceContentModeArray | PlainMessage<GrpcPriceContentModeArray> | undefined, b: GrpcPriceContentModeArray | PlainMessage<GrpcPriceContentModeArray> | undefined): boolean {
    return proto3.util.equals(GrpcPriceContentModeArray, a, b);
  }
}

/**
 * Wrapper for representing an array of AttributeSpecialValue enums.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcAttributeSpecialValueArray
 */
export class GrpcAttributeSpecialValueArray extends Message<GrpcAttributeSpecialValueArray> {
  /**
   * Value that supports storing an AttributeSpecialValue array.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcAttributeSpecialValue value = 1;
   */
  value: GrpcAttributeSpecialValue[] = [];

  constructor(data?: PartialMessage<GrpcAttributeSpecialValueArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcAttributeSpecialValueArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(GrpcAttributeSpecialValue), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcAttributeSpecialValueArray {
    return new GrpcAttributeSpecialValueArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcAttributeSpecialValueArray {
    return new GrpcAttributeSpecialValueArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcAttributeSpecialValueArray {
    return new GrpcAttributeSpecialValueArray().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcAttributeSpecialValueArray | PlainMessage<GrpcAttributeSpecialValueArray> | undefined, b: GrpcAttributeSpecialValueArray | PlainMessage<GrpcAttributeSpecialValueArray> | undefined): boolean {
    return proto3.util.equals(GrpcAttributeSpecialValueArray, a, b);
  }
}

/**
 * Wrapper for representing an array of OrderDirection enums.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcOrderDirectionArray
 */
export class GrpcOrderDirectionArray extends Message<GrpcOrderDirectionArray> {
  /**
   * Value that supports storing an OrderDirection array.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcOrderDirection value = 1;
   */
  value: GrpcOrderDirection[] = [];

  constructor(data?: PartialMessage<GrpcOrderDirectionArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcOrderDirectionArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(GrpcOrderDirection), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcOrderDirectionArray {
    return new GrpcOrderDirectionArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcOrderDirectionArray {
    return new GrpcOrderDirectionArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcOrderDirectionArray {
    return new GrpcOrderDirectionArray().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcOrderDirectionArray | PlainMessage<GrpcOrderDirectionArray> | undefined, b: GrpcOrderDirectionArray | PlainMessage<GrpcOrderDirectionArray> | undefined): boolean {
    return proto3.util.equals(GrpcOrderDirectionArray, a, b);
  }
}

/**
 * Wrapper for representing an array of EmptyHierarchicalEntityBehaviour enums.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEmptyHierarchicalEntityBehaviourArray
 */
export class GrpcEmptyHierarchicalEntityBehaviourArray extends Message<GrpcEmptyHierarchicalEntityBehaviourArray> {
  /**
   * Value that supports storing an EmptyHierarchicalEntityBehaviour array.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcEmptyHierarchicalEntityBehaviour value = 1;
   */
  value: GrpcEmptyHierarchicalEntityBehaviour[] = [];

  constructor(data?: PartialMessage<GrpcEmptyHierarchicalEntityBehaviourArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcEmptyHierarchicalEntityBehaviourArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(GrpcEmptyHierarchicalEntityBehaviour), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcEmptyHierarchicalEntityBehaviourArray {
    return new GrpcEmptyHierarchicalEntityBehaviourArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcEmptyHierarchicalEntityBehaviourArray {
    return new GrpcEmptyHierarchicalEntityBehaviourArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcEmptyHierarchicalEntityBehaviourArray {
    return new GrpcEmptyHierarchicalEntityBehaviourArray().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcEmptyHierarchicalEntityBehaviourArray | PlainMessage<GrpcEmptyHierarchicalEntityBehaviourArray> | undefined, b: GrpcEmptyHierarchicalEntityBehaviourArray | PlainMessage<GrpcEmptyHierarchicalEntityBehaviourArray> | undefined): boolean {
    return proto3.util.equals(GrpcEmptyHierarchicalEntityBehaviourArray, a, b);
  }
}

/**
 * Wrapper for representing an array of StatisticsBase enums.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcStatisticsBaseArray
 */
export class GrpcStatisticsBaseArray extends Message<GrpcStatisticsBaseArray> {
  /**
   * Value that supports storing a StatisticsBase array.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcStatisticsBase value = 1;
   */
  value: GrpcStatisticsBase[] = [];

  constructor(data?: PartialMessage<GrpcStatisticsBaseArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcStatisticsBaseArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(GrpcStatisticsBase), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcStatisticsBaseArray {
    return new GrpcStatisticsBaseArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcStatisticsBaseArray {
    return new GrpcStatisticsBaseArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcStatisticsBaseArray {
    return new GrpcStatisticsBaseArray().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcStatisticsBaseArray | PlainMessage<GrpcStatisticsBaseArray> | undefined, b: GrpcStatisticsBaseArray | PlainMessage<GrpcStatisticsBaseArray> | undefined): boolean {
    return proto3.util.equals(GrpcStatisticsBaseArray, a, b);
  }
}

/**
 * Wrapper for representing an array of StatisticsType enums.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcStatisticsTypeArray
 */
export class GrpcStatisticsTypeArray extends Message<GrpcStatisticsTypeArray> {
  /**
   * Value that supports storing a StatisticsType array.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcStatisticsType value = 1;
   */
  value: GrpcStatisticsType[] = [];

  constructor(data?: PartialMessage<GrpcStatisticsTypeArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcStatisticsTypeArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(GrpcStatisticsType), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcStatisticsTypeArray {
    return new GrpcStatisticsTypeArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcStatisticsTypeArray {
    return new GrpcStatisticsTypeArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcStatisticsTypeArray {
    return new GrpcStatisticsTypeArray().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcStatisticsTypeArray | PlainMessage<GrpcStatisticsTypeArray> | undefined, b: GrpcStatisticsTypeArray | PlainMessage<GrpcStatisticsTypeArray> | undefined): boolean {
    return proto3.util.equals(GrpcStatisticsTypeArray, a, b);
  }
}

/**
 * Wrapper for representing an array of HistogramBehavior enums.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcHistogramBehaviorTypeArray
 */
export class GrpcHistogramBehaviorTypeArray extends Message<GrpcHistogramBehaviorTypeArray> {
  /**
   * Value that supports storing a HistogramBehavior array.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcHistogramBehavior value = 1;
   */
  value: GrpcHistogramBehavior[] = [];

  constructor(data?: PartialMessage<GrpcHistogramBehaviorTypeArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcHistogramBehaviorTypeArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(GrpcHistogramBehavior), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcHistogramBehaviorTypeArray {
    return new GrpcHistogramBehaviorTypeArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcHistogramBehaviorTypeArray {
    return new GrpcHistogramBehaviorTypeArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcHistogramBehaviorTypeArray {
    return new GrpcHistogramBehaviorTypeArray().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcHistogramBehaviorTypeArray | PlainMessage<GrpcHistogramBehaviorTypeArray> | undefined, b: GrpcHistogramBehaviorTypeArray | PlainMessage<GrpcHistogramBehaviorTypeArray> | undefined): boolean {
    return proto3.util.equals(GrpcHistogramBehaviorTypeArray, a, b);
  }
}

/**
 * Wrapper for representing an array of Scope enums.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEntityScopeArray
 */
export class GrpcEntityScopeArray extends Message<GrpcEntityScopeArray> {
  /**
   * Value that supports storing a Scope array.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcEntityScope value = 1;
   */
  value: GrpcEntityScope[] = [];

  constructor(data?: PartialMessage<GrpcEntityScopeArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcEntityScopeArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "value", kind: "enum", T: proto3.getEnumType(GrpcEntityScope), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcEntityScopeArray {
    return new GrpcEntityScopeArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcEntityScopeArray {
    return new GrpcEntityScopeArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcEntityScopeArray {
    return new GrpcEntityScopeArray().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcEntityScopeArray | PlainMessage<GrpcEntityScopeArray> | undefined, b: GrpcEntityScopeArray | PlainMessage<GrpcEntityScopeArray> | undefined): boolean {
    return proto3.util.equals(GrpcEntityScopeArray, a, b);
  }
}

/**
 * Structure that holds one of the supported data type values, its type and version of stored value.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEvitaValue
 */
export class GrpcEvitaValue extends Message<GrpcEvitaValue> {
  /**
   * The stored value. May by only one of the following at the time.
   *
   * @generated from oneof io.evitadb.externalApi.grpc.generated.GrpcEvitaValue.value
   */
  value: {
    /**
     * String value.
     *
     * @generated from field: string stringValue = 1;
     */
    value: string;
    case: "stringValue";
  } | {
    /**
     * Integer value.
     *
     * @generated from field: int32 integerValue = 2;
     */
    value: number;
    case: "integerValue";
  } | {
    /**
     * Long value.
     *
     * @generated from field: int64 longValue = 3;
     */
    value: bigint;
    case: "longValue";
  } | {
    /**
     * Boolean value.
     *
     * @generated from field: bool booleanValue = 4;
     */
    value: boolean;
    case: "booleanValue";
  } | {
    /**
     * BigDecimal value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcBigDecimal bigDecimalValue = 5;
     */
    value: GrpcBigDecimal;
    case: "bigDecimalValue";
  } | {
    /**
     * DateTimeRange value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcDateTimeRange dateTimeRangeValue = 6;
     */
    value: GrpcDateTimeRange;
    case: "dateTimeRangeValue";
  } | {
    /**
     * IntegerNumberRange value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcIntegerNumberRange integerNumberRangeValue = 7;
     */
    value: GrpcIntegerNumberRange;
    case: "integerNumberRangeValue";
  } | {
    /**
     * LongNumberRange value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcLongNumberRange longNumberRangeValue = 8;
     */
    value: GrpcLongNumberRange;
    case: "longNumberRangeValue";
  } | {
    /**
     * BigDecimalNumberRange value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcBigDecimalNumberRange bigDecimalNumberRangeValue = 9;
     */
    value: GrpcBigDecimalNumberRange;
    case: "bigDecimalNumberRangeValue";
  } | {
    /**
     * OffsetDateTime value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcOffsetDateTime offsetDateTimeValue = 10;
     */
    value: GrpcOffsetDateTime;
    case: "offsetDateTimeValue";
  } | {
    /**
     * Locale value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcLocale localeValue = 11;
     */
    value: GrpcLocale;
    case: "localeValue";
  } | {
    /**
     * Currency value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcCurrency currencyValue = 12;
     */
    value: GrpcCurrency;
    case: "currencyValue";
  } | {
    /**
     * UUID value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcUuid uuidValue = 13;
     */
    value: GrpcUuid;
    case: "uuidValue";
  } | {
    /**
     * Predecessor value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcPredecessor predecessorValue = 14;
     */
    value: GrpcPredecessor;
    case: "predecessorValue";
  } | {
    /**
     * Array of string values.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcStringArray stringArrayValue = 50;
     */
    value: GrpcStringArray;
    case: "stringArrayValue";
  } | {
    /**
     * Array of integer values.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcIntegerArray integerArrayValue = 51;
     */
    value: GrpcIntegerArray;
    case: "integerArrayValue";
  } | {
    /**
     * Array of long values.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcLongArray longArrayValue = 52;
     */
    value: GrpcLongArray;
    case: "longArrayValue";
  } | {
    /**
     * Array of boolean values.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcBooleanArray booleanArrayValue = 53;
     */
    value: GrpcBooleanArray;
    case: "booleanArrayValue";
  } | {
    /**
     * Array of BigDecimal values.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcBigDecimalArray bigDecimalArrayValue = 54;
     */
    value: GrpcBigDecimalArray;
    case: "bigDecimalArrayValue";
  } | {
    /**
     * Array of DateTimeRange values.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcDateTimeRangeArray dateTimeRangeArrayValue = 55;
     */
    value: GrpcDateTimeRangeArray;
    case: "dateTimeRangeArrayValue";
  } | {
    /**
     * Array of IntegerNumberRange values.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcIntegerNumberRangeArray integerNumberRangeArrayValue = 56;
     */
    value: GrpcIntegerNumberRangeArray;
    case: "integerNumberRangeArrayValue";
  } | {
    /**
     * Array of LongNumberRange values.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcLongNumberRangeArray longNumberRangeArrayValue = 57;
     */
    value: GrpcLongNumberRangeArray;
    case: "longNumberRangeArrayValue";
  } | {
    /**
     * Array of BigDecimalNumberRange values.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcBigDecimalNumberRangeArray bigDecimalNumberRangeArrayValue = 58;
     */
    value: GrpcBigDecimalNumberRangeArray;
    case: "bigDecimalNumberRangeArrayValue";
  } | {
    /**
     * Array of OffsetDateTime values.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcOffsetDateTimeArray offsetDateTimeArrayValue = 59;
     */
    value: GrpcOffsetDateTimeArray;
    case: "offsetDateTimeArrayValue";
  } | {
    /**
     * Array of Locale values.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcLocaleArray localeArrayValue = 60;
     */
    value: GrpcLocaleArray;
    case: "localeArrayValue";
  } | {
    /**
     * Array of Currency values.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcCurrencyArray currencyArrayValue = 61;
     */
    value: GrpcCurrencyArray;
    case: "currencyArrayValue";
  } | {
    /**
     * Array of UUID values.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcUuidArray uuidArrayValue = 62;
     */
    value: GrpcUuidArray;
    case: "uuidArrayValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * The type of the stored value.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEvitaDataType type = 100;
   */
  type = GrpcEvitaDataType.STRING;

  /**
   * Contains version of this value and gets increased with any entity type update. Allows to execute
   * optimistic locking i.e. avoiding parallel modifications. May be null if value is used within larger complex object.
   *
   * @generated from field: google.protobuf.Int32Value version = 101;
   */
  version?: number;

  constructor(data?: PartialMessage<GrpcEvitaValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcEvitaValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stringValue", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 2, name: "integerValue", kind: "scalar", T: 5 /* ScalarType.INT32 */, oneof: "value" },
    { no: 3, name: "longValue", kind: "scalar", T: 3 /* ScalarType.INT64 */, oneof: "value" },
    { no: 4, name: "booleanValue", kind: "scalar", T: 8 /* ScalarType.BOOL */, oneof: "value" },
    { no: 5, name: "bigDecimalValue", kind: "message", T: GrpcBigDecimal, oneof: "value" },
    { no: 6, name: "dateTimeRangeValue", kind: "message", T: GrpcDateTimeRange, oneof: "value" },
    { no: 7, name: "integerNumberRangeValue", kind: "message", T: GrpcIntegerNumberRange, oneof: "value" },
    { no: 8, name: "longNumberRangeValue", kind: "message", T: GrpcLongNumberRange, oneof: "value" },
    { no: 9, name: "bigDecimalNumberRangeValue", kind: "message", T: GrpcBigDecimalNumberRange, oneof: "value" },
    { no: 10, name: "offsetDateTimeValue", kind: "message", T: GrpcOffsetDateTime, oneof: "value" },
    { no: 11, name: "localeValue", kind: "message", T: GrpcLocale, oneof: "value" },
    { no: 12, name: "currencyValue", kind: "message", T: GrpcCurrency, oneof: "value" },
    { no: 13, name: "uuidValue", kind: "message", T: GrpcUuid, oneof: "value" },
    { no: 14, name: "predecessorValue", kind: "message", T: GrpcPredecessor, oneof: "value" },
    { no: 50, name: "stringArrayValue", kind: "message", T: GrpcStringArray, oneof: "value" },
    { no: 51, name: "integerArrayValue", kind: "message", T: GrpcIntegerArray, oneof: "value" },
    { no: 52, name: "longArrayValue", kind: "message", T: GrpcLongArray, oneof: "value" },
    { no: 53, name: "booleanArrayValue", kind: "message", T: GrpcBooleanArray, oneof: "value" },
    { no: 54, name: "bigDecimalArrayValue", kind: "message", T: GrpcBigDecimalArray, oneof: "value" },
    { no: 55, name: "dateTimeRangeArrayValue", kind: "message", T: GrpcDateTimeRangeArray, oneof: "value" },
    { no: 56, name: "integerNumberRangeArrayValue", kind: "message", T: GrpcIntegerNumberRangeArray, oneof: "value" },
    { no: 57, name: "longNumberRangeArrayValue", kind: "message", T: GrpcLongNumberRangeArray, oneof: "value" },
    { no: 58, name: "bigDecimalNumberRangeArrayValue", kind: "message", T: GrpcBigDecimalNumberRangeArray, oneof: "value" },
    { no: 59, name: "offsetDateTimeArrayValue", kind: "message", T: GrpcOffsetDateTimeArray, oneof: "value" },
    { no: 60, name: "localeArrayValue", kind: "message", T: GrpcLocaleArray, oneof: "value" },
    { no: 61, name: "currencyArrayValue", kind: "message", T: GrpcCurrencyArray, oneof: "value" },
    { no: 62, name: "uuidArrayValue", kind: "message", T: GrpcUuidArray, oneof: "value" },
    { no: 100, name: "type", kind: "enum", T: proto3.getEnumType(GrpcEvitaDataType) },
    { no: 101, name: "version", kind: "message", T: Int32Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcEvitaValue {
    return new GrpcEvitaValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcEvitaValue {
    return new GrpcEvitaValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcEvitaValue {
    return new GrpcEvitaValue().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcEvitaValue | PlainMessage<GrpcEvitaValue> | undefined, b: GrpcEvitaValue | PlainMessage<GrpcEvitaValue> | undefined): boolean {
    return proto3.util.equals(GrpcEvitaValue, a, b);
  }
}

/**
 * Structure that holds AssociatedData value. Might be one of the supported data types or a JSON string that will be
 * internally converted into ComplexDataObject.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEvitaAssociatedDataValue
 */
export class GrpcEvitaAssociatedDataValue extends Message<GrpcEvitaAssociatedDataValue> {
  /**
   * The stored value. May by only one of the following at the time.
   *
   * @generated from oneof io.evitadb.externalApi.grpc.generated.GrpcEvitaAssociatedDataValue.value
   */
  value: {
    /**
     * Primitive value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEvitaValue primitiveValue = 1;
     */
    value: GrpcEvitaValue;
    case: "primitiveValue";
  } | {
    /**
     * JSON string value, this old approach led to data type loss and is deprecated.
     *
     * @generated from field: string jsonValue = 2 [deprecated = true];
     * @deprecated
     */
    value: string;
    case: "jsonValue";
  } | {
    /**
     * The array of values.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcDataItem root = 4;
     */
    value: GrpcDataItem;
    case: "root";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * The type of the stored value.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEvitaAssociatedDataDataType.GrpcEvitaDataType type = 100;
   */
  type = GrpcEvitaAssociatedDataDataType_GrpcEvitaDataType.STRING;

  /**
   * Contains version of this value and gets increased with any entity type update. Allows to execute
   * 			optimistic locking i.e. avoiding parallel modifications.
   *
   * @generated from field: google.protobuf.Int32Value version = 3;
   */
  version?: number;

  constructor(data?: PartialMessage<GrpcEvitaAssociatedDataValue>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcEvitaAssociatedDataValue";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "primitiveValue", kind: "message", T: GrpcEvitaValue, oneof: "value" },
    { no: 2, name: "jsonValue", kind: "scalar", T: 9 /* ScalarType.STRING */, oneof: "value" },
    { no: 4, name: "root", kind: "message", T: GrpcDataItem, oneof: "value" },
    { no: 100, name: "type", kind: "enum", T: proto3.getEnumType(GrpcEvitaAssociatedDataDataType_GrpcEvitaDataType) },
    { no: 3, name: "version", kind: "message", T: Int32Value },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcEvitaAssociatedDataValue {
    return new GrpcEvitaAssociatedDataValue().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcEvitaAssociatedDataValue {
    return new GrpcEvitaAssociatedDataValue().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcEvitaAssociatedDataValue {
    return new GrpcEvitaAssociatedDataValue().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcEvitaAssociatedDataValue | PlainMessage<GrpcEvitaAssociatedDataValue> | undefined, b: GrpcEvitaAssociatedDataValue | PlainMessage<GrpcEvitaAssociatedDataValue> | undefined): boolean {
    return proto3.util.equals(GrpcEvitaAssociatedDataValue, a, b);
  }
}

/**
 * Structure that holds a complex object. It can be either a map or an array of values.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDataItem
 */
export class GrpcDataItem extends Message<GrpcDataItem> {
  /**
   * The stored value. May by only one of the following at the time.
   *
   * @generated from oneof io.evitadb.externalApi.grpc.generated.GrpcDataItem.value
   */
  value: {
    /**
     * Primitive value.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEvitaValue primitiveValue = 1;
     */
    value: GrpcEvitaValue;
    case: "primitiveValue";
  } | {
    /**
     * The array of values.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcDataItemArray arrayValue = 4;
     */
    value: GrpcDataItemArray;
    case: "arrayValue";
  } | {
    /**
     * The map of values.
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.DataItemMap mapValue = 5;
     */
    value: DataItemMap;
    case: "mapValue";
  } | { case: undefined; value?: undefined } = { case: undefined };

  constructor(data?: PartialMessage<GrpcDataItem>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcDataItem";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "primitiveValue", kind: "message", T: GrpcEvitaValue, oneof: "value" },
    { no: 4, name: "arrayValue", kind: "message", T: GrpcDataItemArray, oneof: "value" },
    { no: 5, name: "mapValue", kind: "message", T: DataItemMap, oneof: "value" },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcDataItem {
    return new GrpcDataItem().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcDataItem {
    return new GrpcDataItem().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcDataItem {
    return new GrpcDataItem().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcDataItem | PlainMessage<GrpcDataItem> | undefined, b: GrpcDataItem | PlainMessage<GrpcDataItem> | undefined): boolean {
    return proto3.util.equals(GrpcDataItem, a, b);
  }
}

/**
 * Structure that holds a array of values stored inside array of the complex object.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDataItemArray
 */
export class GrpcDataItemArray extends Message<GrpcDataItemArray> {
  /**
   * The stored array of values.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcDataItem children = 1;
   */
  children: GrpcDataItem[] = [];

  constructor(data?: PartialMessage<GrpcDataItemArray>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcDataItemArray";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "children", kind: "message", T: GrpcDataItem, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcDataItemArray {
    return new GrpcDataItemArray().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcDataItemArray {
    return new GrpcDataItemArray().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcDataItemArray {
    return new GrpcDataItemArray().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcDataItemArray | PlainMessage<GrpcDataItemArray> | undefined, b: GrpcDataItemArray | PlainMessage<GrpcDataItemArray> | undefined): boolean {
    return proto3.util.equals(GrpcDataItemArray, a, b);
  }
}

/**
 * Structure that holds a map of values stored inside map of the complex object.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.DataItemMap
 */
export class DataItemMap extends Message<DataItemMap> {
  /**
   * The stored named fields with associated values.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcDataItem> data = 1;
   */
  data: { [key: string]: GrpcDataItem } = {};

  constructor(data?: PartialMessage<DataItemMap>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.DataItemMap";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "data", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: GrpcDataItem} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): DataItemMap {
    return new DataItemMap().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): DataItemMap {
    return new DataItemMap().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): DataItemMap {
    return new DataItemMap().fromJsonString(jsonString, options);
  }

  static equals(a: DataItemMap | PlainMessage<DataItemMap> | undefined, b: DataItemMap | PlainMessage<DataItemMap> | undefined): boolean {
    return proto3.util.equals(DataItemMap, a, b);
  }
}

/**
 * identification of the file available for fetching
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcFile
 */
export class GrpcFile extends Message<GrpcFile> {
  /**
   * Identification of the file
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcUuid fileId = 1;
   */
  fileId?: GrpcUuid;

  /**
   * File name
   *
   * @generated from field: string name = 2;
   */
  name = "";

  /**
   * Detailed description of the file
   *
   * @generated from field: google.protobuf.StringValue description = 3;
   */
  description?: string;

  /**
   * Content type of the file
   *
   * @generated from field: string contentType = 4;
   */
  contentType = "";

  /**
   * Size of the file in bytes
   *
   * @generated from field: int64 totalSizeInBytes = 5;
   */
  totalSizeInBytes = protoInt64.zero;

  /**
   * Date and time when the file was created
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcOffsetDateTime created = 6;
   */
  created?: GrpcOffsetDateTime;

  /**
   * Origin of the file (usually the taskType)
   *
   * @generated from field: google.protobuf.StringValue origin = 7;
   */
  origin?: string;

  constructor(data?: PartialMessage<GrpcFile>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcFile";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "fileId", kind: "message", T: GrpcUuid },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "description", kind: "message", T: StringValue },
    { no: 4, name: "contentType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 5, name: "totalSizeInBytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "created", kind: "message", T: GrpcOffsetDateTime },
    { no: 7, name: "origin", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcFile {
    return new GrpcFile().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcFile {
    return new GrpcFile().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcFile {
    return new GrpcFile().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcFile | PlainMessage<GrpcFile> | undefined, b: GrpcFile | PlainMessage<GrpcFile> | undefined): boolean {
    return proto3.util.equals(GrpcFile, a, b);
  }
}

/**
 * Record representing status of particular asynchronous task
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcTaskStatus
 */
export class GrpcTaskStatus extends Message<GrpcTaskStatus> {
  /**
   * Type of the task (shortName of the task)
   * Available tasks:
   * - "BackupTask": Task responsible for backing up the catalog data and WAL files into a ZIP file.
   * - "RestoreTask": This task is used to restore a catalog from a ZIP file.
   * - "JfrRecorderTask": Task is responsible for recording selected JFR events into an exportable file.
   * - "MetricTask": Task that listens for JFR events and transforms them into Prometheus metrics.
   *
   * @generated from field: string taskType = 1;
   */
  taskType = "";

  /**
   * Longer, human-readable name of the task
   *
   * @generated from field: string taskName = 2;
   */
  taskName = "";

  /**
   * Identification of the task
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcUuid taskId = 3;
   */
  taskId?: GrpcUuid;

  /**
   * Name of the catalog the task is related to (optional)
   *
   * @generated from field: google.protobuf.StringValue catalogName = 4;
   */
  catalogName?: string;

  /**
   * Date and time when the task was issued
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcOffsetDateTime issued = 5;
   */
  issued?: GrpcOffsetDateTime;

  /**
   * Date and time when the task was started
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcOffsetDateTime started = 6;
   */
  started?: GrpcOffsetDateTime;

  /**
   * Date and time when the task was finished
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcOffsetDateTime finished = 7;
   */
  finished?: GrpcOffsetDateTime;

  /**
   * Simplified state of the status
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcTaskSimplifiedState simplifiedState = 8;
   */
  simplifiedState = GrpcTaskSimplifiedState.TASK_QUEUED;

  /**
   * Progress of the task (0-100)
   *
   * @generated from field: int32 progress = 9;
   */
  progress = 0;

  /**
   * Configuration settings of the task
   *
   * @generated from field: google.protobuf.StringValue settings = 10;
   */
  settings?: string;

  /**
   * Result of the task
   *
   * @generated from oneof io.evitadb.externalApi.grpc.generated.GrpcTaskStatus.result
   */
  result: {
    /**
     * Textual result of the task
     *
     * @generated from field: google.protobuf.StringValue text = 11;
     */
    value: StringValue;
    case: "text";
  } | {
    /**
     * File that was created by the task and is available for fetching
     *
     * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcFile file = 12;
     */
    value: GrpcFile;
    case: "file";
  } | { case: undefined; value?: undefined } = { case: undefined };

  /**
   * Exception that occurred during the task execution
   *
   * @generated from field: google.protobuf.StringValue exception = 13;
   */
  exception?: string;

  /**
   * List of task traits
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcTaskTrait trait = 14;
   */
  trait: GrpcTaskTrait[] = [];

  /**
   * Date and time when the task was created
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcOffsetDateTime created = 15;
   */
  created?: GrpcOffsetDateTime;

  constructor(data?: PartialMessage<GrpcTaskStatus>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcTaskStatus";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "taskType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "taskName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "taskId", kind: "message", T: GrpcUuid },
    { no: 4, name: "catalogName", kind: "message", T: StringValue },
    { no: 5, name: "issued", kind: "message", T: GrpcOffsetDateTime },
    { no: 6, name: "started", kind: "message", T: GrpcOffsetDateTime },
    { no: 7, name: "finished", kind: "message", T: GrpcOffsetDateTime },
    { no: 8, name: "simplifiedState", kind: "enum", T: proto3.getEnumType(GrpcTaskSimplifiedState) },
    { no: 9, name: "progress", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 10, name: "settings", kind: "message", T: StringValue },
    { no: 11, name: "text", kind: "message", T: StringValue, oneof: "result" },
    { no: 12, name: "file", kind: "message", T: GrpcFile, oneof: "result" },
    { no: 13, name: "exception", kind: "message", T: StringValue },
    { no: 14, name: "trait", kind: "enum", T: proto3.getEnumType(GrpcTaskTrait), repeated: true },
    { no: 15, name: "created", kind: "message", T: GrpcOffsetDateTime },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcTaskStatus {
    return new GrpcTaskStatus().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcTaskStatus {
    return new GrpcTaskStatus().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcTaskStatus {
    return new GrpcTaskStatus().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcTaskStatus | PlainMessage<GrpcTaskStatus> | undefined, b: GrpcTaskStatus | PlainMessage<GrpcTaskStatus> | undefined): boolean {
    return proto3.util.equals(GrpcTaskStatus, a, b);
  }
}

/**
 * Aggregates basic data about the catalog and entity types stored in it.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcCatalogStatistics
 */
export class GrpcCatalogStatistics extends Message<GrpcCatalogStatistics> {
  /**
   * name of the catalog
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcUuid catalogId = 1;
   */
  catalogId?: GrpcUuid;

  /**
   * name of the catalog
   *
   * @generated from field: string catalogName = 2;
   */
  catalogName = "";

  /**
   * true if the catalog is corrupted (other data will be not available)
   *
   * @generated from field: bool corrupted = 3;
   */
  corrupted = false;

  /**
   * current state of the catalog, null for corrupted catalog
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcCatalogState catalogState = 4;
   */
  catalogState = GrpcCatalogState.WARMING_UP;

  /**
   * version of the catalog, -1 for corrupted catalog
   *
   * @generated from field: int64 catalogVersion = 5;
   */
  catalogVersion = protoInt64.zero;

  /**
   * total number of records in the catalog, -1 for corrupted catalog
   *
   * @generated from field: int64 totalRecords = 6;
   */
  totalRecords = protoInt64.zero;

  /**
   * total number of indexes in the catalog, -1 for corrupted catalog
   *
   * @generated from field: int64 indexCount = 7;
   */
  indexCount = protoInt64.zero;

  /**
   * total size of the catalog on disk in bytes
   *
   * @generated from field: int64 sizeOnDiskInBytes = 8;
   */
  sizeOnDiskInBytes = protoInt64.zero;

  /**
   * statistics for each entity collection in the catalog, empty array for corrupted catalog
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcEntityCollectionStatistics entityCollectionStatistics = 9;
   */
  entityCollectionStatistics: GrpcEntityCollectionStatistics[] = [];

  constructor(data?: PartialMessage<GrpcCatalogStatistics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcCatalogStatistics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalogId", kind: "message", T: GrpcUuid },
    { no: 2, name: "catalogName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "corrupted", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "catalogState", kind: "enum", T: proto3.getEnumType(GrpcCatalogState) },
    { no: 5, name: "catalogVersion", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 6, name: "totalRecords", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "indexCount", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "sizeOnDiskInBytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 9, name: "entityCollectionStatistics", kind: "message", T: GrpcEntityCollectionStatistics, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcCatalogStatistics {
    return new GrpcCatalogStatistics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcCatalogStatistics {
    return new GrpcCatalogStatistics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcCatalogStatistics {
    return new GrpcCatalogStatistics().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcCatalogStatistics | PlainMessage<GrpcCatalogStatistics> | undefined, b: GrpcCatalogStatistics | PlainMessage<GrpcCatalogStatistics> | undefined): boolean {
    return proto3.util.equals(GrpcCatalogStatistics, a, b);
  }
}

/**
 * Aggregates basic data about the entity collection.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEntityCollectionStatistics
 */
export class GrpcEntityCollectionStatistics extends Message<GrpcEntityCollectionStatistics> {
  /**
   * name of the entity collection
   *
   * @generated from field: string entityType = 1;
   */
  entityType = "";

  /**
   * total number of records in the entity collection
   *
   * @generated from field: int32 totalRecords = 2;
   */
  totalRecords = 0;

  /**
   * total number of indexes in the entity collection
   *
   * @generated from field: int32 indexCount = 3;
   */
  indexCount = 0;

  /**
   * total size of the entity collection on disk in bytes
   *
   * @generated from field: int64 sizeOnDiskInBytes = 4;
   */
  sizeOnDiskInBytes = protoInt64.zero;

  constructor(data?: PartialMessage<GrpcEntityCollectionStatistics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcEntityCollectionStatistics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entityType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "totalRecords", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 3, name: "indexCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "sizeOnDiskInBytes", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcEntityCollectionStatistics {
    return new GrpcEntityCollectionStatistics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcEntityCollectionStatistics {
    return new GrpcEntityCollectionStatistics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcEntityCollectionStatistics {
    return new GrpcEntityCollectionStatistics().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcEntityCollectionStatistics | PlainMessage<GrpcEntityCollectionStatistics> | undefined, b: GrpcEntityCollectionStatistics | PlainMessage<GrpcEntityCollectionStatistics> | undefined): boolean {
    return proto3.util.equals(GrpcEntityCollectionStatistics, a, b);
  }
}

/**
 * Structure for representing a name in a particular naming convention.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcNameVariant
 */
export class GrpcNameVariant extends Message<GrpcNameVariant> {
  /**
   * naming convention the name is in
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcNamingConvention namingConvention = 1;
   */
  namingConvention = GrpcNamingConvention.CAMEL_CASE;

  /**
   * the name in the particular naming convention
   *
   * @generated from field: string name = 2;
   */
  name = "";

  constructor(data?: PartialMessage<GrpcNameVariant>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcNameVariant";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "namingConvention", kind: "enum", T: proto3.getEnumType(GrpcNamingConvention) },
    { no: 2, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcNameVariant {
    return new GrpcNameVariant().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcNameVariant {
    return new GrpcNameVariant().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcNameVariant {
    return new GrpcNameVariant().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcNameVariant | PlainMessage<GrpcNameVariant> | undefined, b: GrpcNameVariant | PlainMessage<GrpcNameVariant> | undefined): boolean {
    return proto3.util.equals(GrpcNameVariant, a, b);
  }
}

/**
 * uniqueness type associated with particular scope
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcScopedAttributeUniquenessType
 */
export class GrpcScopedAttributeUniquenessType extends Message<GrpcScopedAttributeUniquenessType> {
  /**
   * scope of entities where uniqueness is enforced
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntityScope scope = 1;
   */
  scope = GrpcEntityScope.SCOPE_LIVE;

  /**
   * type of uniqueness
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcAttributeUniquenessType uniquenessType = 2;
   */
  uniquenessType = GrpcAttributeUniquenessType.NOT_UNIQUE;

  constructor(data?: PartialMessage<GrpcScopedAttributeUniquenessType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcScopedAttributeUniquenessType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "scope", kind: "enum", T: proto3.getEnumType(GrpcEntityScope) },
    { no: 2, name: "uniquenessType", kind: "enum", T: proto3.getEnumType(GrpcAttributeUniquenessType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcScopedAttributeUniquenessType {
    return new GrpcScopedAttributeUniquenessType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcScopedAttributeUniquenessType {
    return new GrpcScopedAttributeUniquenessType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcScopedAttributeUniquenessType {
    return new GrpcScopedAttributeUniquenessType().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcScopedAttributeUniquenessType | PlainMessage<GrpcScopedAttributeUniquenessType> | undefined, b: GrpcScopedAttributeUniquenessType | PlainMessage<GrpcScopedAttributeUniquenessType> | undefined): boolean {
    return proto3.util.equals(GrpcScopedAttributeUniquenessType, a, b);
  }
}

/**
 * uniqueness type associated with particular scope
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcScopedGlobalAttributeUniquenessType
 */
export class GrpcScopedGlobalAttributeUniquenessType extends Message<GrpcScopedGlobalAttributeUniquenessType> {
  /**
   * scope of entities where uniqueness is enforced
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntityScope scope = 1;
   */
  scope = GrpcEntityScope.SCOPE_LIVE;

  /**
   * type of uniqueness
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcGlobalAttributeUniquenessType uniquenessType = 2;
   */
  uniquenessType = GrpcGlobalAttributeUniquenessType.NOT_GLOBALLY_UNIQUE;

  constructor(data?: PartialMessage<GrpcScopedGlobalAttributeUniquenessType>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcScopedGlobalAttributeUniquenessType";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "scope", kind: "enum", T: proto3.getEnumType(GrpcEntityScope) },
    { no: 2, name: "uniquenessType", kind: "enum", T: proto3.getEnumType(GrpcGlobalAttributeUniquenessType) },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcScopedGlobalAttributeUniquenessType {
    return new GrpcScopedGlobalAttributeUniquenessType().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcScopedGlobalAttributeUniquenessType {
    return new GrpcScopedGlobalAttributeUniquenessType().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcScopedGlobalAttributeUniquenessType {
    return new GrpcScopedGlobalAttributeUniquenessType().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcScopedGlobalAttributeUniquenessType | PlainMessage<GrpcScopedGlobalAttributeUniquenessType> | undefined, b: GrpcScopedGlobalAttributeUniquenessType | PlainMessage<GrpcScopedGlobalAttributeUniquenessType> | undefined): boolean {
    return proto3.util.equals(GrpcScopedGlobalAttributeUniquenessType, a, b);
  }
}

