// @generated by protoc-gen-es v2.5.1 with parameter "target=ts"
// @generated from file GrpcReferenceSchemaMutations.proto (package io.evitadb.externalApi.grpc.generated, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import type { GrpcAttributeInheritanceBehavior, GrpcCardinality, GrpcEntityScope } from "./GrpcEnums_pb";
import { file_GrpcEnums } from "./GrpcEnums_pb";
import type { GrpcAttributeSchemaMutation } from "./GrpcAttributeSchemaMutations_pb";
import { file_GrpcAttributeSchemaMutations } from "./GrpcAttributeSchemaMutations_pb";
import type { GrpcSortableAttributeCompoundSchemaMutation } from "./GrpcSortableAttributeCompoundSchemaMutations_pb";
import { file_GrpcSortableAttributeCompoundSchemaMutations } from "./GrpcSortableAttributeCompoundSchemaMutations_pb";
import { file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file GrpcReferenceSchemaMutations.proto.
 */
export const file_GrpcReferenceSchemaMutations: GenFile = /*@__PURE__*/
  fileDesc("CiJHcnBjUmVmZXJlbmNlU2NoZW1hTXV0YXRpb25zLnByb3RvEiVpby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkItsECiFHcnBjQ3JlYXRlUmVmZXJlbmNlU2NoZW1hTXV0YXRpb24SDAoEbmFtZRgBIAEoCRIxCgtkZXNjcmlwdGlvbhgCIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRI3ChFkZXByZWNhdGlvbk5vdGljZRgDIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRJLCgtjYXJkaW5hbGl0eRgEIAEoDjI2LmlvLmV2aXRhZGIuZXh0ZXJuYWxBcGkuZ3JwYy5nZW5lcmF0ZWQuR3JwY0NhcmRpbmFsaXR5EhwKFHJlZmVyZW5jZWRFbnRpdHlUeXBlGAUgASgJEiMKG3JlZmVyZW5jZWRFbnRpdHlUeXBlTWFuYWdlZBgGIAEoCBI5ChNyZWZlcmVuY2VkR3JvdXBUeXBlGAcgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlEiIKGnJlZmVyZW5jZWRHcm91cFR5cGVNYW5hZ2VkGAggASgIEhYKCmZpbHRlcmFibGUYCSABKAhCAhgBEhMKB2ZhY2V0ZWQYCiABKAhCAhgBEk8KD2luZGV4ZWRJblNjb3BlcxgLIAMoDjI2LmlvLmV2aXRhZGIuZXh0ZXJuYWxBcGkuZ3JwYy5nZW5lcmF0ZWQuR3JwY0VudGl0eVNjb3BlEk8KD2ZhY2V0ZWRJblNjb3BlcxgMIAMoDjI2LmlvLmV2aXRhZGIuZXh0ZXJuYWxBcGkuZ3JwYy5nZW5lcmF0ZWQuR3JwY0VudGl0eVNjb3BlIssFCipHcnBjQ3JlYXRlUmVmbGVjdGVkUmVmZXJlbmNlU2NoZW1hTXV0YXRpb24SDAoEbmFtZRgBIAEoCRIxCgtkZXNjcmlwdGlvbhgCIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRI3ChFkZXByZWNhdGlvbk5vdGljZRgDIAEoCzIcLmdvb2dsZS5wcm90b2J1Zi5TdHJpbmdWYWx1ZRJLCgtjYXJkaW5hbGl0eRgEIAEoDjI2LmlvLmV2aXRhZGIuZXh0ZXJuYWxBcGkuZ3JwYy5nZW5lcmF0ZWQuR3JwY0NhcmRpbmFsaXR5EhwKFHJlZmVyZW5jZWRFbnRpdHlUeXBlGAUgASgJEh4KFnJlZmxlY3RlZFJlZmVyZW5jZU5hbWUYBiABKAkSLwoHZmFjZXRlZBgHIAEoCzIaLmdvb2dsZS5wcm90b2J1Zi5Cb29sVmFsdWVCAhgBEm0KHGF0dHJpYnV0ZUluaGVyaXRhbmNlQmVoYXZpb3IYCCABKA4yRy5pby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkLkdycGNBdHRyaWJ1dGVJbmhlcml0YW5jZUJlaGF2aW9yEiIKGmF0dHJpYnV0ZUluaGVyaXRhbmNlRmlsdGVyGAkgAygJEhgKEGluZGV4ZWRJbmhlcml0ZWQYCiABKAgSTwoPaW5kZXhlZEluU2NvcGVzGAsgAygOMjYuaW8uZXZpdGFkYi5leHRlcm5hbEFwaS5ncnBjLmdlbmVyYXRlZC5HcnBjRW50aXR5U2NvcGUSGAoQZmFjZXRlZEluaGVyaXRlZBgMIAEoCBJPCg9mYWNldGVkSW5TY29wZXMYDSADKA4yNi5pby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkLkdycGNFbnRpdHlTY29wZSKfAQoqR3JwY01vZGlmeVJlZmVyZW5jZUF0dHJpYnV0ZVNjaGVtYU11dGF0aW9uEgwKBG5hbWUYASABKAkSYwoXYXR0cmlidXRlU2NoZW1hTXV0YXRpb24YAiABKAsyQi5pby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkLkdycGNBdHRyaWJ1dGVTY2hlbWFNdXRhdGlvbiLQAQo6R3JwY01vZGlmeVJlZmVyZW5jZVNvcnRhYmxlQXR0cmlidXRlQ29tcG91bmRTY2hlbWFNdXRhdGlvbhIMCgRuYW1lGAEgASgJEoMBCidzb3J0YWJsZUF0dHJpYnV0ZUNvbXBvdW5kU2NoZW1hTXV0YXRpb24YAiABKAsyUi5pby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkLkdycGNTb3J0YWJsZUF0dHJpYnV0ZUNvbXBvdW5kU2NoZW1hTXV0YXRpb24iiQEKLEdycGNNb2RpZnlSZWZlcmVuY2VTY2hlbWFDYXJkaW5hbGl0eU11dGF0aW9uEgwKBG5hbWUYASABKAkSSwoLY2FyZGluYWxpdHkYAiABKA4yNi5pby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkLkdycGNDYXJkaW5hbGl0eSJ7CjJHcnBjTW9kaWZ5UmVmZXJlbmNlU2NoZW1hRGVwcmVjYXRpb25Ob3RpY2VNdXRhdGlvbhIMCgRuYW1lGAEgASgJEjcKEWRlcHJlY2F0aW9uTm90aWNlGAIgASgLMhwuZ29vZ2xlLnByb3RvYnVmLlN0cmluZ1ZhbHVlIm8KLEdycGNNb2RpZnlSZWZlcmVuY2VTY2hlbWFEZXNjcmlwdGlvbk11dGF0aW9uEgwKBG5hbWUYASABKAkSMQoLZGVzY3JpcHRpb24YAiABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUiRgolR3JwY01vZGlmeVJlZmVyZW5jZVNjaGVtYU5hbWVNdXRhdGlvbhIMCgRuYW1lGAEgASgJEg8KB25ld05hbWUYAiABKAkiogEKM0dycGNNb2RpZnlSZWZlcmVuY2VTY2hlbWFSZWxhdGVkRW50aXR5R3JvdXBNdXRhdGlvbhIMCgRuYW1lGAEgASgJEjkKE3JlZmVyZW5jZWRHcm91cFR5cGUYAiABKAsyHC5nb29nbGUucHJvdG9idWYuU3RyaW5nVmFsdWUSIgoacmVmZXJlbmNlZEdyb3VwVHlwZU1hbmFnZWQYAyABKAgigQEKLkdycGNNb2RpZnlSZWZlcmVuY2VTY2hlbWFSZWxhdGVkRW50aXR5TXV0YXRpb24SDAoEbmFtZRgBIAEoCRIcChRyZWZlcmVuY2VkRW50aXR5VHlwZRgCIAEoCRIjChtyZWZlcmVuY2VkRW50aXR5VHlwZU1hbmFnZWQYAyABKAgi4QEKPkdycGNNb2RpZnlSZWZsZWN0ZWRSZWZlcmVuY2VBdHRyaWJ1dGVJbmhlcml0YW5jZVNjaGVtYU11dGF0aW9uEgwKBG5hbWUYASABKAkSbQocYXR0cmlidXRlSW5oZXJpdGFuY2VCZWhhdmlvchgCIAEoDjJHLmlvLmV2aXRhZGIuZXh0ZXJuYWxBcGkuZ3JwYy5nZW5lcmF0ZWQuR3JwY0F0dHJpYnV0ZUluaGVyaXRhbmNlQmVoYXZpb3ISIgoaYXR0cmlidXRlSW5oZXJpdGFuY2VGaWx0ZXIYAyADKAkiMQohR3JwY1JlbW92ZVJlZmVyZW5jZVNjaGVtYU11dGF0aW9uEgwKBG5hbWUYASABKAkirgEKJUdycGNTZXRSZWZlcmVuY2VTY2hlbWFGYWNldGVkTXV0YXRpb24SDAoEbmFtZRgBIAEoCRITCgdmYWNldGVkGAIgASgIQgIYARIRCglpbmhlcml0ZWQYAyABKAgSTwoPZmFjZXRlZEluU2NvcGVzGAQgAygOMjYuaW8uZXZpdGFkYi5leHRlcm5hbEFwaS5ncnBjLmdlbmVyYXRlZC5HcnBjRW50aXR5U2NvcGUimQEKJUdycGNTZXRSZWZlcmVuY2VTY2hlbWFJbmRleGVkTXV0YXRpb24SDAoEbmFtZRgBIAEoCRIRCglpbmhlcml0ZWQYAiABKAgSTwoPaW5kZXhlZEluU2NvcGVzGAMgAygOMjYuaW8uZXZpdGFkYi5leHRlcm5hbEFwaS5ncnBjLmdlbmVyYXRlZC5HcnBjRW50aXR5U2NvcGVCDFABqgIHRXZpdGFEQmIGcHJvdG8z", [file_GrpcEnums, file_GrpcAttributeSchemaMutations, file_GrpcSortableAttributeCompoundSchemaMutations, file_google_protobuf_wrappers]);

/**
 * Mutation is responsible for setting up a new `ReferenceSchema` in the `EntitySchema`.
 * Mutation can be used for altering also the existing `ReferenceSchema` alone.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcCreateReferenceSchemaMutation
 */
export type GrpcCreateReferenceSchemaMutation = Message<"io.evitadb.externalApi.grpc.generated.GrpcCreateReferenceSchemaMutation"> & {
  /**
   * Name of the reference the mutation is targeting.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Contains description of the model is optional but helps authors of the schema / client API to better
   * explain the original purpose of the model to the consumers.
   *
   * @generated from field: google.protobuf.StringValue description = 2;
   */
  description?: string;

  /**
   * Deprecation notice contains information about planned removal of this schema from the model / client API.
   * This allows to plan and evolve the schema allowing clients to adapt early to planned breaking changes.
   *
   * @generated from field: google.protobuf.StringValue deprecationNotice = 3;
   */
  deprecationNotice?: string;

  /**
   * Cardinality describes the expected count of relations of this type. In evitaDB we define only one-way
   * relationship from the perspective of the entity. We stick to the ERD modelling
   * [standards](https://www.gleek.io/blog/crows-foot-notation.html) here. Cardinality affect the design
   * of the client API (returning only single reference or collections) and also help us to protect the consistency
   * of the data so that conforms to the creator mental model.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcCardinality cardinality = 4;
   */
  cardinality: GrpcCardinality;

  /**
   * Reference to `EntitySchema.name` of the referenced entity. Might be also any `String`
   * that identifies type some external resource not maintained by Evita.
   *
   * @generated from field: string referencedEntityType = 5;
   */
  referencedEntityType: string;

  /**
   * Whether `referencedEntityType` refers to any existing `EntitySchema.name` that is
   * maintained by Evita.
   *
   * @generated from field: bool referencedEntityTypeManaged = 6;
   */
  referencedEntityTypeManaged: boolean;

  /**
   * Reference to `EntitySchema.name` of the referenced group entity. Might be also any `String`
   * that identifies type some external resource not maintained by Evita.
   *
   * @generated from field: google.protobuf.StringValue referencedGroupType = 7;
   */
  referencedGroupType?: string;

  /**
   * Whether `referencedGroupType` refers to any existing `EntitySchema.name` that is
   * maintained by Evita.
   *
   * @generated from field: bool referencedGroupTypeManaged = 8;
   */
  referencedGroupTypeManaged: boolean;

  /**
   * Whether the index for this reference should be created and maintained allowing to filter by
   * `referenceHaving` filtering constraints. Index is also required when reference is
   * `faceted`.
   *
   * Do not mark reference as faceted unless you know that you'll need to filter/sort entities by this reference.
   * Each indexed reference occupies (memory/disk) space in the form of index. When reference is not indexed,
   * the entity cannot be looked up by reference attributes or relation existence itself, but the data is loaded
   * alongside other references if requested.
   * deprecated in favor of `indexedInScopes`
   *
   * @generated from field: bool filterable = 9 [deprecated = true];
   * @deprecated
   */
  filterable: boolean;

  /**
   * Whether the statistics data for this reference should be maintained and this allowing to get
   * `facetSummary` for this reference or use `facetInSet`
   * filtering query.
   *
   * Do not mark reference as faceted unless you want it among `FacetStatistics`. Each faceted reference
   * occupies (memory/disk) space in the form of index.
   * Reference that was marked as faceted is called Facet.
   * deprecated in favor of `facetedInScopes`
   *
   * @generated from field: bool faceted = 10 [deprecated = true];
   * @deprecated
   */
  faceted: boolean;

  /**
   * Whether the index for this reference should be created and maintained allowing to filter by
   * `referenceHaving` filtering constraints. Index is also required when reference is
   * `faceted`.
   *
   * Do not mark reference as faceted unless you know that you'll need to filter/sort entities by this reference.
   * Each indexed reference occupies (memory/disk) space in the form of index. When reference is not indexed,
   * the entity cannot be looked up by reference attributes or relation existence itself, but the data is loaded
   * alongside other references if requested.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcEntityScope indexedInScopes = 11;
   */
  indexedInScopes: GrpcEntityScope[];

  /**
   * Whether the statistics data for this reference should be maintained and this allowing to get
   * `facetSummary` for this reference or use `facetInSet`
   * filtering query.
   *
   * Do not mark reference as faceted unless you want it among `FacetStatistics`. Each faceted reference
   * occupies (memory/disk) space in the form of index.
   * Reference that was marked as faceted is called Facet.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcEntityScope facetedInScopes = 12;
   */
  facetedInScopes: GrpcEntityScope[];
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcCreateReferenceSchemaMutation.
 * Use `create(GrpcCreateReferenceSchemaMutationSchema)` to create a new message.
 */
export const GrpcCreateReferenceSchemaMutationSchema: GenMessage<GrpcCreateReferenceSchemaMutation> = /*@__PURE__*/
  messageDesc(file_GrpcReferenceSchemaMutations, 0);

/**
 * Mutation is responsible for setting up a new `ReflectedReferenceSchema` in the `EntitySchema`.
 * Mutation can be used for altering also the existing `ReflectedReferenceSchema` alone.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcCreateReflectedReferenceSchemaMutation
 */
export type GrpcCreateReflectedReferenceSchemaMutation = Message<"io.evitadb.externalApi.grpc.generated.GrpcCreateReflectedReferenceSchemaMutation"> & {
  /**
   * Name of the reference the mutation is targeting.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Contains description of the model is optional but helps authors of the schema / client API to better
   * explain the original purpose of the model to the consumers.
   *
   * @generated from field: google.protobuf.StringValue description = 2;
   */
  description?: string;

  /**
   * Deprecation notice contains information about planned removal of this schema from the model / client API.
   * This allows to plan and evolve the schema allowing clients to adapt early to planned breaking changes.
   *
   * @generated from field: google.protobuf.StringValue deprecationNotice = 3;
   */
  deprecationNotice?: string;

  /**
   * Cardinality describes the expected count of relations of this type. In evitaDB we define only one-way
   * relationship from the perspective of the entity. We stick to the ERD modelling
   * [standards](https://www.gleek.io/blog/crows-foot-notation.html) here. Cardinality affect the design
   * of the client API (returning only single reference or collections) and also help us to protect the consistency
   * of the data so that conforms to the creator mental model.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcCardinality cardinality = 4;
   */
  cardinality: GrpcCardinality;

  /**
   * Reference to `EntitySchema.name` of the referenced entity. Might be also any `String`
   * that identifies type some external resource not maintained by Evita.
   *
   * @generated from field: string referencedEntityType = 5;
   */
  referencedEntityType: string;

  /**
   * Name of the reflected reference of the target referencedEntityType(). The referenced entity must contain reference
   * of such name and this reference must target the entity where the reflected reference is defined, and the target
   * entity must be managed on both sides of the relation.
   *
   * @generated from field: string reflectedReferenceName = 6;
   */
  reflectedReferenceName: string;

  /**
   * Whether the statistics data for this reference should be maintained and this allowing to get
   * `facetSummary` for this reference or use `facetInSet`
   * filtering query.
   *
   * Do not mark reference as faceted unless you want it among `FacetStatistics`. Each faceted reference
   * occupies (memory/disk) space in the form of index.
   * Reference that was marked as faceted is called Facet.
   *
   * @generated from field: google.protobuf.BoolValue faceted = 7 [deprecated = true];
   * @deprecated
   */
  faceted?: boolean;

  /**
   * Contains true if the attributes of the reflected reference are inherited from the target reference.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcAttributeInheritanceBehavior attributeInheritanceBehavior = 8;
   */
  attributeInheritanceBehavior: GrpcAttributeInheritanceBehavior;

  /**
   * The array of attribute names that are inherited / excluded from inheritance based on the value of
   * attributeInheritanceBehavior property.
   *
   * @generated from field: repeated string attributeInheritanceFilter = 9;
   */
  attributeInheritanceFilter: string[];

  /**
   * when set to true, the value of `indexedInScope` field is ignored and the settings are inherited from the original
   * reference.
   *
   * @generated from field: bool indexedInherited = 10;
   */
  indexedInherited: boolean;

  /**
   * Whether the index for this reference should be created and maintained allowing to filter by
   * `referenceHaving` filtering constraints. Index is also required when reference is
   * `faceted`.
   *
   * Do not mark reference as faceted unless you know that you'll need to filter/sort entities by this reference.
   * Each indexed reference occupies (memory/disk) space in the form of index. When reference is not indexed,
   * the entity cannot be looked up by reference attributes or relation existence itself, but the data is loaded
   * alongside other references if requested.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcEntityScope indexedInScopes = 11;
   */
  indexedInScopes: GrpcEntityScope[];

  /**
   * when set to true, the value of `facetedInScope` field is ignored and the settings are inherited from the original
   * reference.
   *
   * @generated from field: bool facetedInherited = 12;
   */
  facetedInherited: boolean;

  /**
   * Whether the statistics data for this reference should be maintained and this allowing to get
   * `facetSummary` for this reference or use `facetInSet`
   * filtering query.
   *
   * Do not mark reference as faceted unless you want it among `FacetStatistics`. Each faceted reference
   * occupies (memory/disk) space in the form of index.
   * Reference that was marked as faceted is called Facet.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcEntityScope facetedInScopes = 13;
   */
  facetedInScopes: GrpcEntityScope[];
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcCreateReflectedReferenceSchemaMutation.
 * Use `create(GrpcCreateReflectedReferenceSchemaMutationSchema)` to create a new message.
 */
export const GrpcCreateReflectedReferenceSchemaMutationSchema: GenMessage<GrpcCreateReflectedReferenceSchemaMutation> = /*@__PURE__*/
  messageDesc(file_GrpcReferenceSchemaMutations, 1);

/**
 * Mutation is a holder for a single `AttributeSchema` that affect any of `ReferenceSchema.attributes` in the `EntitySchema`.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcModifyReferenceAttributeSchemaMutation
 */
export type GrpcModifyReferenceAttributeSchemaMutation = Message<"io.evitadb.externalApi.grpc.generated.GrpcModifyReferenceAttributeSchemaMutation"> & {
  /**
   * Name of the reference the mutation is targeting.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Nested attribute schema mutation that mutates reference attributes of targeted reference.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcAttributeSchemaMutation attributeSchemaMutation = 2;
   */
  attributeSchemaMutation?: GrpcAttributeSchemaMutation;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcModifyReferenceAttributeSchemaMutation.
 * Use `create(GrpcModifyReferenceAttributeSchemaMutationSchema)` to create a new message.
 */
export const GrpcModifyReferenceAttributeSchemaMutationSchema: GenMessage<GrpcModifyReferenceAttributeSchemaMutation> = /*@__PURE__*/
  messageDesc(file_GrpcReferenceSchemaMutations, 2);

/**
 * Mutation is a holder for a single `SortableAttributeCompoundSchema` that affect any of
 * `ReferenceSchema.sortableAttributeCompound` in the `EntitySchema`.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcModifyReferenceSortableAttributeCompoundSchemaMutation
 */
export type GrpcModifyReferenceSortableAttributeCompoundSchemaMutation = Message<"io.evitadb.externalApi.grpc.generated.GrpcModifyReferenceSortableAttributeCompoundSchemaMutation"> & {
  /**
   * Name of the reference the mutation is targeting.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Nested sortable attribute compound schema mutation that mutates reference sortable attribute compounds of targeted reference.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcSortableAttributeCompoundSchemaMutation sortableAttributeCompoundSchemaMutation = 2;
   */
  sortableAttributeCompoundSchemaMutation?: GrpcSortableAttributeCompoundSchemaMutation;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcModifyReferenceSortableAttributeCompoundSchemaMutation.
 * Use `create(GrpcModifyReferenceSortableAttributeCompoundSchemaMutationSchema)` to create a new message.
 */
export const GrpcModifyReferenceSortableAttributeCompoundSchemaMutationSchema: GenMessage<GrpcModifyReferenceSortableAttributeCompoundSchemaMutation> = /*@__PURE__*/
  messageDesc(file_GrpcReferenceSchemaMutations, 3);

/**
 * Mutation is responsible for setting value to a `ReferenceSchema.cardinality` in `EntitySchema`.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcModifyReferenceSchemaCardinalityMutation
 */
export type GrpcModifyReferenceSchemaCardinalityMutation = Message<"io.evitadb.externalApi.grpc.generated.GrpcModifyReferenceSchemaCardinalityMutation"> & {
  /**
   * Name of the reference the mutation is targeting.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Cardinality describes the expected count of relations of this type. In evitaDB we define only one-way
   * relationship from the perspective of the entity. We stick to the ERD modelling
   * [standards](https://www.gleek.io/blog/crows-foot-notation.html) here. Cardinality affect the design
   * of the client API (returning only single reference or collections) and also help us to protect the consistency
   * of the data so that conforms to the creator mental model.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcCardinality cardinality = 2;
   */
  cardinality: GrpcCardinality;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcModifyReferenceSchemaCardinalityMutation.
 * Use `create(GrpcModifyReferenceSchemaCardinalityMutationSchema)` to create a new message.
 */
export const GrpcModifyReferenceSchemaCardinalityMutationSchema: GenMessage<GrpcModifyReferenceSchemaCardinalityMutation> = /*@__PURE__*/
  messageDesc(file_GrpcReferenceSchemaMutations, 4);

/**
 * Mutation is responsible for setting value to a `ReferenceSchema.deprecationNotice` in `EntitySchema`.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcModifyReferenceSchemaDeprecationNoticeMutation
 */
export type GrpcModifyReferenceSchemaDeprecationNoticeMutation = Message<"io.evitadb.externalApi.grpc.generated.GrpcModifyReferenceSchemaDeprecationNoticeMutation"> & {
  /**
   * Name of the reference the mutation is targeting.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Deprecation notice contains information about planned removal of this schema from the model / client API.
   * This allows to plan and evolve the schema allowing clients to adapt early to planned breaking changes.
   *
   * @generated from field: google.protobuf.StringValue deprecationNotice = 2;
   */
  deprecationNotice?: string;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcModifyReferenceSchemaDeprecationNoticeMutation.
 * Use `create(GrpcModifyReferenceSchemaDeprecationNoticeMutationSchema)` to create a new message.
 */
export const GrpcModifyReferenceSchemaDeprecationNoticeMutationSchema: GenMessage<GrpcModifyReferenceSchemaDeprecationNoticeMutation> = /*@__PURE__*/
  messageDesc(file_GrpcReferenceSchemaMutations, 5);

/**
 * Mutation is responsible for setting value to a `ReferenceSchema.description` in `EntitySchema`.
 * Mutation can be used for altering also the existing `ReferenceSchema` alone.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcModifyReferenceSchemaDescriptionMutation
 */
export type GrpcModifyReferenceSchemaDescriptionMutation = Message<"io.evitadb.externalApi.grpc.generated.GrpcModifyReferenceSchemaDescriptionMutation"> & {
  /**
   * Name of the reference the mutation is targeting.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Contains description of the model is optional but helps authors of the schema / client API to better
   * explain the original purpose of the model to the consumers.
   *
   * @generated from field: google.protobuf.StringValue description = 2;
   */
  description?: string;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcModifyReferenceSchemaDescriptionMutation.
 * Use `create(GrpcModifyReferenceSchemaDescriptionMutationSchema)` to create a new message.
 */
export const GrpcModifyReferenceSchemaDescriptionMutationSchema: GenMessage<GrpcModifyReferenceSchemaDescriptionMutation> = /*@__PURE__*/
  messageDesc(file_GrpcReferenceSchemaMutations, 6);

/**
 * Mutation is responsible for renaming an existing `ReferenceSchema` in `EntitySchema`.
 * Mutation can be used for altering also the existing `ReferenceSchema` alone.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcModifyReferenceSchemaNameMutation
 */
export type GrpcModifyReferenceSchemaNameMutation = Message<"io.evitadb.externalApi.grpc.generated.GrpcModifyReferenceSchemaNameMutation"> & {
  /**
   * Name of the reference the mutation is targeting.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * New name of the reference the mutation is targeting.
   *
   * @generated from field: string newName = 2;
   */
  newName: string;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcModifyReferenceSchemaNameMutation.
 * Use `create(GrpcModifyReferenceSchemaNameMutationSchema)` to create a new message.
 */
export const GrpcModifyReferenceSchemaNameMutationSchema: GenMessage<GrpcModifyReferenceSchemaNameMutation> = /*@__PURE__*/
  messageDesc(file_GrpcReferenceSchemaMutations, 7);

/**
 * Mutation is responsible for setting value to a `ReferenceSchema.referencedGroupType`in `EntitySchema`.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcModifyReferenceSchemaRelatedEntityGroupMutation
 */
export type GrpcModifyReferenceSchemaRelatedEntityGroupMutation = Message<"io.evitadb.externalApi.grpc.generated.GrpcModifyReferenceSchemaRelatedEntityGroupMutation"> & {
  /**
   * Name of the reference the mutation is targeting.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Reference to `EntitySchema.name` of the referenced group entity. Might be also any `String`
   * that identifies type some external resource not maintained by Evita.
   *
   * @generated from field: google.protobuf.StringValue referencedGroupType = 2;
   */
  referencedGroupType?: string;

  /**
   * Whether `referencedGroupType` refers to any existing `EntitySchema.name` that is maintained by Evita.
   *
   * @generated from field: bool referencedGroupTypeManaged = 3;
   */
  referencedGroupTypeManaged: boolean;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcModifyReferenceSchemaRelatedEntityGroupMutation.
 * Use `create(GrpcModifyReferenceSchemaRelatedEntityGroupMutationSchema)` to create a new message.
 */
export const GrpcModifyReferenceSchemaRelatedEntityGroupMutationSchema: GenMessage<GrpcModifyReferenceSchemaRelatedEntityGroupMutation> = /*@__PURE__*/
  messageDesc(file_GrpcReferenceSchemaMutations, 8);

/**
 * Mutation is responsible for setting value to a `ReferenceSchema.referencedEntityType` in `EntitySchema`.
 * Mutation can be used for altering also the existing `ReferenceSchema` alone.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcModifyReferenceSchemaRelatedEntityMutation
 */
export type GrpcModifyReferenceSchemaRelatedEntityMutation = Message<"io.evitadb.externalApi.grpc.generated.GrpcModifyReferenceSchemaRelatedEntityMutation"> & {
  /**
   * Name of the reference the mutation is targeting.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Reference to `EntitySchema.name` of the referenced entity. Might be also any `String`
   * that identifies type some external resource not maintained by Evita.
   *
   * @generated from field: string referencedEntityType = 2;
   */
  referencedEntityType: string;

  /**
   * Whether `referencedEntityType` refers to any existing `EntitySchema.name` that is maintained by Evita.
   *
   * @generated from field: bool referencedEntityTypeManaged = 3;
   */
  referencedEntityTypeManaged: boolean;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcModifyReferenceSchemaRelatedEntityMutation.
 * Use `create(GrpcModifyReferenceSchemaRelatedEntityMutationSchema)` to create a new message.
 */
export const GrpcModifyReferenceSchemaRelatedEntityMutationSchema: GenMessage<GrpcModifyReferenceSchemaRelatedEntityMutation> = /*@__PURE__*/
  messageDesc(file_GrpcReferenceSchemaMutations, 9);

/**
 * Mutation is responsible for setting value to a `ReflectedReferenceSchema.attributesInherited` and
 * `ReflectedReferenceSchema.attributesExcludedFromInheritance` in `ReferenceSchema`.
 * Mutation can be used for altering also the existing `ReferenceSchemaContract` alone.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcModifyReflectedReferenceAttributeInheritanceSchemaMutation
 */
export type GrpcModifyReflectedReferenceAttributeInheritanceSchemaMutation = Message<"io.evitadb.externalApi.grpc.generated.GrpcModifyReflectedReferenceAttributeInheritanceSchemaMutation"> & {
  /**
   * Name of the reference the mutation is targeting.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Contains true if the attributes of the reflected reference are inherited from the target reference.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcAttributeInheritanceBehavior attributeInheritanceBehavior = 2;
   */
  attributeInheritanceBehavior: GrpcAttributeInheritanceBehavior;

  /**
   * The array of attribute names that are inherited / excluded from inheritance based on the value of
   * attributeInheritanceBehavior property.
   *
   * @generated from field: repeated string attributeInheritanceFilter = 3;
   */
  attributeInheritanceFilter: string[];
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcModifyReflectedReferenceAttributeInheritanceSchemaMutation.
 * Use `create(GrpcModifyReflectedReferenceAttributeInheritanceSchemaMutationSchema)` to create a new message.
 */
export const GrpcModifyReflectedReferenceAttributeInheritanceSchemaMutationSchema: GenMessage<GrpcModifyReflectedReferenceAttributeInheritanceSchemaMutation> = /*@__PURE__*/
  messageDesc(file_GrpcReferenceSchemaMutations, 10);

/**
 * Mutation is responsible for removing an existing `ReferenceSchema` in the `EntitySchema`.
 * Mutation can be used for altering also the existing `ReferenceSchema` alone.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcRemoveReferenceSchemaMutation
 */
export type GrpcRemoveReferenceSchemaMutation = Message<"io.evitadb.externalApi.grpc.generated.GrpcRemoveReferenceSchemaMutation"> & {
  /**
   * Name of the reference the mutation is targeting.
   *
   * @generated from field: string name = 1;
   */
  name: string;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcRemoveReferenceSchemaMutation.
 * Use `create(GrpcRemoveReferenceSchemaMutationSchema)` to create a new message.
 */
export const GrpcRemoveReferenceSchemaMutationSchema: GenMessage<GrpcRemoveReferenceSchemaMutation> = /*@__PURE__*/
  messageDesc(file_GrpcReferenceSchemaMutations, 11);

/**
 * Mutation is responsible for setting value to a `ReferenceSchema.faceted in `EntitySchema`.
 * Mutation can be used for altering also the existing `ReferenceSchema` alone.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcSetReferenceSchemaFacetedMutation
 */
export type GrpcSetReferenceSchemaFacetedMutation = Message<"io.evitadb.externalApi.grpc.generated.GrpcSetReferenceSchemaFacetedMutation"> & {
  /**
   * Name of the reference the mutation is targeting.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Whether the statistics data for this reference should be maintained and this allowing to get
   * `facetSummary` for this reference or use `facet_{reference name}_inSet`
   * filtering query.
   *
   * Do not mark reference as faceted unless you want it among `FacetStatistics`. Each faceted reference
   * occupies (memory/disk) space in the form of index.
   * Reference that was marked as faceted is called Facet.
   * deprecated in favor of `facetedInScopes`
   *
   * @generated from field: bool faceted = 2 [deprecated = true];
   * @deprecated
   */
  faceted: boolean;

  /**
   * Set to true when the faceted property should be inherited from the original.
   * This property makes sense only for inherited reference attributes on reflected reference. For all other cases it
   * must be left as false. When set to TRUE the value of `faceted` field is ignored.
   *
   * @generated from field: bool inherited = 3;
   */
  inherited: boolean;

  /**
   * Whether the statistics data for this reference should be maintained and this allowing to get
   * `facetSummary` for this reference or use `facet_{reference name}_inSet`
   * filtering query.
   *
   * Do not mark reference as faceted unless you want it among `FacetStatistics`. Each faceted reference
   * occupies (memory/disk) space in the form of index.
   * Reference that was marked as faceted is called Facet.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcEntityScope facetedInScopes = 4;
   */
  facetedInScopes: GrpcEntityScope[];
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcSetReferenceSchemaFacetedMutation.
 * Use `create(GrpcSetReferenceSchemaFacetedMutationSchema)` to create a new message.
 */
export const GrpcSetReferenceSchemaFacetedMutationSchema: GenMessage<GrpcSetReferenceSchemaFacetedMutation> = /*@__PURE__*/
  messageDesc(file_GrpcReferenceSchemaMutations, 12);

/**
 * Mutation is responsible for setting value to a `ReferenceSchema.indexed` in `EntitySchema`.
 * Mutation can be used for altering also the existing `ReferenceSchema` alone.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcSetReferenceSchemaIndexedMutation
 */
export type GrpcSetReferenceSchemaIndexedMutation = Message<"io.evitadb.externalApi.grpc.generated.GrpcSetReferenceSchemaIndexedMutation"> & {
  /**
   * Name of the reference the mutation is targeting.
   *
   * @generated from field: string name = 1;
   */
  name: string;

  /**
   * Set to true when the filterable property should be inherited from the original.
   * This property makes sense only for inherited reference attributes on reflected reference. For all other cases it
   * must be left as false. When set to TRUE the value of `filterable` field is ignored.
   *
   * @generated from field: bool inherited = 2;
   */
  inherited: boolean;

  /**
   * Whether the index for this reference should be created and maintained allowing to filter by
   * `referenceHaving` filtering constraints. Index is also required when reference is `faceted`.
   *
   * Do not mark reference as faceted unless you know that you'll need to filter / sort entities by this reference.
   * Each indexed reference occupies (memory/disk) space in the form of index. When reference is not indexed,
   * the entity cannot be looked up by reference attributes or relation existence itself, but the data is loaded
   * alongside other references if requested.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcEntityScope indexedInScopes = 3;
   */
  indexedInScopes: GrpcEntityScope[];
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcSetReferenceSchemaIndexedMutation.
 * Use `create(GrpcSetReferenceSchemaIndexedMutationSchema)` to create a new message.
 */
export const GrpcSetReferenceSchemaIndexedMutationSchema: GenMessage<GrpcSetReferenceSchemaIndexedMutation> = /*@__PURE__*/
  messageDesc(file_GrpcReferenceSchemaMutations, 13);

