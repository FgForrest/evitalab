// @generated by protoc-gen-es v2.5.1 with parameter "target=ts"
// @generated from file GrpcExtraResults.proto (package io.evitadb.externalApi.grpc.generated, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc } from "@bufbuild/protobuf/codegenv2";
import { file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";
import type { GrpcEntityReference, GrpcSealedEntity } from "./GrpcEntity_pb";
import { file_GrpcEntity } from "./GrpcEntity_pb";
import type { GrpcBigDecimal } from "./GrpcEvitaDataTypes_pb";
import { file_GrpcEvitaDataTypes } from "./GrpcEvitaDataTypes_pb";
import type { GrpcQueryPhase } from "./GrpcEnums_pb";
import { file_GrpcEnums } from "./GrpcEnums_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file GrpcExtraResults.proto.
 */
export const file_GrpcExtraResults: GenFile = /*@__PURE__*/
  fileDesc("ChZHcnBjRXh0cmFSZXN1bHRzLnByb3RvEiVpby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkIv8CCg1HcnBjSGlzdG9ncmFtEkIKA21pbhgBIAEoCzI1LmlvLmV2aXRhZGIuZXh0ZXJuYWxBcGkuZ3JwYy5nZW5lcmF0ZWQuR3JwY0JpZ0RlY2ltYWwSQgoDbWF4GAIgASgLMjUuaW8uZXZpdGFkYi5leHRlcm5hbEFwaS5ncnBjLmdlbmVyYXRlZC5HcnBjQmlnRGVjaW1hbBIUCgxvdmVyYWxsQ291bnQYAyABKAUSUAoHYnVja2V0cxgEIAMoCzI/LmlvLmV2aXRhZGIuZXh0ZXJuYWxBcGkuZ3JwYy5nZW5lcmF0ZWQuR3JwY0hpc3RvZ3JhbS5HcnBjQnVja2V0Gn4KCkdycGNCdWNrZXQSSAoJdGhyZXNob2xkGAIgASgLMjUuaW8uZXZpdGFkYi5leHRlcm5hbEFwaS5ncnBjLmdlbmVyYXRlZC5HcnBjQmlnRGVjaW1hbBITCgtvY2N1cnJlbmNlcxgDIAEoBRIRCglyZXF1ZXN0ZWQYBCABKAgivQIKGEdycGNGYWNldEdyb3VwU3RhdGlzdGljcxIVCg1yZWZlcmVuY2VOYW1lGAEgASgJElgKFGdyb3VwRW50aXR5UmVmZXJlbmNlGAIgASgLMjouaW8uZXZpdGFkYi5leHRlcm5hbEFwaS5ncnBjLmdlbmVyYXRlZC5HcnBjRW50aXR5UmVmZXJlbmNlEkwKC2dyb3VwRW50aXR5GAMgASgLMjcuaW8uZXZpdGFkYi5leHRlcm5hbEFwaS5ncnBjLmdlbmVyYXRlZC5HcnBjU2VhbGVkRW50aXR5Eg0KBWNvdW50GAQgASgFElMKD2ZhY2V0U3RhdGlzdGljcxgFIAMoCzI6LmlvLmV2aXRhZGIuZXh0ZXJuYWxBcGkuZ3JwYy5nZW5lcmF0ZWQuR3JwY0ZhY2V0U3RhdGlzdGljcyLPAgoTR3JwY0ZhY2V0U3RhdGlzdGljcxJYChRmYWNldEVudGl0eVJlZmVyZW5jZRgBIAEoCzI6LmlvLmV2aXRhZGIuZXh0ZXJuYWxBcGkuZ3JwYy5nZW5lcmF0ZWQuR3JwY0VudGl0eVJlZmVyZW5jZRJMCgtmYWNldEVudGl0eRgCIAEoCzI3LmlvLmV2aXRhZGIuZXh0ZXJuYWxBcGkuZ3JwYy5nZW5lcmF0ZWQuR3JwY1NlYWxlZEVudGl0eRIRCglyZXF1ZXN0ZWQYAyABKAgSDQoFY291bnQYBCABKAUSKwoGaW1wYWN0GAUgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUSLwoKbWF0Y2hDb3VudBgGIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlEhAKCGhhc1NlbnNlGAcgASgIItABCg1HcnBjSGllcmFyY2h5ElYKCWhpZXJhcmNoeRgBIAMoCzJDLmlvLmV2aXRhZGIuZXh0ZXJuYWxBcGkuZ3JwYy5nZW5lcmF0ZWQuR3JwY0hpZXJhcmNoeS5IaWVyYXJjaHlFbnRyeRpnCg5IaWVyYXJjaHlFbnRyeRILCgNrZXkYASABKAkSRAoFdmFsdWUYAiABKAsyNS5pby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkLkdycGNMZXZlbEluZm9zOgI4ASJaCg5HcnBjTGV2ZWxJbmZvcxJICgpsZXZlbEluZm9zGAEgAygLMjQuaW8uZXZpdGFkYi5leHRlcm5hbEFwaS5ncnBjLmdlbmVyYXRlZC5HcnBjTGV2ZWxJbmZvIvICCg1HcnBjTGV2ZWxJbmZvElMKD2VudGl0eVJlZmVyZW5jZRgBIAEoCzI6LmlvLmV2aXRhZGIuZXh0ZXJuYWxBcGkuZ3JwYy5nZW5lcmF0ZWQuR3JwY0VudGl0eVJlZmVyZW5jZRJHCgZlbnRpdHkYAiABKAsyNy5pby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkLkdycGNTZWFsZWRFbnRpdHkSNwoScXVlcmllZEVudGl0eUNvdW50GAMgASgLMhsuZ29vZ2xlLnByb3RvYnVmLkludDMyVmFsdWUSMgoNY2hpbGRyZW5Db3VudBgEIAEoCzIbLmdvb2dsZS5wcm90b2J1Zi5JbnQzMlZhbHVlEkMKBWl0ZW1zGAUgAygLMjQuaW8uZXZpdGFkYi5leHRlcm5hbEFwaS5ncnBjLmdlbmVyYXRlZC5HcnBjTGV2ZWxJbmZvEhEKCXJlcXVlc3RlZBgGIAEoCCLlAQoSR3JwY1F1ZXJ5VGVsZW1ldHJ5EkgKCW9wZXJhdGlvbhgBIAEoDjI1LmlvLmV2aXRhZGIuZXh0ZXJuYWxBcGkuZ3JwYy5nZW5lcmF0ZWQuR3JwY1F1ZXJ5UGhhc2USEQoFc3RhcnQYAiABKANCAjABEkgKBXN0ZXBzGAMgAygLMjkuaW8uZXZpdGFkYi5leHRlcm5hbEFwaS5ncnBjLmdlbmVyYXRlZC5HcnBjUXVlcnlUZWxlbWV0cnkSEQoJYXJndW1lbnRzGAQgAygJEhUKCXNwZW50VGltZRgFIAEoA0ICMAEigAYKEEdycGNFeHRyYVJlc3VsdHMSawoSYXR0cmlidXRlSGlzdG9ncmFtGAEgAygLMk8uaW8uZXZpdGFkYi5leHRlcm5hbEFwaS5ncnBjLmdlbmVyYXRlZC5HcnBjRXh0cmFSZXN1bHRzLkF0dHJpYnV0ZUhpc3RvZ3JhbUVudHJ5EkwKDnByaWNlSGlzdG9ncmFtGAIgASgLMjQuaW8uZXZpdGFkYi5leHRlcm5hbEFwaS5ncnBjLmdlbmVyYXRlZC5HcnBjSGlzdG9ncmFtEl0KFGZhY2V0R3JvdXBTdGF0aXN0aWNzGAMgAygLMj8uaW8uZXZpdGFkYi5leHRlcm5hbEFwaS5ncnBjLmdlbmVyYXRlZC5HcnBjRmFjZXRHcm91cFN0YXRpc3RpY3MSSwoNc2VsZkhpZXJhcmNoeRgEIAEoCzI0LmlvLmV2aXRhZGIuZXh0ZXJuYWxBcGkuZ3JwYy5nZW5lcmF0ZWQuR3JwY0hpZXJhcmNoeRJZCgloaWVyYXJjaHkYBSADKAsyRi5pby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkLkdycGNFeHRyYVJlc3VsdHMuSGllcmFyY2h5RW50cnkSUQoOcXVlcnlUZWxlbWV0cnkYBiABKAsyOS5pby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkLkdycGNRdWVyeVRlbGVtZXRyeRpvChdBdHRyaWJ1dGVIaXN0b2dyYW1FbnRyeRILCgNrZXkYASABKAkSQwoFdmFsdWUYAiABKAsyNC5pby5ldml0YWRiLmV4dGVybmFsQXBpLmdycGMuZ2VuZXJhdGVkLkdycGNIaXN0b2dyYW06AjgBGmYKDkhpZXJhcmNoeUVudHJ5EgsKA2tleRgBIAEoCRJDCgV2YWx1ZRgCIAEoCzI0LmlvLmV2aXRhZGIuZXh0ZXJuYWxBcGkuZ3JwYy5nZW5lcmF0ZWQuR3JwY0hpZXJhcmNoeToCOAFCDFABqgIHRXZpdGFEQmIGcHJvdG8z", [file_google_protobuf_wrappers, file_GrpcEntity, file_GrpcEvitaDataTypes, file_GrpcEnums]);

/**
 * Histogram can be computed only for numeric based properties. It visualises which property values are more common
 * in the returned data set and which are rare. Bucket count will never exceed requested bucket count but there
 * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so tha
 * there are as few "empty buckets" as possible.
 *
 * - buckets are defined by their lower bounds (inclusive)
 * - the upper bound is the lower bound of the next bucket
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcHistogram
 */
export type GrpcHistogram = Message<"io.evitadb.externalApi.grpc.generated.GrpcHistogram"> & {
  /**
   * Returns left bound of the first bucket. It represents the smallest value encountered in the returned set.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcBigDecimal min = 1;
   */
  min?: GrpcBigDecimal;

  /**
   * Returns right bound of the last bucket of the histogram. Each bucket contains only left bound threshold, so this
   * value is necessary so that first histogram buckets makes any sense. This value is exceptional in the sense that
   * it represents the biggest value encountered in the returned set and represents inclusive right bound for the
   * last bucket.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcBigDecimal max = 2;
   */
  max?: GrpcBigDecimal;

  /**
   * Returns count of all entities that are covered by this histogram. It's plain sum of occurrences of all buckets
   * in the histogram.
   *
   * @generated from field: int32 overallCount = 3;
   */
  overallCount: number;

  /**
   * Returns histogram buckets that represents a tuple of occurrence count and the minimal threshold of the bucket
   * values.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcHistogram.GrpcBucket buckets = 4;
   */
  buckets: GrpcHistogram_GrpcBucket[];
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcHistogram.
 * Use `create(GrpcHistogramSchema)` to create a new message.
 */
export const GrpcHistogramSchema: GenMessage<GrpcHistogram> = /*@__PURE__*/
  messageDesc(file_GrpcExtraResults, 0);

/**
 * Data object that carries out threshold in histogram (or bucket if you will) along with number of occurrences in it.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcHistogram.GrpcBucket
 */
export type GrpcHistogram_GrpcBucket = Message<"io.evitadb.externalApi.grpc.generated.GrpcHistogram.GrpcBucket"> & {
  /**
   * Contains threshold (left bound - inclusive) of the bucket.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcBigDecimal threshold = 2;
   */
  threshold?: GrpcBigDecimal;

  /**
   * Contains number of entity occurrences in this bucket - e.g. number of entities that has monitored property value
   * between previous bucket threshold (exclusive) and this bucket threshold (inclusive)
   *
   * @generated from field: int32 occurrences = 3;
   */
  occurrences: number;

  /**
   * Contains true if the `bucket` is overlapping the attribute between filtering constraint
   *
   * @generated from field: bool requested = 4;
   */
  requested: boolean;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcHistogram.GrpcBucket.
 * Use `create(GrpcHistogram_GrpcBucketSchema)` to create a new message.
 */
export const GrpcHistogram_GrpcBucketSchema: GenMessage<GrpcHistogram_GrpcBucket> = /*@__PURE__*/
  messageDesc(file_GrpcExtraResults, 0, 0);

/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics
 */
export type GrpcFacetGroupStatistics = Message<"io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics"> & {
  /**
   * Contains name of the facet group.
   *
   * @generated from field: string referenceName = 1;
   */
  referenceName: string;

  /**
   * Contains referenced entity reference representing this group.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntityReference groupEntityReference = 2;
   */
  groupEntityReference?: GrpcEntityReference;

  /**
   * Contains referenced entity representing this group.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcSealedEntity groupEntity = 3;
   */
  groupEntity?: GrpcSealedEntity;

  /**
   * Contains number of distinct entities in the response that possess any reference in this group.
   *
   * @generated from field: int32 count = 4;
   */
  count: number;

  /**
   * Contains statistics of individual facets.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcFacetStatistics facetStatistics = 5;
   */
  facetStatistics: GrpcFacetStatistics[];
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics.
 * Use `create(GrpcFacetGroupStatisticsSchema)` to create a new message.
 */
export const GrpcFacetGroupStatisticsSchema: GenMessage<GrpcFacetGroupStatistics> = /*@__PURE__*/
  messageDesc(file_GrpcExtraResults, 1);

/**
 * This DTO contains information about single facet statistics of the entities that are present in the response.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcFacetStatistics
 */
export type GrpcFacetStatistics = Message<"io.evitadb.externalApi.grpc.generated.GrpcFacetStatistics"> & {
  /**
   * Contains referenced entity reference representing.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntityReference facetEntityReference = 1;
   */
  facetEntityReference?: GrpcEntityReference;

  /**
   * Contains referenced entity representing.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcSealedEntity facetEntity = 2;
   */
  facetEntity?: GrpcSealedEntity;

  /**
   * Contains TRUE if the facet was part of the query filtering constraints.
   *
   * @generated from field: bool requested = 3;
   */
  requested: boolean;

  /**
   * Contains number of distinct entities in the response that possess of this reference.
   *
   * @generated from field: int32 count = 4;
   */
  count: number;

  /**
   * This field is not null only when this facet is not requested.
   * Contains projected impact on the current response if this facet is also requested in filtering constraints.
   *
   * @generated from field: google.protobuf.Int32Value impact = 5;
   */
  impact?: number;

  /**
   * Projected number of filtered entities if the query is altered by adding this facet to filtering constraint.
   *
   * @generated from field: google.protobuf.Int32Value matchCount = 6;
   */
  matchCount?: number;

  /**
   * Selection has sense - TRUE if there is at least one entity still present in the result if
   * the query is altered by adding this facet to filtering query. In case of OR relation between
   * facets it's also true only if there is at least one entity present in the result when all other
   * facets in the same group are removed and only this facet is requested.
   *
   * @generated from field: bool hasSense = 7;
   */
  hasSense: boolean;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcFacetStatistics.
 * Use `create(GrpcFacetStatisticsSchema)` to create a new message.
 */
export const GrpcFacetStatisticsSchema: GenMessage<GrpcFacetStatistics> = /*@__PURE__*/
  messageDesc(file_GrpcExtraResults, 2);

/**
 * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
 * the queried hierarchy entity.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcHierarchy
 */
export type GrpcHierarchy = Message<"io.evitadb.externalApi.grpc.generated.GrpcHierarchy"> & {
  /**
   * Map holds the statistics represented by user-specified output name of requested hierarchy.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcLevelInfos> hierarchy = 1;
   */
  hierarchy: { [key: string]: GrpcLevelInfos };
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcHierarchy.
 * Use `create(GrpcHierarchySchema)` to create a new message.
 */
export const GrpcHierarchySchema: GenMessage<GrpcHierarchy> = /*@__PURE__*/
  messageDesc(file_GrpcExtraResults, 3);

/**
 * This DTO represents a wrapper for array of statistics for the single hierarchy level of inner entities.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcLevelInfos
 */
export type GrpcLevelInfos = Message<"io.evitadb.externalApi.grpc.generated.GrpcLevelInfos"> & {
  /**
   * Array of statistics for the single hierarchy level of inner entities.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcLevelInfo levelInfos = 1;
   */
  levelInfos: GrpcLevelInfo[];
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcLevelInfos.
 * Use `create(GrpcLevelInfosSchema)` to create a new message.
 */
export const GrpcLevelInfosSchema: GenMessage<GrpcLevelInfos> = /*@__PURE__*/
  messageDesc(file_GrpcExtraResults, 4);

/**
 * This DTO represents single hierarchical entity in the statistics tree. It contains identification of the entity,
 * the cardinality of queried entities that refer to it and information about children level.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcLevelInfo
 */
export type GrpcLevelInfo = Message<"io.evitadb.externalApi.grpc.generated.GrpcLevelInfo"> & {
  /**
   * Hierarchical entity reference at position in tree represented by this object.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntityReference entityReference = 1;
   */
  entityReference?: GrpcEntityReference;

  /**
   * Hierarchical entity at position in tree represented by this object.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcSealedEntity entity = 2;
   */
  entity?: GrpcSealedEntity;

  /**
   * Contains the number of queried entities that refer directly to this `entity` or to any of its children
   * entities.
   *
   * @generated from field: google.protobuf.Int32Value queriedEntityCount = 3;
   */
  queriedEntityCount?: number;

  /**
   * Contains number of hierarchical entities that are referring to this `entity` as its parent.
   * The count will respect behaviour settings and will not count empty children in case `REMOVE_EMPTY` is
   * used for computation.
   *
   * @generated from field: google.protobuf.Int32Value childrenCount = 4;
   */
  childrenCount?: number;

  /**
   * Contains hierarchy info of the entities that are subordinate (children) of this `entity`.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcLevelInfo items = 5;
   */
  items: GrpcLevelInfo[];

  /**
   * Contains true if the `entity` was filtered by hierarchy within constraint
   *
   * @generated from field: bool requested = 6;
   */
  requested: boolean;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcLevelInfo.
 * Use `create(GrpcLevelInfoSchema)` to create a new message.
 */
export const GrpcLevelInfoSchema: GenMessage<GrpcLevelInfo> = /*@__PURE__*/
  messageDesc(file_GrpcExtraResults, 5);

/**
 * This DTO contains detailed information about query processing time and its decomposition to single operations.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry
 */
export type GrpcQueryTelemetry = Message<"io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry"> & {
  /**
   * Phase of the query processing.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcQueryPhase operation = 1;
   */
  operation: GrpcQueryPhase;

  /**
   * Date and time of the start of this step in nanoseconds.
   *
   * @generated from field: int64 start = 2 [jstype = JS_STRING];
   */
  start: string;

  /**
   * Internal steps of this telemetry step (operation decomposition).
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry steps = 3;
   */
  steps: GrpcQueryTelemetry[];

  /**
   * Arguments of the processing phase.
   *
   * @generated from field: repeated string arguments = 4;
   */
  arguments: string[];

  /**
   * Duration in nanoseconds.
   *
   * @generated from field: int64 spentTime = 5 [jstype = JS_STRING];
   */
  spentTime: string;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry.
 * Use `create(GrpcQueryTelemetrySchema)` to create a new message.
 */
export const GrpcQueryTelemetrySchema: GenMessage<GrpcQueryTelemetry> = /*@__PURE__*/
  messageDesc(file_GrpcExtraResults, 6);

/**
 * This DTO contains extra results that are computed based on the query results.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcExtraResults
 */
export type GrpcExtraResults = Message<"io.evitadb.externalApi.grpc.generated.GrpcExtraResults"> & {
  /**
   * Returns computed histograms for specific attributes based on filter constraints.
   *
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   *
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcHistogram> attributeHistogram = 1;
   */
  attributeHistogram: { [key: string]: GrpcHistogram };

  /**
   * Returns computed histogram for prices satisfactory to filter constraints.
   *
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   *
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;
   */
  priceHistogram?: GrpcHistogram;

  /**
   * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
   * (if they belong in one) and statistics of the facets that relates to it.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;
   */
  facetGroupStatistics: GrpcFacetGroupStatistics[];

  /**
   * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
   * the queried hierarchy entity.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;
   */
  selfHierarchy?: GrpcHierarchy;

  /**
   * Index holds the statistics for particular references that target hierarchy entity types.
   * Key is the identification of the reference name, value contains list of statistics for the single level (probably
   * root or whatever is filtered by the query) of the hierarchy entity.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> hierarchy = 5;
   */
  hierarchy: { [key: string]: GrpcHierarchy };

  /**
   * This DTO contains detailed information about query processing time and its decomposition to single operations.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;
   */
  queryTelemetry?: GrpcQueryTelemetry;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcExtraResults.
 * Use `create(GrpcExtraResultsSchema)` to create a new message.
 */
export const GrpcExtraResultsSchema: GenMessage<GrpcExtraResults> = /*@__PURE__*/
  messageDesc(file_GrpcExtraResults, 7);

