// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file GrpcExtraResults.proto (package io.evitadb.externalApi.grpc.generated, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Int32Value, Message, proto3, protoInt64 } from "@bufbuild/protobuf";
import { GrpcBigDecimal } from "./GrpcEvitaDataTypes_pb.js";
import { GrpcEntityReference, GrpcSealedEntity } from "./GrpcEntity_pb.js";
import { GrpcQueryPhase } from "./GrpcEnums_pb.js";

/**
 * Histogram can be computed only for numeric based properties. It visualises which property values are more common
 * in the returned data set and which are rare. Bucket count will never exceed requested bucket count but there
 * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so tha
 * there are as few "empty buckets" as possible.
 *
 * - buckets are defined by their lower bounds (inclusive)
 * - the upper bound is the lower bound of the next bucket
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcHistogram
 */
export class GrpcHistogram extends Message<GrpcHistogram> {
  /**
   * Returns left bound of the first bucket. It represents the smallest value encountered in the returned set.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcBigDecimal min = 1;
   */
  min?: GrpcBigDecimal;

  /**
   * Returns right bound of the last bucket of the histogram. Each bucket contains only left bound threshold, so this
   * value is necessary so that first histogram buckets makes any sense. This value is exceptional in the sense that
   * it represents the biggest value encountered in the returned set and represents inclusive right bound for the
   * last bucket.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcBigDecimal max = 2;
   */
  max?: GrpcBigDecimal;

  /**
   * Returns count of all entities that are covered by this histogram. It's plain sum of occurrences of all buckets
   * in the histogram.
   *
   * @generated from field: int32 overallCount = 3;
   */
  overallCount = 0;

  /**
   * Returns histogram buckets that represents a tuple of occurrence count and the minimal threshold of the bucket
   * values.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcHistogram.GrpcBucket buckets = 4;
   */
  buckets: GrpcHistogram_GrpcBucket[] = [];

  constructor(data?: PartialMessage<GrpcHistogram>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcHistogram";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "min", kind: "message", T: GrpcBigDecimal },
    { no: 2, name: "max", kind: "message", T: GrpcBigDecimal },
    { no: 3, name: "overallCount", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "buckets", kind: "message", T: GrpcHistogram_GrpcBucket, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcHistogram {
    return new GrpcHistogram().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcHistogram {
    return new GrpcHistogram().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcHistogram {
    return new GrpcHistogram().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcHistogram | PlainMessage<GrpcHistogram> | undefined, b: GrpcHistogram | PlainMessage<GrpcHistogram> | undefined): boolean {
    return proto3.util.equals(GrpcHistogram, a, b);
  }
}

/**
 * Data object that carries out threshold in histogram (or bucket if you will) along with number of occurrences in it.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcHistogram.GrpcBucket
 */
export class GrpcHistogram_GrpcBucket extends Message<GrpcHistogram_GrpcBucket> {
  /**
   * Contains threshold (left bound - inclusive) of the bucket.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcBigDecimal threshold = 2;
   */
  threshold?: GrpcBigDecimal;

  /**
   * Contains number of entity occurrences in this bucket - e.g. number of entities that has monitored property value
   * between previous bucket threshold (exclusive) and this bucket threshold (inclusive)
   *
   * @generated from field: int32 occurrences = 3;
   */
  occurrences = 0;

  /**
   * Contains true if the `bucket` is overlapping the attribute between filtering constraint
   *
   * @generated from field: bool requested = 4;
   */
  requested = false;

  constructor(data?: PartialMessage<GrpcHistogram_GrpcBucket>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcHistogram.GrpcBucket";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "threshold", kind: "message", T: GrpcBigDecimal },
    { no: 3, name: "occurrences", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 4, name: "requested", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcHistogram_GrpcBucket {
    return new GrpcHistogram_GrpcBucket().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcHistogram_GrpcBucket {
    return new GrpcHistogram_GrpcBucket().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcHistogram_GrpcBucket {
    return new GrpcHistogram_GrpcBucket().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcHistogram_GrpcBucket | PlainMessage<GrpcHistogram_GrpcBucket> | undefined, b: GrpcHistogram_GrpcBucket | PlainMessage<GrpcHistogram_GrpcBucket> | undefined): boolean {
    return proto3.util.equals(GrpcHistogram_GrpcBucket, a, b);
  }
}

/**
 * This DTO contains information about single facet group and statistics of the facets that relates to it.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics
 */
export class GrpcFacetGroupStatistics extends Message<GrpcFacetGroupStatistics> {
  /**
   * Contains name of the facet group.
   *
   * @generated from field: string referenceName = 1;
   */
  referenceName = "";

  /**
   * Contains referenced entity reference representing this group.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntityReference groupEntityReference = 2;
   */
  groupEntityReference?: GrpcEntityReference;

  /**
   * Contains referenced entity representing this group.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcSealedEntity groupEntity = 3;
   */
  groupEntity?: GrpcSealedEntity;

  /**
   * Contains number of distinct entities in the response that possess any reference in this group.
   *
   * @generated from field: int32 count = 4;
   */
  count = 0;

  /**
   * Contains statistics of individual facets.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcFacetStatistics facetStatistics = 5;
   */
  facetStatistics: GrpcFacetStatistics[] = [];

  constructor(data?: PartialMessage<GrpcFacetGroupStatistics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "referenceName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "groupEntityReference", kind: "message", T: GrpcEntityReference },
    { no: 3, name: "groupEntity", kind: "message", T: GrpcSealedEntity },
    { no: 4, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "facetStatistics", kind: "message", T: GrpcFacetStatistics, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcFacetGroupStatistics {
    return new GrpcFacetGroupStatistics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcFacetGroupStatistics {
    return new GrpcFacetGroupStatistics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcFacetGroupStatistics {
    return new GrpcFacetGroupStatistics().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcFacetGroupStatistics | PlainMessage<GrpcFacetGroupStatistics> | undefined, b: GrpcFacetGroupStatistics | PlainMessage<GrpcFacetGroupStatistics> | undefined): boolean {
    return proto3.util.equals(GrpcFacetGroupStatistics, a, b);
  }
}

/**
 * This DTO contains information about single facet statistics of the entities that are present in the response.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcFacetStatistics
 */
export class GrpcFacetStatistics extends Message<GrpcFacetStatistics> {
  /**
   * Contains referenced entity reference representing.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntityReference facetEntityReference = 1;
   */
  facetEntityReference?: GrpcEntityReference;

  /**
   * Contains referenced entity representing.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcSealedEntity facetEntity = 2;
   */
  facetEntity?: GrpcSealedEntity;

  /**
   * Contains TRUE if the facet was part of the query filtering constraints.
   *
   * @generated from field: bool requested = 3;
   */
  requested = false;

  /**
   * Contains number of distinct entities in the response that possess of this reference.
   *
   * @generated from field: int32 count = 4;
   */
  count = 0;

  /**
   * This field is not null only when this facet is not requested.
   * Contains projected impact on the current response if this facet is also requested in filtering constraints.
   *
   * @generated from field: google.protobuf.Int32Value impact = 5;
   */
  impact?: number;

  /**
   * Projected number of filtered entities if the query is altered by adding this facet to filtering constraint.
   *
   * @generated from field: google.protobuf.Int32Value matchCount = 6;
   */
  matchCount?: number;

  /**
   * Selection has sense - TRUE if there is at least one entity still present in the result if
   * the query is altered by adding this facet to filtering query. In case of OR relation between
   * facets it's also true only if there is at least one entity present in the result when all other
   * facets in the same group are removed and only this facet is requested.
   *
   * @generated from field: bool hasSense = 7;
   */
  hasSense = false;

  constructor(data?: PartialMessage<GrpcFacetStatistics>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcFacetStatistics";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "facetEntityReference", kind: "message", T: GrpcEntityReference },
    { no: 2, name: "facetEntity", kind: "message", T: GrpcSealedEntity },
    { no: 3, name: "requested", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    { no: 4, name: "count", kind: "scalar", T: 5 /* ScalarType.INT32 */ },
    { no: 5, name: "impact", kind: "message", T: Int32Value },
    { no: 6, name: "matchCount", kind: "message", T: Int32Value },
    { no: 7, name: "hasSense", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcFacetStatistics {
    return new GrpcFacetStatistics().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcFacetStatistics {
    return new GrpcFacetStatistics().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcFacetStatistics {
    return new GrpcFacetStatistics().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcFacetStatistics | PlainMessage<GrpcFacetStatistics> | undefined, b: GrpcFacetStatistics | PlainMessage<GrpcFacetStatistics> | undefined): boolean {
    return proto3.util.equals(GrpcFacetStatistics, a, b);
  }
}

/**
 * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
 * the queried hierarchy entity.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcHierarchy
 */
export class GrpcHierarchy extends Message<GrpcHierarchy> {
  /**
   * Map holds the statistics represented by user-specified output name of requested hierarchy.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcLevelInfos> hierarchy = 1;
   */
  hierarchy: { [key: string]: GrpcLevelInfos } = {};

  constructor(data?: PartialMessage<GrpcHierarchy>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcHierarchy";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hierarchy", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: GrpcLevelInfos} },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcHierarchy {
    return new GrpcHierarchy().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcHierarchy {
    return new GrpcHierarchy().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcHierarchy {
    return new GrpcHierarchy().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcHierarchy | PlainMessage<GrpcHierarchy> | undefined, b: GrpcHierarchy | PlainMessage<GrpcHierarchy> | undefined): boolean {
    return proto3.util.equals(GrpcHierarchy, a, b);
  }
}

/**
 * This DTO represents a wrapper for array of statistics for the single hierarchy level of inner entities.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcLevelInfos
 */
export class GrpcLevelInfos extends Message<GrpcLevelInfos> {
  /**
   * Array of statistics for the single hierarchy level of inner entities.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcLevelInfo levelInfos = 1;
   */
  levelInfos: GrpcLevelInfo[] = [];

  constructor(data?: PartialMessage<GrpcLevelInfos>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcLevelInfos";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "levelInfos", kind: "message", T: GrpcLevelInfo, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcLevelInfos {
    return new GrpcLevelInfos().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcLevelInfos {
    return new GrpcLevelInfos().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcLevelInfos {
    return new GrpcLevelInfos().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcLevelInfos | PlainMessage<GrpcLevelInfos> | undefined, b: GrpcLevelInfos | PlainMessage<GrpcLevelInfos> | undefined): boolean {
    return proto3.util.equals(GrpcLevelInfos, a, b);
  }
}

/**
 * This DTO represents single hierarchical entity in the statistics tree. It contains identification of the entity,
 * the cardinality of queried entities that refer to it and information about children level.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcLevelInfo
 */
export class GrpcLevelInfo extends Message<GrpcLevelInfo> {
  /**
   * Hierarchical entity reference at position in tree represented by this object.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEntityReference entityReference = 1;
   */
  entityReference?: GrpcEntityReference;

  /**
   * Hierarchical entity at position in tree represented by this object.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcSealedEntity entity = 2;
   */
  entity?: GrpcSealedEntity;

  /**
   * Contains the number of queried entities that refer directly to this `entity` or to any of its children
   * entities.
   *
   * @generated from field: google.protobuf.Int32Value queriedEntityCount = 3;
   */
  queriedEntityCount?: number;

  /**
   * Contains number of hierarchical entities that are referring to this `entity` as its parent.
   * The count will respect behaviour settings and will not count empty children in case `REMOVE_EMPTY` is
   * used for computation.
   *
   * @generated from field: google.protobuf.Int32Value childrenCount = 4;
   */
  childrenCount?: number;

  /**
   * Contains hierarchy info of the entities that are subordinate (children) of this `entity`.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcLevelInfo items = 5;
   */
  items: GrpcLevelInfo[] = [];

  /**
   * Contains true if the `entity` was filtered by hierarchy within constraint
   *
   * @generated from field: bool requested = 6;
   */
  requested = false;

  constructor(data?: PartialMessage<GrpcLevelInfo>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcLevelInfo";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entityReference", kind: "message", T: GrpcEntityReference },
    { no: 2, name: "entity", kind: "message", T: GrpcSealedEntity },
    { no: 3, name: "queriedEntityCount", kind: "message", T: Int32Value },
    { no: 4, name: "childrenCount", kind: "message", T: Int32Value },
    { no: 5, name: "items", kind: "message", T: GrpcLevelInfo, repeated: true },
    { no: 6, name: "requested", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcLevelInfo {
    return new GrpcLevelInfo().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcLevelInfo {
    return new GrpcLevelInfo().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcLevelInfo {
    return new GrpcLevelInfo().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcLevelInfo | PlainMessage<GrpcLevelInfo> | undefined, b: GrpcLevelInfo | PlainMessage<GrpcLevelInfo> | undefined): boolean {
    return proto3.util.equals(GrpcLevelInfo, a, b);
  }
}

/**
 * This DTO contains detailed information about query processing time and its decomposition to single operations.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry
 */
export class GrpcQueryTelemetry extends Message<GrpcQueryTelemetry> {
  /**
   * Phase of the query processing.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcQueryPhase operation = 1;
   */
  operation = GrpcQueryPhase.OVERALL;

  /**
   * Date and time of the start of this step in nanoseconds.
   *
   * @generated from field: int64 start = 2;
   */
  start = protoInt64.zero;

  /**
   * Internal steps of this telemetry step (operation decomposition).
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry steps = 3;
   */
  steps: GrpcQueryTelemetry[] = [];

  /**
   * Arguments of the processing phase.
   *
   * @generated from field: repeated string arguments = 4;
   */
  arguments: string[] = [];

  /**
   * Duration in nanoseconds.
   *
   * @generated from field: int64 spentTime = 5;
   */
  spentTime = protoInt64.zero;

  constructor(data?: PartialMessage<GrpcQueryTelemetry>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operation", kind: "enum", T: proto3.getEnumType(GrpcQueryPhase) },
    { no: 2, name: "start", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "steps", kind: "message", T: GrpcQueryTelemetry, repeated: true },
    { no: 4, name: "arguments", kind: "scalar", T: 9 /* ScalarType.STRING */, repeated: true },
    { no: 5, name: "spentTime", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcQueryTelemetry {
    return new GrpcQueryTelemetry().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcQueryTelemetry {
    return new GrpcQueryTelemetry().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcQueryTelemetry {
    return new GrpcQueryTelemetry().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcQueryTelemetry | PlainMessage<GrpcQueryTelemetry> | undefined, b: GrpcQueryTelemetry | PlainMessage<GrpcQueryTelemetry> | undefined): boolean {
    return proto3.util.equals(GrpcQueryTelemetry, a, b);
  }
}

/**
 * This DTO contains extra results that are computed based on the query results.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcExtraResults
 */
export class GrpcExtraResults extends Message<GrpcExtraResults> {
  /**
   * Returns computed histograms for specific attributes based on filter constraints.
   *
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   *
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcHistogram> attributeHistogram = 1;
   */
  attributeHistogram: { [key: string]: GrpcHistogram } = {};

  /**
   * Returns computed histogram for prices satisfactory to filter constraints.
   *
   * A histogram is an approximate representation of the distribution of numerical data. For detailed description please
   * see [WikiPedia](https://en.wikipedia.org/wiki/Histogram).
   * Histogram can be computed only for numeric based properties. It visualises which property values are more common
   * in the returned data set and which are rare. Bucket count will never exceed requested bucket count specified in
   * `requestedCount` but there
   * may be less of them if there is no enough data for computation. Bucket thresholds are specified heuristically so that
   * there are as few "empty buckets" as possible.
   *
   * - buckets are defined by their lower bounds (inclusive)
   * - the upper bound is the lower bound of the next bucket
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcHistogram priceHistogram = 2;
   */
  priceHistogram?: GrpcHistogram;

  /**
   * Contains a collection of FacetGroupStatistics DTOs where each of them contains information about single facet group
   * (if they belong in one) and statistics of the facets that relates to it.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcFacetGroupStatistics facetGroupStatistics = 3;
   */
  facetGroupStatistics: GrpcFacetGroupStatistics[] = [];

  /**
   * Contains list of statistics for the single level (probably root or whatever is filtered by the query) of
   * the queried hierarchy entity.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcHierarchy selfHierarchy = 4;
   */
  selfHierarchy?: GrpcHierarchy;

  /**
   * Index holds the statistics for particular references that target hierarchy entity types.
   * Key is the identification of the reference name, value contains list of statistics for the single level (probably
   * root or whatever is filtered by the query) of the hierarchy entity.
   *
   * @generated from field: map<string, io.evitadb.externalApi.grpc.generated.GrpcHierarchy> hierarchy = 5;
   */
  hierarchy: { [key: string]: GrpcHierarchy } = {};

  /**
   * This DTO contains detailed information about query processing time and its decomposition to single operations.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcQueryTelemetry queryTelemetry = 6;
   */
  queryTelemetry?: GrpcQueryTelemetry;

  constructor(data?: PartialMessage<GrpcExtraResults>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcExtraResults";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "attributeHistogram", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: GrpcHistogram} },
    { no: 2, name: "priceHistogram", kind: "message", T: GrpcHistogram },
    { no: 3, name: "facetGroupStatistics", kind: "message", T: GrpcFacetGroupStatistics, repeated: true },
    { no: 4, name: "selfHierarchy", kind: "message", T: GrpcHierarchy },
    { no: 5, name: "hierarchy", kind: "map", K: 9 /* ScalarType.STRING */, V: {kind: "message", T: GrpcHierarchy} },
    { no: 6, name: "queryTelemetry", kind: "message", T: GrpcQueryTelemetry },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcExtraResults {
    return new GrpcExtraResults().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcExtraResults {
    return new GrpcExtraResults().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcExtraResults {
    return new GrpcExtraResults().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcExtraResults | PlainMessage<GrpcExtraResults> | undefined, b: GrpcExtraResults | PlainMessage<GrpcExtraResults> | undefined): boolean {
    return proto3.util.equals(GrpcExtraResults, a, b);
  }
}

