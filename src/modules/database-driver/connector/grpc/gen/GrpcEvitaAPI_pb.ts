// @generated by protoc-gen-es v2.5.2 with parameter "target=ts"
// @generated from file GrpcEvitaAPI.proto (package io.evitadb.externalApi.grpc.generated, syntax proto3)
/* eslint-disable */

import type { GenFile, GenMessage, GenService } from "@bufbuild/protobuf/codegenv2";
import { fileDesc, messageDesc, serviceDesc } from "@bufbuild/protobuf/codegenv2";
import type { EmptySchema } from "@bufbuild/protobuf/wkt";
import { file_google_protobuf_empty, file_google_protobuf_wrappers } from "@bufbuild/protobuf/wkt";
import type { GrpcCatalogState, GrpcCommitBehavior, GrpcSessionType } from "./GrpcEnums_pb";
import { file_GrpcEnums } from "./GrpcEnums_pb";
import type { GrpcUuid } from "./GrpcEvitaDataTypes_pb";
import { file_GrpcEvitaDataTypes } from "./GrpcEvitaDataTypes_pb";
import type { GrpcEngineMutation } from "./GrpcEngineMutation_pb";
import { file_GrpcEngineMutation } from "./GrpcEngineMutation_pb";
import type { GrpcCaptureResponseType, GrpcChangeCaptureContent, GrpcChangeSystemCapture } from "./GrpcChangeCapture_pb";
import { file_GrpcChangeCapture } from "./GrpcChangeCapture_pb";
import type { Message } from "@bufbuild/protobuf";

/**
 * Describes the file GrpcEvitaAPI.proto.
 */
export const file_GrpcEvitaAPI: GenFile = /*@__PURE__*/
  fileDesc("", [file_google_protobuf_empty, file_google_protobuf_wrappers, file_GrpcEnums, file_GrpcEvitaDataTypes, file_GrpcEngineMutation, file_GrpcChangeCapture]);

/**
 * Response to a server status request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcReadyResponse
 */
export type GrpcReadyResponse = Message<"io.evitadb.externalApi.grpc.generated.GrpcReadyResponse"> & {
  /**
   * Always true when returned
   *
   * @generated from field: bool ready = 1;
   */
  ready: boolean;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcReadyResponse.
 * Use `create(GrpcReadyResponseSchema)` to create a new message.
 */
export const GrpcReadyResponseSchema: GenMessage<GrpcReadyResponse> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 0);

/**
 * Request to create a session inside of a catalog.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEvitaSessionRequest
 */
export type GrpcEvitaSessionRequest = Message<"io.evitadb.externalApi.grpc.generated.GrpcEvitaSessionRequest"> & {
  /**
   * The name of the catalog for which the session is to be created.
   *
   * @generated from field: string catalogName = 1;
   */
  catalogName: string;

  /**
   * Commit behaviour
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcCommitBehavior commitBehavior = 2;
   */
  commitBehavior: GrpcCommitBehavior;

  /**
   * For testing purposes. Flag indicating that all changes by the session should be rollbacked after the session is closed.
   *
   * @generated from field: bool dryRun = 3;
   */
  dryRun: boolean;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcEvitaSessionRequest.
 * Use `create(GrpcEvitaSessionRequestSchema)` to create a new message.
 */
export const GrpcEvitaSessionRequestSchema: GenMessage<GrpcEvitaSessionRequest> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 1);

/**
 * Response to a session creation request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEvitaSessionResponse
 */
export type GrpcEvitaSessionResponse = Message<"io.evitadb.externalApi.grpc.generated.GrpcEvitaSessionResponse"> & {
  /**
   * UUID of the created session.
   *
   * @generated from field: string sessionId = 1;
   */
  sessionId: string;

  /**
   * Type of the created session.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcSessionType sessionType = 2;
   */
  sessionType: GrpcSessionType;

  /**
   * Commit behaviour
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcCommitBehavior commitBehaviour = 3;
   */
  commitBehaviour: GrpcCommitBehavior;

  /**
   * State of the catalog after the session was created.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcCatalogState catalogState = 4;
   */
  catalogState: GrpcCatalogState;

  /**
   * UUID of the catalog the session is bound to.
   *
   * @generated from field: string catalogId = 5;
   */
  catalogId: string;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcEvitaSessionResponse.
 * Use `create(GrpcEvitaSessionResponseSchema)` to create a new message.
 */
export const GrpcEvitaSessionResponseSchema: GenMessage<GrpcEvitaSessionResponse> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 2);

/**
 * Request to terminate a session.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEvitaSessionTerminationRequest
 */
export type GrpcEvitaSessionTerminationRequest = Message<"io.evitadb.externalApi.grpc.generated.GrpcEvitaSessionTerminationRequest"> & {
  /**
   * UUID of the session to be terminated.
   *
   * @generated from field: string sessionId = 2;
   */
  sessionId: string;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcEvitaSessionTerminationRequest.
 * Use `create(GrpcEvitaSessionTerminationRequestSchema)` to create a new message.
 */
export const GrpcEvitaSessionTerminationRequestSchema: GenMessage<GrpcEvitaSessionTerminationRequest> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 3);

/**
 * Response to a session termination request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcEvitaSessionTerminationResponse
 */
export type GrpcEvitaSessionTerminationResponse = Message<"io.evitadb.externalApi.grpc.generated.GrpcEvitaSessionTerminationResponse"> & {
  /**
   * Indicator whether the session was terminated successfully.
   *
   * @generated from field: bool terminated = 1;
   */
  terminated: boolean;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcEvitaSessionTerminationResponse.
 * Use `create(GrpcEvitaSessionTerminationResponseSchema)` to create a new message.
 */
export const GrpcEvitaSessionTerminationResponseSchema: GenMessage<GrpcEvitaSessionTerminationResponse> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 4);

/**
 * Response to a catalog names request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcCatalogNamesResponse
 */
export type GrpcCatalogNamesResponse = Message<"io.evitadb.externalApi.grpc.generated.GrpcCatalogNamesResponse"> & {
  /**
   * Names of all existing catalogs.
   *
   * @generated from field: repeated string catalogNames = 1;
   */
  catalogNames: string[];
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcCatalogNamesResponse.
 * Use `create(GrpcCatalogNamesResponseSchema)` to create a new message.
 */
export const GrpcCatalogNamesResponseSchema: GenMessage<GrpcCatalogNamesResponse> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 5);

/**
 * Request to a get catalog state request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcGetCatalogStateRequest
 */
export type GrpcGetCatalogStateRequest = Message<"io.evitadb.externalApi.grpc.generated.GrpcGetCatalogStateRequest"> & {
  /**
   * Name of the catalog to be checked for state.
   *
   * @generated from field: string catalogName = 1;
   */
  catalogName: string;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcGetCatalogStateRequest.
 * Use `create(GrpcGetCatalogStateRequestSchema)` to create a new message.
 */
export const GrpcGetCatalogStateRequestSchema: GenMessage<GrpcGetCatalogStateRequest> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 6);

/**
 * Response to a get catalog state request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcGetCatalogStateResponse
 */
export type GrpcGetCatalogStateResponse = Message<"io.evitadb.externalApi.grpc.generated.GrpcGetCatalogStateResponse"> & {
  /**
   * State of the catalog.
   *
   * @generated from field: optional io.evitadb.externalApi.grpc.generated.GrpcCatalogState catalogState = 1;
   */
  catalogState?: GrpcCatalogState;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcGetCatalogStateResponse.
 * Use `create(GrpcGetCatalogStateResponseSchema)` to create a new message.
 */
export const GrpcGetCatalogStateResponseSchema: GenMessage<GrpcGetCatalogStateResponse> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 7);

/**
 * Request to define a new catalog.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDefineCatalogRequest
 */
export type GrpcDefineCatalogRequest = Message<"io.evitadb.externalApi.grpc.generated.GrpcDefineCatalogRequest"> & {
  /**
   * Name of the catalog to be defined.
   *
   * @generated from field: string catalogName = 1;
   */
  catalogName: string;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcDefineCatalogRequest.
 * Use `create(GrpcDefineCatalogRequestSchema)` to create a new message.
 */
export const GrpcDefineCatalogRequestSchema: GenMessage<GrpcDefineCatalogRequest> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 8);

/**
 * Response to a catalog definition request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDefineCatalogResponse
 */
export type GrpcDefineCatalogResponse = Message<"io.evitadb.externalApi.grpc.generated.GrpcDefineCatalogResponse"> & {
  /**
   * Indicator whether the catalog was defined successfully.
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcDefineCatalogResponse.
 * Use `create(GrpcDefineCatalogResponseSchema)` to create a new message.
 */
export const GrpcDefineCatalogResponseSchema: GenMessage<GrpcDefineCatalogResponse> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 9);

/**
 * Request to rename a catalog.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcRenameCatalogRequest
 */
export type GrpcRenameCatalogRequest = Message<"io.evitadb.externalApi.grpc.generated.GrpcRenameCatalogRequest"> & {
  /**
   * Name of the catalog to be renamed.
   *
   * @generated from field: string catalogName = 1;
   */
  catalogName: string;

  /**
   * New name of the catalog.
   *
   * @generated from field: string newCatalogName = 2;
   */
  newCatalogName: string;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcRenameCatalogRequest.
 * Use `create(GrpcRenameCatalogRequestSchema)` to create a new message.
 */
export const GrpcRenameCatalogRequestSchema: GenMessage<GrpcRenameCatalogRequest> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 10);

/**
 * Response to a catalog rename request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcRenameCatalogResponse
 */
export type GrpcRenameCatalogResponse = Message<"io.evitadb.externalApi.grpc.generated.GrpcRenameCatalogResponse"> & {
  /**
   * Indicator whether the catalog was renamed successfully.
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcRenameCatalogResponse.
 * Use `create(GrpcRenameCatalogResponseSchema)` to create a new message.
 */
export const GrpcRenameCatalogResponseSchema: GenMessage<GrpcRenameCatalogResponse> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 11);

/**
 * Request to replace a catalog.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcReplaceCatalogRequest
 */
export type GrpcReplaceCatalogRequest = Message<"io.evitadb.externalApi.grpc.generated.GrpcReplaceCatalogRequest"> & {
  /**
   * Name of the catalog that will become the successor of the original catalog (old name)
   *
   * @generated from field: string catalogNameToBeReplacedWith = 1;
   */
  catalogNameToBeReplacedWith: string;

  /**
   * Name of the catalog that will be replaced and dropped (new name)
   *
   * @generated from field: string catalogNameToBeReplaced = 2;
   */
  catalogNameToBeReplaced: string;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcReplaceCatalogRequest.
 * Use `create(GrpcReplaceCatalogRequestSchema)` to create a new message.
 */
export const GrpcReplaceCatalogRequestSchema: GenMessage<GrpcReplaceCatalogRequest> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 12);

/**
 * Response to a catalog replace request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcReplaceCatalogResponse
 */
export type GrpcReplaceCatalogResponse = Message<"io.evitadb.externalApi.grpc.generated.GrpcReplaceCatalogResponse"> & {
  /**
   * Indicator whether the catalog was replaced successfully.
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcReplaceCatalogResponse.
 * Use `create(GrpcReplaceCatalogResponseSchema)` to create a new message.
 */
export const GrpcReplaceCatalogResponseSchema: GenMessage<GrpcReplaceCatalogResponse> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 13);

/**
 * Request to delete a catalog.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDeleteCatalogIfExistsRequest
 */
export type GrpcDeleteCatalogIfExistsRequest = Message<"io.evitadb.externalApi.grpc.generated.GrpcDeleteCatalogIfExistsRequest"> & {
  /**
   * Name of the catalog to be deleted.
   *
   * @generated from field: string catalogName = 1;
   */
  catalogName: string;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcDeleteCatalogIfExistsRequest.
 * Use `create(GrpcDeleteCatalogIfExistsRequestSchema)` to create a new message.
 */
export const GrpcDeleteCatalogIfExistsRequestSchema: GenMessage<GrpcDeleteCatalogIfExistsRequest> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 14);

/**
 * Response to a catalog deletion request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDeleteCatalogIfExistsResponse
 */
export type GrpcDeleteCatalogIfExistsResponse = Message<"io.evitadb.externalApi.grpc.generated.GrpcDeleteCatalogIfExistsResponse"> & {
  /**
   * Indicator whether the catalog was deleted successfully.
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcDeleteCatalogIfExistsResponse.
 * Use `create(GrpcDeleteCatalogIfExistsResponseSchema)` to create a new message.
 */
export const GrpcDeleteCatalogIfExistsResponseSchema: GenMessage<GrpcDeleteCatalogIfExistsResponse> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 15);

/**
 * Request to make a catalog mutable.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcMakeCatalogMutableRequest
 */
export type GrpcMakeCatalogMutableRequest = Message<"io.evitadb.externalApi.grpc.generated.GrpcMakeCatalogMutableRequest"> & {
  /**
   * Name of the catalog to make mutable.
   *
   * @generated from field: string catalogName = 1;
   */
  catalogName: string;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcMakeCatalogMutableRequest.
 * Use `create(GrpcMakeCatalogMutableRequestSchema)` to create a new message.
 */
export const GrpcMakeCatalogMutableRequestSchema: GenMessage<GrpcMakeCatalogMutableRequest> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 16);

/**
 * Response to a make catalog mutable request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcMakeCatalogMutableResponse
 */
export type GrpcMakeCatalogMutableResponse = Message<"io.evitadb.externalApi.grpc.generated.GrpcMakeCatalogMutableResponse"> & {
  /**
   * Indicator whether the catalog was made mutable successfully.
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcMakeCatalogMutableResponse.
 * Use `create(GrpcMakeCatalogMutableResponseSchema)` to create a new message.
 */
export const GrpcMakeCatalogMutableResponseSchema: GenMessage<GrpcMakeCatalogMutableResponse> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 17);

/**
 * Request to make a catalog immutable.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcMakeCatalogImmutableRequest
 */
export type GrpcMakeCatalogImmutableRequest = Message<"io.evitadb.externalApi.grpc.generated.GrpcMakeCatalogImmutableRequest"> & {
  /**
   * Name of the catalog to make immutable.
   *
   * @generated from field: string catalogName = 1;
   */
  catalogName: string;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcMakeCatalogImmutableRequest.
 * Use `create(GrpcMakeCatalogImmutableRequestSchema)` to create a new message.
 */
export const GrpcMakeCatalogImmutableRequestSchema: GenMessage<GrpcMakeCatalogImmutableRequest> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 18);

/**
 * Response to a make catalog immutable request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcMakeCatalogImmutableResponse
 */
export type GrpcMakeCatalogImmutableResponse = Message<"io.evitadb.externalApi.grpc.generated.GrpcMakeCatalogImmutableResponse"> & {
  /**
   * Indicator whether the catalog was made immutable successfully.
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcMakeCatalogImmutableResponse.
 * Use `create(GrpcMakeCatalogImmutableResponseSchema)` to create a new message.
 */
export const GrpcMakeCatalogImmutableResponseSchema: GenMessage<GrpcMakeCatalogImmutableResponse> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 19);

/**
 * Request to make a catalog alive.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcMakeCatalogAliveRequest
 */
export type GrpcMakeCatalogAliveRequest = Message<"io.evitadb.externalApi.grpc.generated.GrpcMakeCatalogAliveRequest"> & {
  /**
   * Name of the catalog to make alive.
   *
   * @generated from field: string catalogName = 1;
   */
  catalogName: string;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcMakeCatalogAliveRequest.
 * Use `create(GrpcMakeCatalogAliveRequestSchema)` to create a new message.
 */
export const GrpcMakeCatalogAliveRequestSchema: GenMessage<GrpcMakeCatalogAliveRequest> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 20);

/**
 * Response to a make catalog alive request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcMakeCatalogAliveResponse
 */
export type GrpcMakeCatalogAliveResponse = Message<"io.evitadb.externalApi.grpc.generated.GrpcMakeCatalogAliveResponse"> & {
  /**
   * Indicator whether the catalog was made alive successfully.
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcMakeCatalogAliveResponse.
 * Use `create(GrpcMakeCatalogAliveResponseSchema)` to create a new message.
 */
export const GrpcMakeCatalogAliveResponseSchema: GenMessage<GrpcMakeCatalogAliveResponse> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 21);

/**
 * Request to duplicate a catalog.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDuplicateCatalogRequest
 */
export type GrpcDuplicateCatalogRequest = Message<"io.evitadb.externalApi.grpc.generated.GrpcDuplicateCatalogRequest"> & {
  /**
   * Name of the source catalog to duplicate.
   *
   * @generated from field: string catalogName = 1;
   */
  catalogName: string;

  /**
   * Name of the new catalog to create with duplicated contents.
   *
   * @generated from field: string newCatalogName = 2;
   */
  newCatalogName: string;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcDuplicateCatalogRequest.
 * Use `create(GrpcDuplicateCatalogRequestSchema)` to create a new message.
 */
export const GrpcDuplicateCatalogRequestSchema: GenMessage<GrpcDuplicateCatalogRequest> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 22);

/**
 * Response to a duplicate catalog request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDuplicateCatalogResponse
 */
export type GrpcDuplicateCatalogResponse = Message<"io.evitadb.externalApi.grpc.generated.GrpcDuplicateCatalogResponse"> & {
  /**
   * Indicator whether the catalog was duplicated successfully.
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcDuplicateCatalogResponse.
 * Use `create(GrpcDuplicateCatalogResponseSchema)` to create a new message.
 */
export const GrpcDuplicateCatalogResponseSchema: GenMessage<GrpcDuplicateCatalogResponse> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 23);

/**
 * Request to activate a catalog.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcActivateCatalogRequest
 */
export type GrpcActivateCatalogRequest = Message<"io.evitadb.externalApi.grpc.generated.GrpcActivateCatalogRequest"> & {
  /**
   * Name of the catalog to activate.
   *
   * @generated from field: string catalogName = 1;
   */
  catalogName: string;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcActivateCatalogRequest.
 * Use `create(GrpcActivateCatalogRequestSchema)` to create a new message.
 */
export const GrpcActivateCatalogRequestSchema: GenMessage<GrpcActivateCatalogRequest> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 24);

/**
 * Response to an activate catalog request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcActivateCatalogResponse
 */
export type GrpcActivateCatalogResponse = Message<"io.evitadb.externalApi.grpc.generated.GrpcActivateCatalogResponse"> & {
  /**
   * Indicator whether the catalog was activated successfully.
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcActivateCatalogResponse.
 * Use `create(GrpcActivateCatalogResponseSchema)` to create a new message.
 */
export const GrpcActivateCatalogResponseSchema: GenMessage<GrpcActivateCatalogResponse> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 25);

/**
 * Request to deactivate a catalog.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDeactivateCatalogRequest
 */
export type GrpcDeactivateCatalogRequest = Message<"io.evitadb.externalApi.grpc.generated.GrpcDeactivateCatalogRequest"> & {
  /**
   * Name of the catalog to deactivate.
   *
   * @generated from field: string catalogName = 1;
   */
  catalogName: string;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcDeactivateCatalogRequest.
 * Use `create(GrpcDeactivateCatalogRequestSchema)` to create a new message.
 */
export const GrpcDeactivateCatalogRequestSchema: GenMessage<GrpcDeactivateCatalogRequest> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 26);

/**
 * Response to a deactivate catalog request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDeactivateCatalogResponse
 */
export type GrpcDeactivateCatalogResponse = Message<"io.evitadb.externalApi.grpc.generated.GrpcDeactivateCatalogResponse"> & {
  /**
   * Indicator whether the catalog was deactivated successfully.
   *
   * @generated from field: bool success = 1;
   */
  success: boolean;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcDeactivateCatalogResponse.
 * Use `create(GrpcDeactivateCatalogResponseSchema)` to create a new message.
 */
export const GrpcDeactivateCatalogResponseSchema: GenMessage<GrpcDeactivateCatalogResponse> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 27);

/**
 * Request to apply mutation on engine level.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcApplyMutationRequest
 */
export type GrpcApplyMutationRequest = Message<"io.evitadb.externalApi.grpc.generated.GrpcApplyMutationRequest"> & {
  /**
   * Single engine level mutation to be applied.
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcEngineMutation mutation = 1;
   */
  mutation?: GrpcEngineMutation;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcApplyMutationRequest.
 * Use `create(GrpcApplyMutationRequestSchema)` to create a new message.
 */
export const GrpcApplyMutationRequestSchema: GenMessage<GrpcApplyMutationRequest> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 28);

/**
 * Response to apply mutation on engine level.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcApplyMutationResponse
 */
export type GrpcApplyMutationResponse = Message<"io.evitadb.externalApi.grpc.generated.GrpcApplyMutationResponse"> & {
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcApplyMutationResponse.
 * Use `create(GrpcApplyMutationResponseSchema)` to create a new message.
 */
export const GrpcApplyMutationResponseSchema: GenMessage<GrpcApplyMutationResponse> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 29);

/**
 * Response to apply mutation on engine level.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcApplyMutationWithProgressResponse
 */
export type GrpcApplyMutationWithProgressResponse = Message<"io.evitadb.externalApi.grpc.generated.GrpcApplyMutationWithProgressResponse"> & {
  /**
   * The progress of the go live operation in percents.
   *
   * @generated from field: int32 progressInPercent = 1;
   */
  progressInPercent: number;

  /**
   * Contains catalog version when operation finishes (only if the mutation relates to a catalog)
   *
   * @generated from field: google.protobuf.Int64Value catalogVersion = 2;
   */
  catalogVersion?: bigint;

  /**
   * Contains catalog schema version when operation finishes (only if the mutation relates to a catalog)
   *
   * @generated from field: google.protobuf.Int32Value catalogSchemaVersion = 3;
   */
  catalogSchemaVersion?: number;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcApplyMutationWithProgressResponse.
 * Use `create(GrpcApplyMutationWithProgressResponseSchema)` to create a new message.
 */
export const GrpcApplyMutationWithProgressResponseSchema: GenMessage<GrpcApplyMutationWithProgressResponse> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 30);

/**
 * Request to register a system change capture.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcRegisterSystemChangeCaptureRequest
 */
export type GrpcRegisterSystemChangeCaptureRequest = Message<"io.evitadb.externalApi.grpc.generated.GrpcRegisterSystemChangeCaptureRequest"> & {
  /**
   * Starting point for the search (engine version)
   *
   * @generated from field: google.protobuf.Int64Value sinceVersion = 1;
   */
  sinceVersion?: bigint;

  /**
   * Starting point for the search (index of the mutation within engine version - currently each engine level transaction contains only one mutation)
   *
   * @generated from field: google.protobuf.Int32Value sinceIndex = 2;
   */
  sinceIndex?: number;

  /**
   * Requested content of the capture - i.e. whether client wants to receive only the simple notification about the change
   * or whether he wants to receive the full content of the change
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcChangeCaptureContent content = 3;
   */
  content: GrpcChangeCaptureContent;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcRegisterSystemChangeCaptureRequest.
 * Use `create(GrpcRegisterSystemChangeCaptureRequestSchema)` to create a new message.
 */
export const GrpcRegisterSystemChangeCaptureRequestSchema: GenMessage<GrpcRegisterSystemChangeCaptureRequest> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 31);

/**
 * Response to GrpcRegisterSystemChangeCapture request.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcRegisterSystemChangeCaptureResponse
 */
export type GrpcRegisterSystemChangeCaptureResponse = Message<"io.evitadb.externalApi.grpc.generated.GrpcRegisterSystemChangeCaptureResponse"> & {
  /**
   * Identification of the registered capture
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcUuid uuid = 1;
   */
  uuid?: GrpcUuid;

  /**
   * The list of mutations (CDC events) that match the criteria
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcChangeSystemCapture capture = 2;
   */
  capture?: GrpcChangeSystemCapture;

  /**
   * The type of the response - when subscription is set-up, acknowledgement is sent
   * Then with each capture event, the type is set to `change`
   *
   * @generated from field: io.evitadb.externalApi.grpc.generated.GrpcCaptureResponseType responseType = 3;
   */
  responseType: GrpcCaptureResponseType;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcRegisterSystemChangeCaptureResponse.
 * Use `create(GrpcRegisterSystemChangeCaptureResponseSchema)` to create a new message.
 */
export const GrpcRegisterSystemChangeCaptureResponseSchema: GenMessage<GrpcRegisterSystemChangeCaptureResponse> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 32);

/**
 * Request to get progress of the top-level engine mutations.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcGetProgressRequest
 */
export type GrpcGetProgressRequest = Message<"io.evitadb.externalApi.grpc.generated.GrpcGetProgressRequest"> & {
  /**
   * The name of the catalog for which the progress is requested.
   * Might be empty if the progress is not related to any catalog and is related to the whole evitaDB instance.
   *
   * @generated from field: string catalogName = 1;
   */
  catalogName: string;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcGetProgressRequest.
 * Use `create(GrpcGetProgressRequestSchema)` to create a new message.
 */
export const GrpcGetProgressRequestSchema: GenMessage<GrpcGetProgressRequest> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 33);

/**
 * Response to GrpcGetProgressRequest.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcGetProgressResponse
 */
export type GrpcGetProgressResponse = Message<"io.evitadb.externalApi.grpc.generated.GrpcGetProgressResponse"> & {
  /**
   * contains information whether the progress was found or not
   *
   * @generated from field: bool found = 1;
   */
  found: boolean;

  /**
   * The progress of the top-level engine mutation in percents.
   *
   * @generated from field: google.protobuf.Int32Value progressInPercent = 2;
   */
  progressInPercent?: number;

  /**
   * Contains catalog name copied from the request (if the progress is related to a catalog)
   *
   * @generated from field: string catalogName = 3;
   */
  catalogName: string;

  /**
   * Contains catalog version when operation finishes (only if the mutation relates to a catalog)
   *
   * @generated from field: google.protobuf.Int64Value catalogVersion = 4;
   */
  catalogVersion?: bigint;

  /**
   * Contains catalog schema version when operation finishes (only if the mutation relates to a catalog)
   *
   * @generated from field: google.protobuf.Int32Value catalogSchemaVersion = 5;
   */
  catalogSchemaVersion?: number;
};

/**
 * Describes the message io.evitadb.externalApi.grpc.generated.GrpcGetProgressResponse.
 * Use `create(GrpcGetProgressResponseSchema)` to create a new message.
 */
export const GrpcGetProgressResponseSchema: GenMessage<GrpcGetProgressResponse> = /*@__PURE__*/
  messageDesc(file_GrpcEvitaAPI, 34);

/**
 * This service contains RPCs that could be called by gRPC clients on evitaDB. Main purpose of this service is to provide
 * a way to create sessions and catalogs, and to update the catalog.
 *
 * @generated from service io.evitadb.externalApi.grpc.generated.EvitaService
 */
export const EvitaService: GenService<{
  /**
   * Procedure used to check readiness of the API
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.IsReady
   */
  isReady: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof GrpcReadyResponseSchema;
  },
  /**
   * Procedure used to create read only sessions.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.CreateReadOnlySession
   */
  createReadOnlySession: {
    methodKind: "unary";
    input: typeof GrpcEvitaSessionRequestSchema;
    output: typeof GrpcEvitaSessionResponseSchema;
  },
  /**
   * Procedure used to create read write sessions.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.CreateReadWriteSession
   */
  createReadWriteSession: {
    methodKind: "unary";
    input: typeof GrpcEvitaSessionRequestSchema;
    output: typeof GrpcEvitaSessionResponseSchema;
  },
  /**
   * Procedure used to create read-only session which will return data in binary format. Part of the Private API.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.CreateBinaryReadOnlySession
   */
  createBinaryReadOnlySession: {
    methodKind: "unary";
    input: typeof GrpcEvitaSessionRequestSchema;
    output: typeof GrpcEvitaSessionResponseSchema;
  },
  /**
   * Procedure used to create read-write session which will return data in binary format. Part of the Private API.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.CreateBinaryReadWriteSession
   */
  createBinaryReadWriteSession: {
    methodKind: "unary";
    input: typeof GrpcEvitaSessionRequestSchema;
    output: typeof GrpcEvitaSessionResponseSchema;
  },
  /**
   * Procedure used to terminate existing session.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.TerminateSession
   */
  terminateSession: {
    methodKind: "unary";
    input: typeof GrpcEvitaSessionTerminationRequestSchema;
    output: typeof GrpcEvitaSessionTerminationResponseSchema;
  },
  /**
   * Procedure used to get names of all existing catalogs.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.GetCatalogNames
   */
  getCatalogNames: {
    methodKind: "unary";
    input: typeof EmptySchema;
    output: typeof GrpcCatalogNamesResponseSchema;
  },
  /**
   * Procedure used to get state of the catalog by its name.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.GetCatalogState
   */
  getCatalogState: {
    methodKind: "unary";
    input: typeof GrpcGetCatalogStateRequestSchema;
    output: typeof GrpcGetCatalogStateResponseSchema;
  },
  /**
   * Procedure used to define a new catalog.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.DefineCatalog
   */
  defineCatalog: {
    methodKind: "unary";
    input: typeof GrpcDefineCatalogRequestSchema;
    output: typeof GrpcDefineCatalogResponseSchema;
  },
  /**
   * Procedure used to delete an existing catalog.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.DeleteCatalogIfExists
   */
  deleteCatalogIfExists: {
    methodKind: "unary";
    input: typeof GrpcDeleteCatalogIfExistsRequestSchema;
    output: typeof GrpcDeleteCatalogIfExistsResponseSchema;
  },
  /**
   * Procedure used to update the catalog with a set of mutations.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.ApplyMutation
   */
  applyMutation: {
    methodKind: "unary";
    input: typeof GrpcApplyMutationRequestSchema;
    output: typeof GrpcApplyMutationResponseSchema;
  },
  /**
   * Procedure used to update the catalog with a set of mutations which tracks the progress of the operation.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.ApplyMutationWithProgress
   */
  applyMutationWithProgress: {
    methodKind: "server_streaming";
    input: typeof GrpcApplyMutationRequestSchema;
    output: typeof GrpcApplyMutationWithProgressResponseSchema;
  },
  /**
   * Procedure used to rename an existing catalog.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.RenameCatalog
   */
  renameCatalog: {
    methodKind: "unary";
    input: typeof GrpcRenameCatalogRequestSchema;
    output: typeof GrpcRenameCatalogResponseSchema;
  },
  /**
   * Procedure used to rename an existing catalog with progress tracking.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.RenameCatalogWithProgress
   */
  renameCatalogWithProgress: {
    methodKind: "server_streaming";
    input: typeof GrpcRenameCatalogRequestSchema;
    output: typeof GrpcApplyMutationWithProgressResponseSchema;
  },
  /**
   * Procedure used to replace an existing catalog.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.ReplaceCatalog
   */
  replaceCatalog: {
    methodKind: "unary";
    input: typeof GrpcReplaceCatalogRequestSchema;
    output: typeof GrpcReplaceCatalogResponseSchema;
  },
  /**
   * Procedure used to replace an existing catalog with progress tracking.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.ReplaceCatalogWithProgress
   */
  replaceCatalogWithProgress: {
    methodKind: "server_streaming";
    input: typeof GrpcReplaceCatalogRequestSchema;
    output: typeof GrpcApplyMutationWithProgressResponseSchema;
  },
  /**
   * Procedure used to make a catalog mutable.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.MakeCatalogMutable
   */
  makeCatalogMutable: {
    methodKind: "unary";
    input: typeof GrpcMakeCatalogMutableRequestSchema;
    output: typeof GrpcMakeCatalogMutableResponseSchema;
  },
  /**
   * Procedure used to make a catalog mutable with progress tracking.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.MakeCatalogMutableWithProgress
   */
  makeCatalogMutableWithProgress: {
    methodKind: "server_streaming";
    input: typeof GrpcMakeCatalogMutableRequestSchema;
    output: typeof GrpcApplyMutationWithProgressResponseSchema;
  },
  /**
   * Procedure used to make a catalog immutable.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.MakeCatalogImmutable
   */
  makeCatalogImmutable: {
    methodKind: "unary";
    input: typeof GrpcMakeCatalogImmutableRequestSchema;
    output: typeof GrpcMakeCatalogImmutableResponseSchema;
  },
  /**
   * Procedure used to make a catalog immutable with progress tracking.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.MakeCatalogImmutableWithProgress
   */
  makeCatalogImmutableWithProgress: {
    methodKind: "server_streaming";
    input: typeof GrpcMakeCatalogImmutableRequestSchema;
    output: typeof GrpcApplyMutationWithProgressResponseSchema;
  },
  /**
   * Procedure used to make a catalog alive.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.MakeCatalogAlive
   */
  makeCatalogAlive: {
    methodKind: "unary";
    input: typeof GrpcMakeCatalogAliveRequestSchema;
    output: typeof GrpcMakeCatalogAliveResponseSchema;
  },
  /**
   * Procedure used to make a catalog alive with progress tracking.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.MakeCatalogAliveWithProgress
   */
  makeCatalogAliveWithProgress: {
    methodKind: "server_streaming";
    input: typeof GrpcMakeCatalogAliveRequestSchema;
    output: typeof GrpcApplyMutationWithProgressResponseSchema;
  },
  /**
   * Procedure used to duplicate a catalog.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.DuplicateCatalog
   */
  duplicateCatalog: {
    methodKind: "unary";
    input: typeof GrpcDuplicateCatalogRequestSchema;
    output: typeof GrpcDuplicateCatalogResponseSchema;
  },
  /**
   * Procedure used to duplicate a catalog with progress tracking.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.DuplicateCatalogWithProgress
   */
  duplicateCatalogWithProgress: {
    methodKind: "server_streaming";
    input: typeof GrpcDuplicateCatalogRequestSchema;
    output: typeof GrpcApplyMutationWithProgressResponseSchema;
  },
  /**
   * Procedure used to activate a catalog.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.ActivateCatalog
   */
  activateCatalog: {
    methodKind: "unary";
    input: typeof GrpcActivateCatalogRequestSchema;
    output: typeof GrpcActivateCatalogResponseSchema;
  },
  /**
   * Procedure used to activate a catalog with progress tracking.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.ActivateCatalogWithProgress
   */
  activateCatalogWithProgress: {
    methodKind: "server_streaming";
    input: typeof GrpcActivateCatalogRequestSchema;
    output: typeof GrpcApplyMutationWithProgressResponseSchema;
  },
  /**
   * Procedure used to deactivate a catalog.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.DeactivateCatalog
   */
  deactivateCatalog: {
    methodKind: "unary";
    input: typeof GrpcDeactivateCatalogRequestSchema;
    output: typeof GrpcDeactivateCatalogResponseSchema;
  },
  /**
   * Procedure used to deactivate a catalog with progress tracking.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.DeactivateCatalogWithProgress
   */
  deactivateCatalogWithProgress: {
    methodKind: "server_streaming";
    input: typeof GrpcDeactivateCatalogRequestSchema;
    output: typeof GrpcApplyMutationWithProgressResponseSchema;
  },
  /**
   * Procedure used to register a system change capture.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.RegisterSystemChangeCapture
   */
  registerSystemChangeCapture: {
    methodKind: "server_streaming";
    input: typeof GrpcRegisterSystemChangeCaptureRequestSchema;
    output: typeof GrpcRegisterSystemChangeCaptureResponseSchema;
  },
  /**
   * Procedure used to initiate progress consumption for top-level engine mutations.
   *
   * @generated from rpc io.evitadb.externalApi.grpc.generated.EvitaService.GetProgress
   */
  getProgress: {
    methodKind: "server_streaming";
    input: typeof GrpcGetProgressRequestSchema;
    output: typeof GrpcGetProgressResponseSchema;
  },
}> = /*@__PURE__*/
  serviceDesc(file_GrpcEvitaAPI, 0);

