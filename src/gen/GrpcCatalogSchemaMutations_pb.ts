// @generated by protoc-gen-es v1.10.0 with parameter "target=ts"
// @generated from file GrpcCatalogSchemaMutations.proto (package io.evitadb.externalApi.grpc.generated, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from "@bufbuild/protobuf";
import { Message, proto3, StringValue } from "@bufbuild/protobuf";
import { GrpcCatalogEvolutionMode } from "./GrpcEnums_pb.js";
import { GrpcEntitySchemaMutation } from "./GrpcEntitySchemaMutation_pb.js";

/**
 * Mutation is responsible for setting up a new CatalogSchema.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcCreateCatalogSchemaMutation
 */
export class GrpcCreateCatalogSchemaMutation extends Message<GrpcCreateCatalogSchemaMutation> {
  /**
   * Name of newly created catalog schema.
   *
   * @generated from field: string catalogName = 1;
   */
  catalogName = "";

  constructor(data?: PartialMessage<GrpcCreateCatalogSchemaMutation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcCreateCatalogSchemaMutation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalogName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcCreateCatalogSchemaMutation {
    return new GrpcCreateCatalogSchemaMutation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcCreateCatalogSchemaMutation {
    return new GrpcCreateCatalogSchemaMutation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcCreateCatalogSchemaMutation {
    return new GrpcCreateCatalogSchemaMutation().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcCreateCatalogSchemaMutation | PlainMessage<GrpcCreateCatalogSchemaMutation> | undefined, b: GrpcCreateCatalogSchemaMutation | PlainMessage<GrpcCreateCatalogSchemaMutation> | undefined): boolean {
    return proto3.util.equals(GrpcCreateCatalogSchemaMutation, a, b);
  }
}

/**
 * Mutation is responsible for setting value to a `CatalogSchema.description` in `CatalogSchema`.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcModifyCatalogSchemaDescriptionMutation
 */
export class GrpcModifyCatalogSchemaDescriptionMutation extends Message<GrpcModifyCatalogSchemaDescriptionMutation> {
  /**
   * Contains description of the model is optional but helps authors of the schema / client API to better
   * explain the original purpose of the model to the consumers.
   *
   * @generated from field: google.protobuf.StringValue description = 1;
   */
  description?: string;

  constructor(data?: PartialMessage<GrpcModifyCatalogSchemaDescriptionMutation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcModifyCatalogSchemaDescriptionMutation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "description", kind: "message", T: StringValue },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcModifyCatalogSchemaDescriptionMutation {
    return new GrpcModifyCatalogSchemaDescriptionMutation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcModifyCatalogSchemaDescriptionMutation {
    return new GrpcModifyCatalogSchemaDescriptionMutation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcModifyCatalogSchemaDescriptionMutation {
    return new GrpcModifyCatalogSchemaDescriptionMutation().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcModifyCatalogSchemaDescriptionMutation | PlainMessage<GrpcModifyCatalogSchemaDescriptionMutation> | undefined, b: GrpcModifyCatalogSchemaDescriptionMutation | PlainMessage<GrpcModifyCatalogSchemaDescriptionMutation> | undefined): boolean {
    return proto3.util.equals(GrpcModifyCatalogSchemaDescriptionMutation, a, b);
  }
}

/**
 * Mutation is responsible for renaming an existing CatalogSchema.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcModifyCatalogSchemaNameMutation
 */
export class GrpcModifyCatalogSchemaNameMutation extends Message<GrpcModifyCatalogSchemaNameMutation> {
  /**
   * Name of the catalog schema the mutation is targeting (will rename).
   *
   * @generated from field: string catalogName = 1;
   */
  catalogName = "";

  /**
   * The new name of the catalog schema.
   *
   * @generated from field: string newCatalogName = 2;
   */
  newCatalogName = "";

  /**
   * Flag indicating whether to replace the existing catalog or just to rename it.
   *
   * @generated from field: bool overwriteTarget = 3;
   */
  overwriteTarget = false;

  constructor(data?: PartialMessage<GrpcModifyCatalogSchemaNameMutation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcModifyCatalogSchemaNameMutation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalogName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "newCatalogName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "overwriteTarget", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcModifyCatalogSchemaNameMutation {
    return new GrpcModifyCatalogSchemaNameMutation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcModifyCatalogSchemaNameMutation {
    return new GrpcModifyCatalogSchemaNameMutation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcModifyCatalogSchemaNameMutation {
    return new GrpcModifyCatalogSchemaNameMutation().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcModifyCatalogSchemaNameMutation | PlainMessage<GrpcModifyCatalogSchemaNameMutation> | undefined, b: GrpcModifyCatalogSchemaNameMutation | PlainMessage<GrpcModifyCatalogSchemaNameMutation> | undefined): boolean {
    return proto3.util.equals(GrpcModifyCatalogSchemaNameMutation, a, b);
  }
}

/**
 * Mutation is responsible for adding one or more modes to a `CatalogSchema.catalogEvolutionMode` in `CatalogSchema`.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcAllowEvolutionModeInCatalogSchemaMutation
 */
export class GrpcAllowEvolutionModeInCatalogSchemaMutation extends Message<GrpcAllowEvolutionModeInCatalogSchemaMutation> {
  /**
   * Set of allowed catalog evolution modes. These allow to specify how strict is evitaDB when unknown
   * information is presented to her for the first time. When no evolution mode is set, each violation of the
   * `CatalogSchema` is reported by an error. This behaviour can be changed by this evolution mode, however.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcCatalogEvolutionMode evolutionModes = 1;
   */
  evolutionModes: GrpcCatalogEvolutionMode[] = [];

  constructor(data?: PartialMessage<GrpcAllowEvolutionModeInCatalogSchemaMutation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcAllowEvolutionModeInCatalogSchemaMutation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "evolutionModes", kind: "enum", T: proto3.getEnumType(GrpcCatalogEvolutionMode), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcAllowEvolutionModeInCatalogSchemaMutation {
    return new GrpcAllowEvolutionModeInCatalogSchemaMutation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcAllowEvolutionModeInCatalogSchemaMutation {
    return new GrpcAllowEvolutionModeInCatalogSchemaMutation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcAllowEvolutionModeInCatalogSchemaMutation {
    return new GrpcAllowEvolutionModeInCatalogSchemaMutation().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcAllowEvolutionModeInCatalogSchemaMutation | PlainMessage<GrpcAllowEvolutionModeInCatalogSchemaMutation> | undefined, b: GrpcAllowEvolutionModeInCatalogSchemaMutation | PlainMessage<GrpcAllowEvolutionModeInCatalogSchemaMutation> | undefined): boolean {
    return proto3.util.equals(GrpcAllowEvolutionModeInCatalogSchemaMutation, a, b);
  }
}

/**
 * Mutation is responsible for removing one or more modes from a `CatalogSchema.evolutionMode` in `CatalogSchema`.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcDisallowEvolutionModeInCatalogSchemaMutation
 */
export class GrpcDisallowEvolutionModeInCatalogSchemaMutation extends Message<GrpcDisallowEvolutionModeInCatalogSchemaMutation> {
  /**
   * Set of forbidden evolution modes. These allow to specify how strict is evitaDB when unknown information is
   * presented to her for the first time. When no evolution mode is set, each violation of the `CatalogSchema` is
   * reported by an error. This behaviour can be changed by this evolution mode, however.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcCatalogEvolutionMode evolutionModes = 1;
   */
  evolutionModes: GrpcCatalogEvolutionMode[] = [];

  constructor(data?: PartialMessage<GrpcDisallowEvolutionModeInCatalogSchemaMutation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcDisallowEvolutionModeInCatalogSchemaMutation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "evolutionModes", kind: "enum", T: proto3.getEnumType(GrpcCatalogEvolutionMode), repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcDisallowEvolutionModeInCatalogSchemaMutation {
    return new GrpcDisallowEvolutionModeInCatalogSchemaMutation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcDisallowEvolutionModeInCatalogSchemaMutation {
    return new GrpcDisallowEvolutionModeInCatalogSchemaMutation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcDisallowEvolutionModeInCatalogSchemaMutation {
    return new GrpcDisallowEvolutionModeInCatalogSchemaMutation().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcDisallowEvolutionModeInCatalogSchemaMutation | PlainMessage<GrpcDisallowEvolutionModeInCatalogSchemaMutation> | undefined, b: GrpcDisallowEvolutionModeInCatalogSchemaMutation | PlainMessage<GrpcDisallowEvolutionModeInCatalogSchemaMutation> | undefined): boolean {
    return proto3.util.equals(GrpcDisallowEvolutionModeInCatalogSchemaMutation, a, b);
  }
}

/**
 * Mutation is responsible for removing an existing CatalogSchema.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcRemoveCatalogSchemaMutation
 */
export class GrpcRemoveCatalogSchemaMutation extends Message<GrpcRemoveCatalogSchemaMutation> {
  /**
   * Name of catalog schema to remove.
   *
   * @generated from field: string catalogName = 1;
   */
  catalogName = "";

  constructor(data?: PartialMessage<GrpcRemoveCatalogSchemaMutation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcRemoveCatalogSchemaMutation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "catalogName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcRemoveCatalogSchemaMutation {
    return new GrpcRemoveCatalogSchemaMutation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcRemoveCatalogSchemaMutation {
    return new GrpcRemoveCatalogSchemaMutation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcRemoveCatalogSchemaMutation {
    return new GrpcRemoveCatalogSchemaMutation().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcRemoveCatalogSchemaMutation | PlainMessage<GrpcRemoveCatalogSchemaMutation> | undefined, b: GrpcRemoveCatalogSchemaMutation | PlainMessage<GrpcRemoveCatalogSchemaMutation> | undefined): boolean {
    return proto3.util.equals(GrpcRemoveCatalogSchemaMutation, a, b);
  }
}

/**
 * Mutation is responsible for setting up a new `EntitySchema` - or more precisely the collection within catalog.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcCreateEntitySchemaMutation
 */
export class GrpcCreateEntitySchemaMutation extends Message<GrpcCreateEntitySchemaMutation> {
  /**
   * Name of newly created entity schema.
   *
   * @generated from field: string entityType = 1;
   */
  entityType = "";

  constructor(data?: PartialMessage<GrpcCreateEntitySchemaMutation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcCreateEntitySchemaMutation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entityType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcCreateEntitySchemaMutation {
    return new GrpcCreateEntitySchemaMutation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcCreateEntitySchemaMutation {
    return new GrpcCreateEntitySchemaMutation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcCreateEntitySchemaMutation {
    return new GrpcCreateEntitySchemaMutation().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcCreateEntitySchemaMutation | PlainMessage<GrpcCreateEntitySchemaMutation> | undefined, b: GrpcCreateEntitySchemaMutation | PlainMessage<GrpcCreateEntitySchemaMutation> | undefined): boolean {
    return proto3.util.equals(GrpcCreateEntitySchemaMutation, a, b);
  }
}

/**
 * Mutation is a holder for a set of `EntitySchemaMutation` that affect a single entity schema within the `CatalogSchema`.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcModifyEntitySchemaMutation
 */
export class GrpcModifyEntitySchemaMutation extends Message<GrpcModifyEntitySchemaMutation> {
  /**
   * Entity type of entity schema that will be affected by passed mutations.
   *
   * @generated from field: string entityType = 1;
   */
  entityType = "";

  /**
   * Collection of mutations that should be applied on current version of the schema.
   *
   * @generated from field: repeated io.evitadb.externalApi.grpc.generated.GrpcEntitySchemaMutation entitySchemaMutations = 2;
   */
  entitySchemaMutations: GrpcEntitySchemaMutation[] = [];

  constructor(data?: PartialMessage<GrpcModifyEntitySchemaMutation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcModifyEntitySchemaMutation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "entityType", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "entitySchemaMutations", kind: "message", T: GrpcEntitySchemaMutation, repeated: true },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcModifyEntitySchemaMutation {
    return new GrpcModifyEntitySchemaMutation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcModifyEntitySchemaMutation {
    return new GrpcModifyEntitySchemaMutation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcModifyEntitySchemaMutation {
    return new GrpcModifyEntitySchemaMutation().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcModifyEntitySchemaMutation | PlainMessage<GrpcModifyEntitySchemaMutation> | undefined, b: GrpcModifyEntitySchemaMutation | PlainMessage<GrpcModifyEntitySchemaMutation> | undefined): boolean {
    return proto3.util.equals(GrpcModifyEntitySchemaMutation, a, b);
  }
}

/**
 * Mutation is responsible for renaming an existing `EntitySchema`.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcModifyEntitySchemaNameMutation
 */
export class GrpcModifyEntitySchemaNameMutation extends Message<GrpcModifyEntitySchemaNameMutation> {
  /**
   * Name of the entity schema the mutation is targeting.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  /**
   * New name of the entity schema the mutation is targeting.
   *
   * @generated from field: string newName = 2;
   */
  newName = "";

  /**
   * Whether to overwrite entity collection with same name as the `newName` if found.
   *
   * @generated from field: bool overwriteTarget = 3;
   */
  overwriteTarget = false;

  constructor(data?: PartialMessage<GrpcModifyEntitySchemaNameMutation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcModifyEntitySchemaNameMutation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "newName", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "overwriteTarget", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcModifyEntitySchemaNameMutation {
    return new GrpcModifyEntitySchemaNameMutation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcModifyEntitySchemaNameMutation {
    return new GrpcModifyEntitySchemaNameMutation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcModifyEntitySchemaNameMutation {
    return new GrpcModifyEntitySchemaNameMutation().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcModifyEntitySchemaNameMutation | PlainMessage<GrpcModifyEntitySchemaNameMutation> | undefined, b: GrpcModifyEntitySchemaNameMutation | PlainMessage<GrpcModifyEntitySchemaNameMutation> | undefined): boolean {
    return proto3.util.equals(GrpcModifyEntitySchemaNameMutation, a, b);
  }
}

/**
 * Mutation is responsible for removing an existing `EntitySchema`.
 *
 * @generated from message io.evitadb.externalApi.grpc.generated.GrpcRemoveEntitySchemaMutation
 */
export class GrpcRemoveEntitySchemaMutation extends Message<GrpcRemoveEntitySchemaMutation> {
  /**
   * Name of entity schema to remove.
   *
   * @generated from field: string name = 1;
   */
  name = "";

  constructor(data?: PartialMessage<GrpcRemoveEntitySchemaMutation>) {
    super();
    proto3.util.initPartial(data, this);
  }

  static readonly runtime: typeof proto3 = proto3;
  static readonly typeName = "io.evitadb.externalApi.grpc.generated.GrpcRemoveEntitySchemaMutation";
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "name", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ]);

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): GrpcRemoveEntitySchemaMutation {
    return new GrpcRemoveEntitySchemaMutation().fromBinary(bytes, options);
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): GrpcRemoveEntitySchemaMutation {
    return new GrpcRemoveEntitySchemaMutation().fromJson(jsonValue, options);
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): GrpcRemoveEntitySchemaMutation {
    return new GrpcRemoveEntitySchemaMutation().fromJsonString(jsonString, options);
  }

  static equals(a: GrpcRemoveEntitySchemaMutation | PlainMessage<GrpcRemoveEntitySchemaMutation> | undefined, b: GrpcRemoveEntitySchemaMutation | PlainMessage<GrpcRemoveEntitySchemaMutation> | undefined): boolean {
    return proto3.util.equals(GrpcRemoveEntitySchemaMutation, a, b);
  }
}

