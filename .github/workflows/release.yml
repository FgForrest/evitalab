# Builds and releases a new public version of evitaLab a puts it into `Releases` section of GitHub

name: Release

on:
  push:
    branches:
      - 'master'

permissions:
  contents: read

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  build-and-release:
    name: Build and release
    permissions:
      # write permission is required to create a github release
      contents: write
      # write permission is required for autolabeler
      # otherwise, read permission is required at least
      pull-requests: write
    outputs:
      released_version: ${{ steps.create-release.outputs.tag_name }}

    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Create .zip of source
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: 'zip'
          filename: 'source.zip'
          path: './'

      - name: Create .tar.gz of source
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: 'tar'
          filename: 'source.tar.gz'
          path: './'

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18.16.1'

      - name: Install dependencies
        run: npm install -g yarn && yarn install --frozen-lockfile

      - name: Build
        run: yarn build

      - name: Include license in dist
        run: cp LICENSE ./dist

      - name: Create .zip of dist
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: 'zip'
          filename: 'dist.zip'
          path: './dist'

      - name: Create .tar.gz of dist
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: 'tar'
          filename: 'dist.tar.gz'
          path: './dist'

      - name: Create release
        id: create_release
        uses: release-drafter/release-drafter@v5

      - name: Upload dist.zip to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist.zip
          asset_name: Dist (zip)
          asset_content_type: application/zip

      - name: Upload dist.tar.gz to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist.tar.gz
          asset_name: Dist (tar.gz)
          asset_content_type: application/gzip

      - name: Upload source.zip to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./source.zip
          asset_name: Source code (zip)
          asset_content_type: application/zip

      - name: Upload source.tar.gz to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./source.tar.gz
          asset_name: Source code (tar.gz)
          asset_content_type: application/gzip

  build-and-release-docker:
    name: Build and release Docker image
    needs: build-and-release
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v3

      - name: Log in to Docker hub
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-release.outputs.released_version }},${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
